#line 1 "DumpShaderDefinesAsCommentedCode"
// #define __SHADER_TARGET_MAJOR 5
// #define __SHADER_TARGET_MINOR 0
// #define ALLOW_STATIC_LIGHTING 1
// #define AMPLIFICATIONSHADER 0
// #define CLEAR_COAT_BOTTOM_NORMAL 0
// #define COMPILE_BASEPASS_PIXEL_VOLUMETRIC_FOGGING 1
// #define COMPILE_SHADERS_FOR_DEVELOPMENT 1
// #define COMPILER_DEFINE #define
// #define COMPILER_DXC 0
// #define COMPUTESHADER 0
// #define DO_CHECK 1
// #define DO_GUARD_SLOW 0
// #define DUAL_SOURCE_COLOR_BLENDING_ENABLED 0
// #define DXT5_NORMALMAPS 0
// #define EARLY_Z_PASS_ONLY_MATERIAL_MASKING 0
// #define ENABLE_DBUFFER_TEXTURES 1
// #define ENABLE_SKY_LIGHT 0
// #define FORWARD_SHADING 1
// #define GBUFFER_HAS_DIFFUSE_SAMPLE_OCCLUSION 0
// #define GBUFFER_HAS_VELOCITY 0
// #define GBUFFER_REFACTOR 1
// #define GENERATE_SPHERICAL_PARTICLE_NORMALS 0
// #define GEOMETRYSHADER 0
// #define GPU_SKINNED_MESH_FACTORY 1
// #define GPUSKIN_LIMIT_2BONE_INFLUENCES 0
// #define GPUSKIN_UNLIMITED_BONE_INFLUENCE 0
// #define GPUSKIN_USE_BONES_SRV_BUFFER 1
// #define HAS_INVERTED_Z_BUFFER 1
// #define HAS_PRIMITIVE_UNIFORM_BUFFER 1
// #define INSTANCED_STEREO 1
// #define INTERPOLATE_VERTEX_COLOR 0
// #define IRIS_NORMAL 0
// #define IS_BASE_PASS 1
// #define IS_MATERIAL_SHADER 1
// #define IS_MOBILE_BASE_PASS 0
// #define LOCAL_LIGHT_DATA_STRIDE 6
// #define MATERIAL_ALLOW_NEGATIVE_EMISSIVECOLOR 0
// #define MATERIAL_COMPUTE_FOG_PER_PIXEL 0
// #define MATERIAL_CONTACT_SHADOWS 0
// #define MATERIAL_DECAL_READ_MASK 7
// #define MATERIAL_DITHER_OPACITY_MASK 0
// #define MATERIAL_DOMAIN_SURFACE 1
// #define MATERIAL_ENABLE_TRANSLUCENCY_CLOUD_FOGGING 0
// #define MATERIAL_ENABLE_TRANSLUCENCY_FOGGING 1
// #define MATERIAL_ENERGYCONSERVATION 0
// #define MATERIAL_FORWARD_BLENDS_SKYLIGHT_CUBEMAPS 0
// #define MATERIAL_FULLY_ROUGH 0
// #define MATERIAL_HQ_FORWARD_REFLECTION_CAPTURES 0
// #define MATERIAL_IS_SKY 0
// #define MATERIAL_IS_STRATA 0
// #define MATERIAL_NONMETAL 0
// #define MATERIAL_NORMAL_CURVATURE_TO_ROUGHNESS 0
// #define MATERIAL_OUTPUT_OPACITY_AS_ALPHA 0
// #define MATERIAL_PLANAR_FORWARD_REFLECTIONS 0
// #define MATERIAL_ROUGHDIFFUSE 0
// #define MATERIAL_SHADINGMODEL_SUBSURFACE_PROFILE 1
// #define MATERIAL_SINGLE_SHADINGMODEL 1
// #define MATERIAL_SKY_ATMOSPHERE 0
// #define MATERIAL_SSR 0
// #define MATERIAL_TANGENTSPACENORMAL 1
// #define MATERIAL_TWOSIDED 0
// #define MATERIAL_USE_ALPHA_TO_COVERAGE 0
// #define MATERIAL_USE_LM_DIRECTIONALITY 1
// #define MATERIAL_USE_PREINTEGRATED_GF 0
// #define MATERIAL_USES_ANISOTROPY 0
// #define MATERIAL_USES_SCENE_COLOR_COPY 0
// #define MATERIALBLENDING_MASKED 1
// #define MATERIALDECALRESPONSEMASK 7
// #define MATERIALDOMAIN_SURFACE 1
// #define MAX_NUM_LIGHTMAP_COEF 2
// #define MESHSHADER 0
// #define MOBILE_HIGH_QUALITY_BRDF 0
// #define MOBILE_MULTI_VIEW 0
// #define MULTI_VIEW 0
// #define NEEDS_INSTANCE_LOCAL_TO_WORLD_PS 0
// #define NEEDS_INSTANCE_WORLD_TO_LOCAL_PS 0
// #define NEEDS_PARTICLE_COLOR 0
// #define NEEDS_PARTICLE_LOCAL_TO_WORLD 0
// #define NEEDS_PARTICLE_WORLD_TO_LOCAL 0
// #define NUM_CULLED_GRID_PRIMITIVE_TYPES 2
// #define NUM_CULLED_LIGHTS_GRID_STRIDE 2
// #define NUM_VIRTUALTEXTURE_SAMPLES 0
// #define ODS_CAPTURE 0
// #define PIXELSHADER 1
// #define PIXELSHADEROUTPUT_MRT0 1
// #define PLATFORM_FORCE_SIMPLE_SKY_DIFFUSE 0
// #define PLATFORM_SUPPORTS_DISTANCE_FIELDS 1
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER0 0
// #define PLATFORM_SUPPORTS_MESH_SHADERS_TIER1 0
// #define PLATFORM_SUPPORTS_PER_PIXEL_DBUFFER_MASK 0
// #define PLATFORM_SUPPORTS_RENDERTARGET_WRITE_MASK 0
// #define PLATFORM_SUPPORTS_SRV_UB 1
// #define POST_PROCESS_ALPHA 0
// #define PRECOMPUTED_IRRADIANCE_VOLUME_LIGHTING 1
// #define PROJECT_ALLOW_GLOBAL_CLIP_PLANE 0
// #define PROJECT_MOBILE_DISABLE_VERTEX_FOG 1
// #define PROJECT_STRATA 0
// #define PROJECT_STRATA_BACKCOMPATIBILITY 0
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE 1
// #define PROJECT_SUPPORT_SKY_ATMOSPHERE_AFFECTS_HEIGHFOG 0
// #define PROJECT_VERTEX_FOGGING_FOR_OPAQUE 1
// #define RAYCALLABLESHADER 0
// #define RAYGENSHADER 0
// #define RAYHITGROUPSHADER 0
// #define RAYMISSSHADER 0
// #define REFRACTION_USE_INDEX_OF_REFRACTION 1
// #define SCENE_TEXTURES_DISABLED 0
// #define SELECTIVE_BASEPASS_OUTPUTS 0
// #define SHADING_PATH_DEFERRED 1
// #define SM5_PROFILE 1
// #define SUPPORT_CLOUD_SHADOW_ON_FORWARD_LIT_TRANSLUCENT 0
// #define TEXTURE_SAMPLE_DEBUG 0
// #define TRANSLUCENT_SHADOW_WITH_MASKED_OPACITY 0
// #define TRANSLUCENT_WRITING_VELOCITY 0
// #define UE_LWC_RENDER_TILE_SIZE 2097152.00f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_2PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_FMOD_PI 0.673652053f
// #define UE_LWC_RENDER_TILE_SIZE_RCP 4.76837158e-07f
// #define UE_LWC_RENDER_TILE_SIZE_RSQRT 0.000690533954f
// #define UE_LWC_RENDER_TILE_SIZE_SQRT 1448.15466f
// #define USE_DBUFFER 1
// #define USE_DITHERED_LOD_TRANSITION_FROM_MATERIAL 0
// #define USE_STENCIL_LOD_DITHER_DEFAULT 0
// #define USES_DISTORTION 0
// #define USES_EMISSIVE_COLOR 1
// #define USES_PER_INSTANCE_CUSTOM_DATA 0
// #define USES_PER_INSTANCE_RANDOM 0
// #define USES_TRANSFORM_VECTOR 1
// #define USES_VERTEX_INTERPOLATOR 0
// #define VELOCITY_ENCODE_DEPTH 1
// #define VERTEXSHADER 0
// #define VF_SUPPORTS_PRIMITIVE_SCENE_DATA 1
// #define VIRTUAL_TEXTURE_ANISOTROPIC_FILTERING 0
// #define WANT_PIXEL_DEPTH_OFFSET 0
#line 1 "/Engine/Private/BasePassPixelShader.usf"
#line 7 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "Common.ush"
#line 9 "/Engine/Private/Common.ush"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 36 "/Engine/Public/Platform.ush"
#line 1 "Platform/D3D/D3DCommon.ush"
#line 10 "/Engine/Public/Platform/D3D/D3DCommon.ush"
precise float MakePrecise(precise float v) { return v; }
precise float2 MakePrecise(precise float2 v) { return v; }
precise float3 MakePrecise(precise float3 v) { return v; }
precise float4 MakePrecise(precise float4 v) { return v; }
#line 37 "/Engine/Public/Platform.ush"
#line 42 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 457 "/Engine/Public/Platform.ush"
void ShaderYield()
{

}
#line 691 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}
#line 848 "/Engine/Public/Platform.ush"
float CondMask(bool Cond, float Src0, float Src1) { return Cond ? Src0 : Src1; }
float2 CondMask(bool Cond, float2 Src0, float2 Src1) { return Cond ? Src0 : Src1; }
float3 CondMask(bool Cond, float3 Src0, float3 Src1) { return Cond ? Src0 : Src1; }
float4 CondMask(bool Cond, float4 Src0, float4 Src1) { return Cond ? Src0 : Src1; }

int CondMask(bool Cond, int Src0, int Src1) { return Cond ? Src0 : Src1; }
int2 CondMask(bool Cond, int2 Src0, int2 Src1) { return Cond ? Src0 : Src1; }
int3 CondMask(bool Cond, int3 Src0, int3 Src1) { return Cond ? Src0 : Src1; }
int4 CondMask(bool Cond, int4 Src0, int4 Src1) { return Cond ? Src0 : Src1; }

uint CondMask(bool Cond, uint Src0, uint Src1) { return Cond ? Src0 : Src1; }
uint2 CondMask(bool Cond, uint2 Src0, uint2 Src1) { return Cond ? Src0 : Src1; }
uint3 CondMask(bool Cond, uint3 Src0, uint3 Src1) { return Cond ? Src0 : Src1; }
uint4 CondMask(bool Cond, uint4 Src0, uint4 Src1) { return Cond ? Src0 : Src1; }




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }









uint BitFieldInsertU32(uint Mask, uint Preserve, uint Enable)
{
	return (Preserve & Mask) | (Enable & ~Mask);
}

uint BitFieldExtractU32(uint Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;

	if (Size == 0u)
		return 0u;
	else if (Offset + Size < 32u)
		return (Data << (32u - Size - Offset)) >> (32u - Size);
	else
		return Data >> Offset;
}

int BitFieldExtractI32(int Data, uint Size, uint Offset)
{
	Size &= 31u;
	Offset &= 31u;

	if (Size == 0u)
		return 0;
	else if (Offset + Size < 32u)
		return (Data << (32u - Size - Offset)) >> (32u - Size);
	else
		return Data >> Offset;
}

uint BitFieldMaskU32(uint MaskWidth, uint MaskLocation)
{
	MaskWidth &= 31u;
	MaskLocation &= 31u;

	return ((1u << MaskWidth) - 1u) << MaskLocation;
}




uint BitAlignU32(uint High, uint Low, uint Shift)
{
	Shift &= 31u;

	uint Result = Low >> Shift;
	Result |= Shift > 0u ? (High << (32u - Shift)) : 0u;
	return Result;
}




uint ByteAlignU32(uint High, uint Low, uint Shift)
{
	return BitAlignU32(High, Low, Shift * 8);
}
#line 948 "/Engine/Public/Platform.ush"
uint2  PackUlongType(uint2 Value)
{
	return Value;
}

uint2 UnpackUlongType( uint2  Value)
{
	return Value;
}




uint MaskedBitCount( uint2 Bits, uint Index )
{
	bool bLow = Index < 32;

	uint Mask = 1u << ( Index - ( bLow ? 0 : 32 ) );
	Mask -= 1;

	uint Offset;
	Offset = countbits( Bits.x & ( bLow ? Mask : ~0u ) );
	Offset += countbits( Bits.y & ( bLow ? 0 : Mask ) );
	return Offset;
}
#line 10 "/Engine/Private/Common.ush"
#line 31 "/Engine/Private/Common.ush"
struct FloatDeriv
{
	float Value;
	float Ddx;
	float Ddy;
};

struct FloatDeriv2
{
	float2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FloatDeriv3
{
	float3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FloatDeriv4
{
	float4 Value;
	float4 Ddx;
	float4 Ddy;
};

FloatDeriv ConstructFloatDeriv(float InValue, float InDdx, float InDdy)
{
	FloatDeriv Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv2 ConstructFloatDeriv2(float2 InValue, float2 InDdx, float2 InDdy)
{
	FloatDeriv2 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv3 ConstructFloatDeriv3(float3 InValue, float3 InDdx, float3 InDdy)
{
	FloatDeriv3 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv4 ConstructFloatDeriv4(float4 InValue, float4 InDdx, float4 InDdy)
{
	FloatDeriv4 Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}
#line 109 "/Engine/Private/Common.ush"
const static  float  PI = 3.1415926535897932f;
const static float MaxHalfFloat = 65504.0f;
const static float Max11BitsFloat = 65024.0f;
const static float Max10BitsFloat = 64512.0f;
const static float3 Max111110BitsFloat3 = float3(Max11BitsFloat, Max11BitsFloat, Max10BitsFloat);
#line 166 "/Engine/Private/Common.ush"
#line 1 "GeneratedUniformBufferTypes.ush"
#line 8 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "Nanite/NanitePackedNaniteView.ush"
#line 5 "/Engine/Private/Nanite/NanitePackedNaniteView.ush"
struct FPackedNaniteView
{
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ViewToTranslatedWorld;

	float4x4 TranslatedWorldToView;
	float4x4 TranslatedWorldToClip;
	float4x4 ViewToClip;
	float4x4 ClipToRelativeWorld;

	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToRelativeWorld;

	int4 ViewRect;
	float4 ViewSizeAndInvSize;
	float4 ClipSpaceScaleOffset;
	float4 PreViewTranslation;
	float4 PrevPreViewTranslation;
	float4 WorldCameraOrigin;
	float4 ViewForwardAndNearPlane;

	float3 ViewTilePosition;
	float Padding0;

	float3 MatrixTilePosition;
	float Padding1;

	float2 LODScales;
	float MinBoundsRadiusSq;
	uint StreamingPriorityCategory_AndFlags;

	int4 TargetLayerIdX_AndMipLevelY_AndNumMipLevelsZ;

	int4 HZBTestViewRect;
};
#line 9 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 11 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsVisibilityCommonStruct.ush"
#line 6 "/Engine/Private/HairStrands/HairStrandsVisibilityCommonStruct.ush"
struct FPPLLNodeData
{
	float Depth;
	uint Specular_LightChannel_Backlit_Coverage16bit;
	uint PrimitiveID_MacroGroupID;
	uint Tangent_Coverage8bit;
	uint BaseColor_Roughness;
	uint NextNodeIndex;
	uint PackedVelocity;
};

struct FPackedHairSample
{
	float Depth;
	uint PrimitiveID_MacroGroupID;
	uint Tangent_Coverage8bit;
	uint BaseColor_Roughness;
	uint Specular_LightChannels_Backlit;
};

struct FPackedHairVis
{
	uint Depth_Coverage8bit;
	uint PrimitiveID_MaterialID;
};
#line 12 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsVoxelPageCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsVoxelPageCommonStruct.ush"
struct FPackedVirtualVoxelNodeDesc
{
	float3 TranslatedWorldMinAABB;
	uint PackedPageIndexResolution;
	float3 TranslatedWorldMaxAABB;
	uint PageIndexOffset;
};

struct FVoxelizationViewInfo
{
	float4x4 TranslatedWorldToClip;
	float3 ViewForward;
	float Pad0;
	uint2 RasterResolution;
	float2 Pad1;
};
#line 13 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 1 "HairStrands/HairStrandsDeepShadowCommonStruct.ush"
#line 5 "/Engine/Private/HairStrands/HairStrandsDeepShadowCommonStruct.ush"
struct FDeepShadowViewInfo
{
	float4x4 TranslatedWorldToClip;
	float3 ViewForward;
	float MinRadiusAtDepth1;
};

struct FDeepShadowTransform
{
	float4x4 TranslatedWorldToClip;
};
#line 14 "/Engine/Private/GeneratedUniformBufferTypes.ush"
#line 167 "/Engine/Private/Common.ush"
#line 169 "/Engine/Private/Common.ush"
#line 1 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"


cbuffer View
{
	float4x4 View_TranslatedWorldToClip;
	float4x4 View_RelativeWorldToClip;
	float4x4 View_ClipToRelativeWorld;
	float4x4 View_TranslatedWorldToView;
	float4x4 View_ViewToTranslatedWorld;
	float4x4 View_TranslatedWorldToCameraView;
	float4x4 View_CameraViewToTranslatedWorld;
	float4x4 View_ViewToClip;
	float4x4 View_ViewToClipNoAA;
	float4x4 View_ClipToView;
	float4x4 View_ClipToTranslatedWorld;
	float4x4 View_SVPositionToTranslatedWorld;
	float4x4 View_ScreenToRelativeWorld;
	float4x4 View_ScreenToTranslatedWorld;
	float4x4 View_MobileMultiviewShadowTransform;
	float3 View_ViewTilePosition;
	float PrePadding_View_972;
	float3 View_MatrixTilePosition;
	float PrePadding_View_988;
	float3 View_ViewForward;
	float PrePadding_View_1004;
	float3 View_ViewUp;
	float PrePadding_View_1020;
	float3 View_ViewRight;
	float PrePadding_View_1036;
	float3 View_HMDViewNoRollUp;
	float PrePadding_View_1052;
	float3 View_HMDViewNoRollRight;
	float PrePadding_View_1068;
	float4 View_InvDeviceZToWorldZTransform;
	float4 View_ScreenPositionScaleBias;
	float3 View_RelativeWorldCameraOrigin;
	float PrePadding_View_1116;
	float3 View_TranslatedWorldCameraOrigin;
	float PrePadding_View_1132;
	float3 View_RelativeWorldViewOrigin;
	float PrePadding_View_1148;
	float3 View_RelativePreViewTranslation;
	float PrePadding_View_1164;
	float4x4 View_PrevViewToClip;
	float4x4 View_PrevClipToView;
	float4x4 View_PrevTranslatedWorldToClip;
	float4x4 View_PrevTranslatedWorldToView;
	float4x4 View_PrevViewToTranslatedWorld;
	float4x4 View_PrevTranslatedWorldToCameraView;
	float4x4 View_PrevCameraViewToTranslatedWorld;
	float3 View_PrevTranslatedWorldCameraOrigin;
	float PrePadding_View_1628;
	float3 View_PrevRelativeWorldCameraOrigin;
	float PrePadding_View_1644;
	float3 View_PrevRelativeWorldViewOrigin;
	float PrePadding_View_1660;
	float3 View_RelativePrevPreViewTranslation;
	float PrePadding_View_1676;
	float4x4 View_PrevClipToRelativeWorld;
	float4x4 View_PrevScreenToTranslatedWorld;
	float4x4 View_ClipToPrevClip;
	float4x4 View_ClipToPrevClipWithAA;
	float4 View_TemporalAAJitter;
	float4 View_GlobalClippingPlane;
	float2 View_FieldOfViewWideAngles;
	float2 View_PrevFieldOfViewWideAngles;
	float4 View_ViewRectMin;
	float4 View_ViewSizeAndInvSize;
	float4 View_LightProbeSizeRatioAndInvSizeRatio;
	float4 View_BufferSizeAndInvSize;
	float4 View_BufferBilinearUVMinMax;
	float4 View_ScreenToViewSpace;
	int View_NumSceneColorMSAASamples;
	float View_PreExposure;
	float View_OneOverPreExposure;
	float PrePadding_View_2092;
	float4 View_DiffuseOverrideParameter;
	float4 View_SpecularOverrideParameter;
	float4 View_NormalOverrideParameter;
	float2 View_RoughnessOverrideParameter;
	float View_PrevFrameGameTime;
	float View_PrevFrameRealTime;
	float View_OutOfBoundsMask;
	float PrePadding_View_2164;
	float PrePadding_View_2168;
	float PrePadding_View_2172;
	float3 View_WorldCameraMovementSinceLastFrame;
	float View_CullingSign;
	float View_NearPlane;
	float View_GameTime;
	float View_RealTime;
	float View_DeltaTime;
	float View_MaterialTextureMipBias;
	float View_MaterialTextureDerivativeMultiply;
	uint View_Random;
	uint View_FrameNumber;
	uint View_StateFrameIndexMod8;
	uint View_StateFrameIndex;
	uint View_DebugViewModeMask;
	float View_CameraCut;
	float View_UnlitViewmodeMask;
	float PrePadding_View_2244;
	float PrePadding_View_2248;
	float PrePadding_View_2252;
	float4 View_DirectionalLightColor;
	float3 View_DirectionalLightDirection;
	float PrePadding_View_2284;
	float4 View_TranslucencyLightingVolumeMin[2];
	float4 View_TranslucencyLightingVolumeInvSize[2];
	float4 View_TemporalAAParams;
	float4 View_CircleDOFParams;
	uint View_ForceDrawAllVelocities;
	float View_DepthOfFieldSensorWidth;
	float View_DepthOfFieldFocalDistance;
	float View_DepthOfFieldScale;
	float View_DepthOfFieldFocalLength;
	float View_DepthOfFieldFocalRegion;
	float View_DepthOfFieldNearTransitionRegion;
	float View_DepthOfFieldFarTransitionRegion;
	float View_MotionBlurNormalizedToPixel;
	float View_GeneralPurposeTweak;
	float View_GeneralPurposeTweak2;
	float View_DemosaicVposOffset;
	float View_DecalDepthBias;
	float PrePadding_View_2436;
	float PrePadding_View_2440;
	float PrePadding_View_2444;
	float3 View_IndirectLightingColorScale;
	float PrePadding_View_2460;
	float3 View_PrecomputedIndirectLightingColorScale;
	float PrePadding_View_2476;
	float3 View_PrecomputedIndirectSpecularColorScale;
	float PrePadding_View_2492;
	float4 View_AtmosphereLightDirection[2];
	float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 View_AtmosphereLightIlluminanceOuterSpace[2];
	float4 View_AtmosphereLightDiscLuminance[2];
	float4 View_AtmosphereLightDiscCosHalfApexAngle[2];
	float4 View_SkyViewLutSizeAndInvSize;
	float3 View_SkyCameraTranslatedWorldOrigin;
	float PrePadding_View_2684;
	float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 View_SkyViewLutReferential;
	float4 View_SkyAtmosphereSkyLuminanceFactor;
	float View_SkyAtmospherePresentInScene;
	float View_SkyAtmosphereHeightFogContribution;
	float View_SkyAtmosphereBottomRadiusKm;
	float View_SkyAtmosphereTopRadiusKm;
	float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float PrePadding_View_2840;
	float PrePadding_View_2844;
	float3 View_NormalCurvatureToRoughnessScaleBias;
	float View_RenderingReflectionCaptureMask;
	float View_RealTimeReflectionCapture;
	float View_RealTimeReflectionCapturePreExposure;
	float PrePadding_View_2872;
	float PrePadding_View_2876;
	float4 View_AmbientCubemapTint;
	float View_AmbientCubemapIntensity;
	float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float View_SkyLightAffectReflectionFlag;
	float View_SkyLightAffectGlobalIlluminationFlag;
	float4 View_SkyLightColor;
	float4 View_MobileSkyIrradianceEnvironmentMap[7];
	float View_MobilePreviewMode;
	float View_HMDEyePaddingOffset;
	float View_ReflectionCubemapMaxMip;
	float View_ShowDecalsMask;
	uint View_DistanceFieldAOSpecularOcclusionMode;
	float View_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_View_3064;
	float PrePadding_View_3068;
	float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int View_StereoPassIndex;
	float4 View_GlobalVolumeCenterAndExtent[6];
	float4 View_GlobalVolumeWorldToUVAddAndMul[6];
	float4 View_GlobalDistanceFieldMipWorldToUVScale[6];
	float4 View_GlobalDistanceFieldMipWorldToUVBias[6];
	float View_GlobalDistanceFieldMipFactor;
	float View_GlobalDistanceFieldMipTransition;
	int View_GlobalDistanceFieldClipmapSizeInPages;
	int PrePadding_View_3484;
	float3 View_GlobalDistanceFieldInvPageAtlasSize;
	float PrePadding_View_3500;
	float3 View_GlobalDistanceFieldInvCoverageAtlasSize;
	float View_GlobalVolumeDimension;
	float View_GlobalVolumeTexelSize;
	float View_MaxGlobalDFAOConeDistance;
	uint View_NumGlobalSDFClipmaps;
	float View_FullyCoveredExpandSurfaceScale;
	float View_UncoveredExpandSurfaceScale;
	float View_UncoveredMinStepScale;
	int2 View_CursorPosition;
	float View_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_View_3556;
	float PrePadding_View_3560;
	float PrePadding_View_3564;
	float3 View_VolumetricFogInvGridSize;
	float PrePadding_View_3580;
	float3 View_VolumetricFogGridZParams;
	float PrePadding_View_3596;
	float2 View_VolumetricFogSVPosToVolumeUV;
	float View_VolumetricFogMaxDistance;
	float PrePadding_View_3612;
	float3 View_VolumetricLightmapWorldToUVScale;
	float PrePadding_View_3628;
	float3 View_VolumetricLightmapWorldToUVAdd;
	float PrePadding_View_3644;
	float3 View_VolumetricLightmapIndirectionTextureSize;
	float View_VolumetricLightmapBrickSize;
	float3 View_VolumetricLightmapBrickTexelSize;
	float View_StereoIPD;
	float View_IndirectLightingCacheShowFlag;
	float View_EyeToPixelSpreadAngle;
	float PrePadding_View_3688;
	float PrePadding_View_3692;
	float4 View_XRPassthroughCameraUVs[2];
	float View_GlobalVirtualTextureMipBias;
	uint View_VirtualTextureFeedbackShift;
	uint View_VirtualTextureFeedbackMask;
	uint View_VirtualTextureFeedbackStride;
	uint View_VirtualTextureFeedbackJitterOffset;
	uint View_VirtualTextureFeedbackSampleOffset;
	uint PrePadding_View_3752;
	uint PrePadding_View_3756;
	float4 View_RuntimeVirtualTextureMipLevel;
	float2 View_RuntimeVirtualTexturePackHeight;
	float PrePadding_View_3784;
	float PrePadding_View_3788;
	float4 View_RuntimeVirtualTextureDebugParams;
	float View_OverrideLandscapeLOD;
	int View_FarShadowStaticMeshLODBias;
	float View_MinRoughness;
	float PrePadding_View_3820;
	float4 View_HairRenderInfo;
	uint View_EnableSkyLight;
	uint View_HairRenderInfoBits;
	uint View_HairComponents;
	float View_bSubsurfacePostprocessEnabled;
	float4 View_SSProfilesTextureSizeAndInvSize;
	float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 View_PhysicsFieldClipmapCenter;
	float View_PhysicsFieldClipmapDistance;
	int View_PhysicsFieldClipmapResolution;
	int View_PhysicsFieldClipmapExponent;
	int View_PhysicsFieldClipmapCount;
	int View_PhysicsFieldTargetCount;
	int4 View_PhysicsFieldTargets[32];
	uint View_InstanceSceneDataSOAStride;
	uint View_GPUSceneViewId;
	uint PrePadding_View_4440;
	uint PrePadding_View_4444;
	uint PrePadding_View_4448;
	uint PrePadding_View_4452;
	uint PrePadding_View_4456;
	uint PrePadding_View_4460;
	uint PrePadding_View_4464;
	uint PrePadding_View_4468;
	uint PrePadding_View_4472;
	uint PrePadding_View_4476;
	uint PrePadding_View_4480;
	uint PrePadding_View_4484;
	uint PrePadding_View_4488;
	uint PrePadding_View_4492;
	uint PrePadding_View_4496;
	uint PrePadding_View_4500;
	uint PrePadding_View_4504;
	uint PrePadding_View_4508;
	uint PrePadding_View_4512;
	uint PrePadding_View_4516;
	uint PrePadding_View_4520;
	uint PrePadding_View_4524;
	uint PrePadding_View_4528;
	uint PrePadding_View_4532;
	uint PrePadding_View_4536;
	uint PrePadding_View_4540;
	uint PrePadding_View_4544;
	uint PrePadding_View_4548;
	uint PrePadding_View_4552;
	uint PrePadding_View_4556;
	uint PrePadding_View_4560;
	uint PrePadding_View_4564;
	uint PrePadding_View_4568;
	uint PrePadding_View_4572;
	uint PrePadding_View_4576;
	uint PrePadding_View_4580;
	uint PrePadding_View_4584;
	uint PrePadding_View_4588;
	uint PrePadding_View_4592;
	uint PrePadding_View_4596;
	uint PrePadding_View_4600;
	uint PrePadding_View_4604;
	uint PrePadding_View_4608;
	uint PrePadding_View_4612;
	uint PrePadding_View_4616;
	uint PrePadding_View_4620;
	uint PrePadding_View_4624;
	uint PrePadding_View_4628;
	uint PrePadding_View_4632;
	uint PrePadding_View_4636;
	uint PrePadding_View_4640;
	uint PrePadding_View_4644;
	uint PrePadding_View_4648;
	uint PrePadding_View_4652;
	uint PrePadding_View_4656;
	uint PrePadding_View_4660;
	uint PrePadding_View_4664;
	uint PrePadding_View_4668;
	uint PrePadding_View_4672;
	uint PrePadding_View_4676;
	uint PrePadding_View_4680;
	uint PrePadding_View_4684;
	uint PrePadding_View_4688;
	uint PrePadding_View_4692;
	uint PrePadding_View_4696;
	uint PrePadding_View_4700;
	uint PrePadding_View_4704;
	uint PrePadding_View_4708;
	uint PrePadding_View_4712;
	uint PrePadding_View_4716;
	uint PrePadding_View_4720;
	uint PrePadding_View_4724;
	uint PrePadding_View_4728;
	uint PrePadding_View_4732;
	uint PrePadding_View_4736;
	uint PrePadding_View_4740;
	uint PrePadding_View_4744;
	uint PrePadding_View_4748;
	uint PrePadding_View_4752;
	uint PrePadding_View_4756;
	uint PrePadding_View_4760;
	uint PrePadding_View_4764;
	uint PrePadding_View_4768;
	uint PrePadding_View_4772;
	uint PrePadding_View_4776;
	uint PrePadding_View_4780;
	uint PrePadding_View_4784;
	uint PrePadding_View_4788;
	uint PrePadding_View_4792;
	uint PrePadding_View_4796;
	uint PrePadding_View_4800;
	uint PrePadding_View_4804;
	uint PrePadding_View_4808;
	uint PrePadding_View_4812;
	uint PrePadding_View_4816;
	uint PrePadding_View_4820;
	uint PrePadding_View_4824;
	uint PrePadding_View_4828;
	uint PrePadding_View_4832;
	uint PrePadding_View_4836;
	uint PrePadding_View_4840;
	uint PrePadding_View_4844;
	uint PrePadding_View_4848;
	uint PrePadding_View_4852;
	uint PrePadding_View_4856;
	uint PrePadding_View_4860;
	uint PrePadding_View_4864;
	uint PrePadding_View_4868;
	uint PrePadding_View_4872;
	uint PrePadding_View_4876;
	uint PrePadding_View_4880;
	uint PrePadding_View_4884;
	uint PrePadding_View_4888;
	uint PrePadding_View_4892;
	uint PrePadding_View_4896;
	uint PrePadding_View_4900;
	uint PrePadding_View_4904;
	uint PrePadding_View_4908;
	uint PrePadding_View_4912;
	uint PrePadding_View_4916;
	uint PrePadding_View_4920;
	uint PrePadding_View_4924;
	uint PrePadding_View_4928;
	uint PrePadding_View_4932;
	uint PrePadding_View_4936;
	uint PrePadding_View_4940;
	uint PrePadding_View_4944;
	uint PrePadding_View_4948;
	uint View_bShadingEnergyConservation;
	uint View_bShadingEnergyPreservation;
}
SamplerState View_MaterialTextureBilinearWrapedSampler;
SamplerState View_MaterialTextureBilinearClampedSampler;
Texture3D<uint4> View_VolumetricLightmapIndirectionTexture;
Texture3D View_VolumetricLightmapBrickAmbientVector;
Texture3D View_VolumetricLightmapBrickSHCoefficients0;
Texture3D View_VolumetricLightmapBrickSHCoefficients1;
Texture3D View_VolumetricLightmapBrickSHCoefficients2;
Texture3D View_VolumetricLightmapBrickSHCoefficients3;
Texture3D View_VolumetricLightmapBrickSHCoefficients4;
Texture3D View_VolumetricLightmapBrickSHCoefficients5;
Texture3D View_SkyBentNormalBrickTexture;
Texture3D View_DirectionalLightShadowingBrickTexture;
SamplerState View_VolumetricLightmapBrickAmbientVectorSampler;
SamplerState View_VolumetricLightmapTextureSampler0;
SamplerState View_VolumetricLightmapTextureSampler1;
SamplerState View_VolumetricLightmapTextureSampler2;
SamplerState View_VolumetricLightmapTextureSampler3;
SamplerState View_VolumetricLightmapTextureSampler4;
SamplerState View_VolumetricLightmapTextureSampler5;
SamplerState View_SkyBentNormalTextureSampler;
SamplerState View_DirectionalLightShadowingTextureSampler;
Texture3D View_GlobalDistanceFieldPageAtlasTexture;
Texture3D View_GlobalDistanceFieldCoverageAtlasTexture;
Texture3D<uint> View_GlobalDistanceFieldPageTableTexture;
Texture3D View_GlobalDistanceFieldMipTexture;
Texture2D View_AtmosphereTransmittanceTexture;
SamplerState View_AtmosphereTransmittanceTextureSampler;
Texture2D View_AtmosphereIrradianceTexture;
SamplerState View_AtmosphereIrradianceTextureSampler;
Texture3D View_AtmosphereInscatterTexture;
SamplerState View_AtmosphereInscatterTextureSampler;
Texture2D View_PerlinNoiseGradientTexture;
SamplerState View_PerlinNoiseGradientTextureSampler;
Texture3D View_PerlinNoise3DTexture;
SamplerState View_PerlinNoise3DTextureSampler;
Texture2D<uint> View_SobolSamplingTexture;
SamplerState View_SharedPointWrappedSampler;
SamplerState View_SharedPointClampedSampler;
SamplerState View_SharedBilinearWrappedSampler;
SamplerState View_SharedBilinearClampedSampler;
SamplerState View_SharedBilinearAnisoClampedSampler;
SamplerState View_SharedTrilinearWrappedSampler;
SamplerState View_SharedTrilinearClampedSampler;
Texture2D View_PreIntegratedBRDF;
SamplerState View_PreIntegratedBRDFSampler;
StructuredBuffer<float4> View_PrimitiveSceneData;
StructuredBuffer<float4> View_InstanceSceneData;
StructuredBuffer<float4> View_InstancePayloadData;
StructuredBuffer<float4> View_LightmapSceneData;
StructuredBuffer<float4> View_SkyIrradianceEnvironmentMap;
Texture2D View_TransmittanceLutTexture;
SamplerState View_TransmittanceLutTextureSampler;
Texture2D View_SkyViewLutTexture;
SamplerState View_SkyViewLutTextureSampler;
Texture2D View_DistantSkyLightLutTexture;
SamplerState View_DistantSkyLightLutTextureSampler;
Texture3D View_CameraAerialPerspectiveVolume;
SamplerState View_CameraAerialPerspectiveVolumeSampler;
Texture3D View_HairScatteringLUTTexture;
SamplerState View_HairScatteringLUTSampler;
Texture2D View_LTCMatTexture;
SamplerState View_LTCMatSampler;
Texture2D View_LTCAmpTexture;
SamplerState View_LTCAmpSampler;
Texture2D<float2> View_ShadingEnergyGGXSpecTexture;
Texture3D<float2> View_ShadingEnergyGGXGlassTexture;
Texture2D<float2> View_ShadingEnergyClothSpecTexture;
Texture2D<float> View_ShadingEnergyDiffuseTexture;
SamplerState View_ShadingEnergySampler;
Texture2D View_SSProfilesTexture;
SamplerState View_SSProfilesSampler;
SamplerState View_SSProfilesTransmissionSampler;
Texture2DArray View_SSProfilesPreIntegratedTexture;
SamplerState View_SSProfilesPreIntegratedSampler;
Buffer<float4> View_WaterIndirection;
Buffer<float4> View_WaterData;
Buffer<uint> View_LandscapeIndirection;
Buffer<float> View_LandscapePerComponentData;
RWBuffer<uint> View_VTFeedbackBuffer;
Buffer<uint> View_EditorVisualizeLevelInstanceIds;
Buffer<uint> View_EditorSelectedHitProxyIds;
Buffer<float> View_PhysicsFieldClipmapBuffer;
/*atic const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	uint ForceDrawAllVelocities;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float FullyCoveredExpandSurfaceScale;
	float UncoveredExpandSurfaceScale;
	float UncoveredMinStepScale;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	uint bShadingEnergyConservation;
	uint bShadingEnergyPreservation;
	SamplerState MaterialTextureBilinearWrapedSampler;
	SamplerState MaterialTextureBilinearClampedSampler;
	Texture3D<uint4> VolumetricLightmapIndirectionTexture;
	Texture3D VolumetricLightmapBrickAmbientVector;
	Texture3D VolumetricLightmapBrickSHCoefficients0;
	Texture3D VolumetricLightmapBrickSHCoefficients1;
	Texture3D VolumetricLightmapBrickSHCoefficients2;
	Texture3D VolumetricLightmapBrickSHCoefficients3;
	Texture3D VolumetricLightmapBrickSHCoefficients4;
	Texture3D VolumetricLightmapBrickSHCoefficients5;
	Texture3D SkyBentNormalBrickTexture;
	Texture3D DirectionalLightShadowingBrickTexture;
	SamplerState VolumetricLightmapBrickAmbientVectorSampler;
	SamplerState VolumetricLightmapTextureSampler0;
	SamplerState VolumetricLightmapTextureSampler1;
	SamplerState VolumetricLightmapTextureSampler2;
	SamplerState VolumetricLightmapTextureSampler3;
	SamplerState VolumetricLightmapTextureSampler4;
	SamplerState VolumetricLightmapTextureSampler5;
	SamplerState SkyBentNormalTextureSampler;
	SamplerState DirectionalLightShadowingTextureSampler;
	Texture3D GlobalDistanceFieldPageAtlasTexture;
	Texture3D GlobalDistanceFieldCoverageAtlasTexture;
	Texture3D<uint> GlobalDistanceFieldPageTableTexture;
	Texture3D GlobalDistanceFieldMipTexture;
	Texture2D AtmosphereTransmittanceTexture;
	SamplerState AtmosphereTransmittanceTextureSampler;
	Texture2D AtmosphereIrradianceTexture;
	SamplerState AtmosphereIrradianceTextureSampler;
	Texture3D AtmosphereInscatterTexture;
	SamplerState AtmosphereInscatterTextureSampler;
	Texture2D PerlinNoiseGradientTexture;
	SamplerState PerlinNoiseGradientTextureSampler;
	Texture3D PerlinNoise3DTexture;
	SamplerState PerlinNoise3DTextureSampler;
	Texture2D<uint> SobolSamplingTexture;
	SamplerState SharedPointWrappedSampler;
	SamplerState SharedPointClampedSampler;
	SamplerState SharedBilinearWrappedSampler;
	SamplerState SharedBilinearClampedSampler;
	SamplerState SharedBilinearAnisoClampedSampler;
	SamplerState SharedTrilinearWrappedSampler;
	SamplerState SharedTrilinearClampedSampler;
	Texture2D PreIntegratedBRDF;
	SamplerState PreIntegratedBRDFSampler;
	StructuredBuffer<float4> PrimitiveSceneData;
	StructuredBuffer<float4> InstanceSceneData;
	StructuredBuffer<float4> InstancePayloadData;
	StructuredBuffer<float4> LightmapSceneData;
	StructuredBuffer<float4> SkyIrradianceEnvironmentMap;
	Texture2D TransmittanceLutTexture;
	SamplerState TransmittanceLutTextureSampler;
	Texture2D SkyViewLutTexture;
	SamplerState SkyViewLutTextureSampler;
	Texture2D DistantSkyLightLutTexture;
	SamplerState DistantSkyLightLutTextureSampler;
	Texture3D CameraAerialPerspectiveVolume;
	SamplerState CameraAerialPerspectiveVolumeSampler;
	Texture3D HairScatteringLUTTexture;
	SamplerState HairScatteringLUTSampler;
	Texture2D LTCMatTexture;
	SamplerState LTCMatSampler;
	Texture2D LTCAmpTexture;
	SamplerState LTCAmpSampler;
	Texture2D<float2> ShadingEnergyGGXSpecTexture;
	Texture3D<float2> ShadingEnergyGGXGlassTexture;
	Texture2D<float2> ShadingEnergyClothSpecTexture;
	Texture2D<float> ShadingEnergyDiffuseTexture;
	SamplerState ShadingEnergySampler;
	Texture2D SSProfilesTexture;
	SamplerState SSProfilesSampler;
	SamplerState SSProfilesTransmissionSampler;
	Texture2DArray SSProfilesPreIntegratedTexture;
	SamplerState SSProfilesPreIntegratedSampler;
	Buffer<float4> WaterIndirection;
	Buffer<float4> WaterData;
	Buffer<uint> LandscapeIndirection;
	Buffer<float> LandscapePerComponentData;
	RWBuffer<uint> VTFeedbackBuffer;
	Buffer<uint> EditorVisualizeLevelInstanceIds;
	Buffer<uint> EditorSelectedHitProxyIds;
	Buffer<float> PhysicsFieldClipmapBuffer;
} View = {View_TranslatedWorldToClip,View_RelativeWorldToClip,View_ClipToRelativeWorld,View_TranslatedWorldToView,View_ViewToTranslatedWorld,View_TranslatedWorldToCameraView,View_CameraViewToTranslatedWorld,View_ViewToClip,View_ViewToClipNoAA,View_ClipToView,View_ClipToTranslatedWorld,View_SVPositionToTranslatedWorld,View_ScreenToRelativeWorld,View_ScreenToTranslatedWorld,View_MobileMultiviewShadowTransform,View_ViewTilePosition,View_MatrixTilePosition,View_ViewForward,View_ViewUp,View_ViewRight,View_HMDViewNoRollUp,View_HMDViewNoRollRight,View_InvDeviceZToWorldZTransform,View_ScreenPositionScaleBias,View_RelativeWorldCameraOrigin,View_TranslatedWorldCameraOrigin,View_RelativeWorldViewOrigin,View_RelativePreViewTranslation,View_PrevViewToClip,View_PrevClipToView,View_PrevTranslatedWorldToClip,View_PrevTranslatedWorldToView,View_PrevViewToTranslatedWorld,View_PrevTranslatedWorldToCameraView,View_PrevCameraViewToTranslatedWorld,View_PrevTranslatedWorldCameraOrigin,View_PrevRelativeWorldCameraOrigin,View_PrevRelativeWorldViewOrigin,View_RelativePrevPreViewTranslation,View_PrevClipToRelativeWorld,View_PrevScreenToTranslatedWorld,View_ClipToPrevClip,View_ClipToPrevClipWithAA,View_TemporalAAJitter,View_GlobalClippingPlane,View_FieldOfViewWideAngles,View_PrevFieldOfViewWideAngles,View_ViewRectMin,View_ViewSizeAndInvSize,View_LightProbeSizeRatioAndInvSizeRatio,View_BufferSizeAndInvSize,View_BufferBilinearUVMinMax,View_ScreenToViewSpace,View_NumSceneColorMSAASamples,View_PreExposure,View_OneOverPreExposure,View_DiffuseOverrideParameter,View_SpecularOverrideParameter,View_NormalOverrideParameter,View_RoughnessOverrideParameter,View_PrevFrameGameTime,View_PrevFrameRealTime,View_OutOfBoundsMask,View_WorldCameraMovementSinceLastFrame,View_CullingSign,View_NearPlane,View_GameTime,View_RealTime,View_DeltaTime,View_MaterialTextureMipBias,View_MaterialTextureDerivativeMultiply,View_Random,View_FrameNumber,View_StateFrameIndexMod8,View_StateFrameIndex,View_DebugViewModeMask,View_CameraCut,View_UnlitViewmodeMask,View_DirectionalLightColor,View_DirectionalLightDirection,View_TranslucencyLightingVolumeMin,View_TranslucencyLightingVolumeInvSize,View_TemporalAAParams,View_CircleDOFParams,View_ForceDrawAllVelocities,View_DepthOfFieldSensorWidth,View_DepthOfFieldFocalDistance,View_DepthOfFieldScale,View_DepthOfFieldFocalLength,View_DepthOfFieldFocalRegion,View_DepthOfFieldNearTransitionRegion,View_DepthOfFieldFarTransitionRegion,View_MotionBlurNormalizedToPixel,View_GeneralPurposeTweak,View_GeneralPurposeTweak2,View_DemosaicVposOffset,View_DecalDepthBias,View_IndirectLightingColorScale,View_PrecomputedIndirectLightingColorScale,View_PrecomputedIndirectSpecularColorScale,View_AtmosphereLightDirection,View_AtmosphereLightIlluminanceOnGroundPostTransmittance,View_AtmosphereLightIlluminanceOuterSpace,View_AtmosphereLightDiscLuminance,View_AtmosphereLightDiscCosHalfApexAngle,View_SkyViewLutSizeAndInvSize,View_SkyCameraTranslatedWorldOrigin,View_SkyPlanetTranslatedWorldCenterAndViewHeight,View_SkyViewLutReferential,View_SkyAtmosphereSkyLuminanceFactor,View_SkyAtmospherePresentInScene,View_SkyAtmosphereHeightFogContribution,View_SkyAtmosphereBottomRadiusKm,View_SkyAtmosphereTopRadiusKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,View_SkyAtmosphereAerialPerspectiveStartDepthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,View_SkyAtmosphereApplyCameraAerialPerspectiveVolume,View_NormalCurvatureToRoughnessScaleBias,View_RenderingReflectionCaptureMask,View_RealTimeReflectionCapture,View_RealTimeReflectionCapturePreExposure,View_AmbientCubemapTint,View_AmbientCubemapIntensity,View_SkyLightApplyPrecomputedBentNormalShadowingFlag,View_SkyLightAffectReflectionFlag,View_SkyLightAffectGlobalIlluminationFlag,View_SkyLightColor,View_MobileSkyIrradianceEnvironmentMap,View_MobilePreviewMode,View_HMDEyePaddingOffset,View_ReflectionCubemapMaxMip,View_ShowDecalsMask,View_DistanceFieldAOSpecularOcclusionMode,View_IndirectCapsuleSelfShadowingIntensity,View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,View_StereoPassIndex,View_GlobalVolumeCenterAndExtent,View_GlobalVolumeWorldToUVAddAndMul,View_GlobalDistanceFieldMipWorldToUVScale,View_GlobalDistanceFieldMipWorldToUVBias,View_GlobalDistanceFieldMipFactor,View_GlobalDistanceFieldMipTransition,View_GlobalDistanceFieldClipmapSizeInPages,View_GlobalDistanceFieldInvPageAtlasSize,View_GlobalDistanceFieldInvCoverageAtlasSize,View_GlobalVolumeDimension,View_GlobalVolumeTexelSize,View_MaxGlobalDFAOConeDistance,View_NumGlobalSDFClipmaps,View_FullyCoveredExpandSurfaceScale,View_UncoveredExpandSurfaceScale,View_UncoveredMinStepScale,View_CursorPosition,View_bCheckerboardSubsurfaceProfileRendering,View_VolumetricFogInvGridSize,View_VolumetricFogGridZParams,View_VolumetricFogSVPosToVolumeUV,View_VolumetricFogMaxDistance,View_VolumetricLightmapWorldToUVScale,View_VolumetricLightmapWorldToUVAdd,View_VolumetricLightmapIndirectionTextureSize,View_VolumetricLightmapBrickSize,View_VolumetricLightmapBrickTexelSize,View_StereoIPD,View_IndirectLightingCacheShowFlag,View_EyeToPixelSpreadAngle,View_XRPassthroughCameraUVs,View_GlobalVirtualTextureMipBias,View_VirtualTextureFeedbackShift,View_VirtualTextureFeedbackMask,View_VirtualTextureFeedbackStride,View_VirtualTextureFeedbackJitterOffset,View_VirtualTextureFeedbackSampleOffset,View_RuntimeVirtualTextureMipLevel,View_RuntimeVirtualTexturePackHeight,View_RuntimeVirtualTextureDebugParams,View_OverrideLandscapeLOD,View_FarShadowStaticMeshLODBias,View_MinRoughness,View_HairRenderInfo,View_EnableSkyLight,View_HairRenderInfoBits,View_HairComponents,View_bSubsurfacePostprocessEnabled,View_SSProfilesTextureSizeAndInvSize,View_SSProfilesPreIntegratedTextureSizeAndInvSize,View_PhysicsFieldClipmapCenter,View_PhysicsFieldClipmapDistance,View_PhysicsFieldClipmapResolution,View_PhysicsFieldClipmapExponent,View_PhysicsFieldClipmapCount,View_PhysicsFieldTargetCount,View_PhysicsFieldTargets,View_InstanceSceneDataSOAStride,View_GPUSceneViewId,View_bShadingEnergyConservation,View_bShadingEnergyPreservation,View_MaterialTextureBilinearWrapedSampler,View_MaterialTextureBilinearClampedSampler,View_VolumetricLightmapIndirectionTexture,View_VolumetricLightmapBrickAmbientVector,View_VolumetricLightmapBrickSHCoefficients0,View_VolumetricLightmapBrickSHCoefficients1,View_VolumetricLightmapBrickSHCoefficients2,View_VolumetricLightmapBrickSHCoefficients3,View_VolumetricLightmapBrickSHCoefficients4,View_VolumetricLightmapBrickSHCoefficients5,View_SkyBentNormalBrickTexture,View_DirectionalLightShadowingBrickTexture,View_VolumetricLightmapBrickAmbientVectorSampler,View_VolumetricLightmapTextureSampler0,View_VolumetricLightmapTextureSampler1,View_VolumetricLightmapTextureSampler2,View_VolumetricLightmapTextureSampler3,View_VolumetricLightmapTextureSampler4,View_VolumetricLightmapTextureSampler5,View_SkyBentNormalTextureSampler,View_DirectionalLightShadowingTextureSampler,View_GlobalDistanceFieldPageAtlasTexture,View_GlobalDistanceFieldCoverageAtlasTexture,View_GlobalDistanceFieldPageTableTexture,View_GlobalDistanceFieldMipTexture,View_AtmosphereTransmittanceTexture,View_AtmosphereTransmittanceTextureSampler,View_AtmosphereIrradianceTexture,View_AtmosphereIrradianceTextureSampler,View_AtmosphereInscatterTexture,View_AtmosphereInscatterTextureSampler,View_PerlinNoiseGradientTexture,View_PerlinNoiseGradientTextureSampler,View_PerlinNoise3DTexture,View_PerlinNoise3DTextureSampler,View_SobolSamplingTexture,View_SharedPointWrappedSampler,View_SharedPointClampedSampler,View_SharedBilinearWrappedSampler,View_SharedBilinearClampedSampler,View_SharedBilinearAnisoClampedSampler,View_SharedTrilinearWrappedSampler,View_SharedTrilinearClampedSampler,View_PreIntegratedBRDF,View_PreIntegratedBRDFSampler,  View_PrimitiveSceneData,   View_InstanceSceneData,   View_InstancePayloadData,   View_LightmapSceneData,   View_SkyIrradianceEnvironmentMap,  View_TransmittanceLutTexture,View_TransmittanceLutTextureSampler,View_SkyViewLutTexture,View_SkyViewLutTextureSampler,View_DistantSkyLightLutTexture,View_DistantSkyLightLutTextureSampler,View_CameraAerialPerspectiveVolume,View_CameraAerialPerspectiveVolumeSampler,View_HairScatteringLUTTexture,View_HairScatteringLUTSampler,View_LTCMatTexture,View_LTCMatSampler,View_LTCAmpTexture,View_LTCAmpSampler,View_ShadingEnergyGGXSpecTexture,View_ShadingEnergyGGXGlassTexture,View_ShadingEnergyClothSpecTexture,View_ShadingEnergyDiffuseTexture,View_ShadingEnergySampler,View_SSProfilesTexture,View_SSProfilesSampler,View_SSProfilesTransmissionSampler,View_SSProfilesPreIntegratedTexture,View_SSProfilesPreIntegratedSampler,  View_WaterIndirection,   View_WaterData,   View_LandscapeIndirection,   View_LandscapePerComponentData,  View_VTFeedbackBuffer,  View_EditorVisualizeLevelInstanceIds,   View_EditorSelectedHitProxyIds,   View_PhysicsFieldClipmapBuffer,  */
#line 2 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Strata.ush"


cbuffer Strata
{
	uint Strata_MaxBytesPerPixel;
	uint Strata_bRoughDiffuse;
}
Texture2DArray<uint> Strata_MaterialTextureArray;
Texture2D<uint> Strata_TopLayerTexture;
Texture2D<uint2> Strata_SSSTexture;
/*atic const struct
{
	uint MaxBytesPerPixel;
	uint bRoughDiffuse;
	Texture2DArray<uint> MaterialTextureArray;
	Texture2D<uint> TopLayerTexture;
	Texture2D<uint2> SSSTexture;
} Strata = {Strata_MaxBytesPerPixel,Strata_bRoughDiffuse,Strata_MaterialTextureArray,Strata_TopLayerTexture,Strata_SSSTexture,*/
#line 3 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"


cbuffer DrawRectangleParameters
{
	float4 DrawRectangleParameters_PosScaleBias;
	float4 DrawRectangleParameters_UVScaleBias;
	float4 DrawRectangleParameters_InvTargetSizeAndTextureSize;
}
/*atic const struct
{
	float4 PosScaleBias;
	float4 UVScaleBias;
	float4 InvTargetSizeAndTextureSize;
} DrawRectangleParameters = {DrawRectangleParameters_PosScaleBias,DrawRectangleParameters_UVScaleBias,DrawRectangleParameters_InvTargetSizeAndTextureSize,*/
#line 4 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"


cbuffer InstancedView
{
	float4x4 InstancedView_TranslatedWorldToClip;
	float4x4 InstancedView_RelativeWorldToClip;
	float4x4 InstancedView_ClipToRelativeWorld;
	float4x4 InstancedView_TranslatedWorldToView;
	float4x4 InstancedView_ViewToTranslatedWorld;
	float4x4 InstancedView_TranslatedWorldToCameraView;
	float4x4 InstancedView_CameraViewToTranslatedWorld;
	float4x4 InstancedView_ViewToClip;
	float4x4 InstancedView_ViewToClipNoAA;
	float4x4 InstancedView_ClipToView;
	float4x4 InstancedView_ClipToTranslatedWorld;
	float4x4 InstancedView_SVPositionToTranslatedWorld;
	float4x4 InstancedView_ScreenToRelativeWorld;
	float4x4 InstancedView_ScreenToTranslatedWorld;
	float4x4 InstancedView_MobileMultiviewShadowTransform;
	float3 InstancedView_ViewTilePosition;
	float PrePadding_InstancedView_972;
	float3 InstancedView_MatrixTilePosition;
	float PrePadding_InstancedView_988;
	float3 InstancedView_ViewForward;
	float PrePadding_InstancedView_1004;
	float3 InstancedView_ViewUp;
	float PrePadding_InstancedView_1020;
	float3 InstancedView_ViewRight;
	float PrePadding_InstancedView_1036;
	float3 InstancedView_HMDViewNoRollUp;
	float PrePadding_InstancedView_1052;
	float3 InstancedView_HMDViewNoRollRight;
	float PrePadding_InstancedView_1068;
	float4 InstancedView_InvDeviceZToWorldZTransform;
	float4 InstancedView_ScreenPositionScaleBias;
	float3 InstancedView_RelativeWorldCameraOrigin;
	float PrePadding_InstancedView_1116;
	float3 InstancedView_TranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1132;
	float3 InstancedView_RelativeWorldViewOrigin;
	float PrePadding_InstancedView_1148;
	float3 InstancedView_RelativePreViewTranslation;
	float PrePadding_InstancedView_1164;
	float4x4 InstancedView_PrevViewToClip;
	float4x4 InstancedView_PrevClipToView;
	float4x4 InstancedView_PrevTranslatedWorldToClip;
	float4x4 InstancedView_PrevTranslatedWorldToView;
	float4x4 InstancedView_PrevViewToTranslatedWorld;
	float4x4 InstancedView_PrevTranslatedWorldToCameraView;
	float4x4 InstancedView_PrevCameraViewToTranslatedWorld;
	float3 InstancedView_PrevTranslatedWorldCameraOrigin;
	float PrePadding_InstancedView_1628;
	float3 InstancedView_PrevRelativeWorldCameraOrigin;
	float PrePadding_InstancedView_1644;
	float3 InstancedView_PrevRelativeWorldViewOrigin;
	float PrePadding_InstancedView_1660;
	float3 InstancedView_RelativePrevPreViewTranslation;
	float PrePadding_InstancedView_1676;
	float4x4 InstancedView_PrevClipToRelativeWorld;
	float4x4 InstancedView_PrevScreenToTranslatedWorld;
	float4x4 InstancedView_ClipToPrevClip;
	float4x4 InstancedView_ClipToPrevClipWithAA;
	float4 InstancedView_TemporalAAJitter;
	float4 InstancedView_GlobalClippingPlane;
	float2 InstancedView_FieldOfViewWideAngles;
	float2 InstancedView_PrevFieldOfViewWideAngles;
	float4 InstancedView_ViewRectMin;
	float4 InstancedView_ViewSizeAndInvSize;
	float4 InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	float4 InstancedView_BufferSizeAndInvSize;
	float4 InstancedView_BufferBilinearUVMinMax;
	float4 InstancedView_ScreenToViewSpace;
	int InstancedView_NumSceneColorMSAASamples;
	float InstancedView_PreExposure;
	float InstancedView_OneOverPreExposure;
	float PrePadding_InstancedView_2092;
	float4 InstancedView_DiffuseOverrideParameter;
	float4 InstancedView_SpecularOverrideParameter;
	float4 InstancedView_NormalOverrideParameter;
	float2 InstancedView_RoughnessOverrideParameter;
	float InstancedView_PrevFrameGameTime;
	float InstancedView_PrevFrameRealTime;
	float InstancedView_OutOfBoundsMask;
	float PrePadding_InstancedView_2164;
	float PrePadding_InstancedView_2168;
	float PrePadding_InstancedView_2172;
	float3 InstancedView_WorldCameraMovementSinceLastFrame;
	float InstancedView_CullingSign;
	float InstancedView_NearPlane;
	float InstancedView_GameTime;
	float InstancedView_RealTime;
	float InstancedView_DeltaTime;
	float InstancedView_MaterialTextureMipBias;
	float InstancedView_MaterialTextureDerivativeMultiply;
	uint InstancedView_Random;
	uint InstancedView_FrameNumber;
	uint InstancedView_StateFrameIndexMod8;
	uint InstancedView_StateFrameIndex;
	uint InstancedView_DebugViewModeMask;
	float InstancedView_CameraCut;
	float InstancedView_UnlitViewmodeMask;
	float PrePadding_InstancedView_2244;
	float PrePadding_InstancedView_2248;
	float PrePadding_InstancedView_2252;
	float4 InstancedView_DirectionalLightColor;
	float3 InstancedView_DirectionalLightDirection;
	float PrePadding_InstancedView_2284;
	float4 InstancedView_TranslucencyLightingVolumeMin[2];
	float4 InstancedView_TranslucencyLightingVolumeInvSize[2];
	float4 InstancedView_TemporalAAParams;
	float4 InstancedView_CircleDOFParams;
	uint InstancedView_ForceDrawAllVelocities;
	float InstancedView_DepthOfFieldSensorWidth;
	float InstancedView_DepthOfFieldFocalDistance;
	float InstancedView_DepthOfFieldScale;
	float InstancedView_DepthOfFieldFocalLength;
	float InstancedView_DepthOfFieldFocalRegion;
	float InstancedView_DepthOfFieldNearTransitionRegion;
	float InstancedView_DepthOfFieldFarTransitionRegion;
	float InstancedView_MotionBlurNormalizedToPixel;
	float InstancedView_GeneralPurposeTweak;
	float InstancedView_GeneralPurposeTweak2;
	float InstancedView_DemosaicVposOffset;
	float InstancedView_DecalDepthBias;
	float PrePadding_InstancedView_2436;
	float PrePadding_InstancedView_2440;
	float PrePadding_InstancedView_2444;
	float3 InstancedView_IndirectLightingColorScale;
	float PrePadding_InstancedView_2460;
	float3 InstancedView_PrecomputedIndirectLightingColorScale;
	float PrePadding_InstancedView_2476;
	float3 InstancedView_PrecomputedIndirectSpecularColorScale;
	float PrePadding_InstancedView_2492;
	float4 InstancedView_AtmosphereLightDirection[2];
	float4 InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 InstancedView_AtmosphereLightIlluminanceOuterSpace[2];
	float4 InstancedView_AtmosphereLightDiscLuminance[2];
	float4 InstancedView_AtmosphereLightDiscCosHalfApexAngle[2];
	float4 InstancedView_SkyViewLutSizeAndInvSize;
	float3 InstancedView_SkyCameraTranslatedWorldOrigin;
	float PrePadding_InstancedView_2684;
	float4 InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 InstancedView_SkyViewLutReferential;
	float4 InstancedView_SkyAtmosphereSkyLuminanceFactor;
	float InstancedView_SkyAtmospherePresentInScene;
	float InstancedView_SkyAtmosphereHeightFogContribution;
	float InstancedView_SkyAtmosphereBottomRadiusKm;
	float InstancedView_SkyAtmosphereTopRadiusKm;
	float4 InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float PrePadding_InstancedView_2840;
	float PrePadding_InstancedView_2844;
	float3 InstancedView_NormalCurvatureToRoughnessScaleBias;
	float InstancedView_RenderingReflectionCaptureMask;
	float InstancedView_RealTimeReflectionCapture;
	float InstancedView_RealTimeReflectionCapturePreExposure;
	float PrePadding_InstancedView_2872;
	float PrePadding_InstancedView_2876;
	float4 InstancedView_AmbientCubemapTint;
	float InstancedView_AmbientCubemapIntensity;
	float InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float InstancedView_SkyLightAffectReflectionFlag;
	float InstancedView_SkyLightAffectGlobalIlluminationFlag;
	float4 InstancedView_SkyLightColor;
	float4 InstancedView_MobileSkyIrradianceEnvironmentMap[7];
	float InstancedView_MobilePreviewMode;
	float InstancedView_HMDEyePaddingOffset;
	float InstancedView_ReflectionCubemapMaxMip;
	float InstancedView_ShowDecalsMask;
	uint InstancedView_DistanceFieldAOSpecularOcclusionMode;
	float InstancedView_IndirectCapsuleSelfShadowingIntensity;
	float PrePadding_InstancedView_3064;
	float PrePadding_InstancedView_3068;
	float3 InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int InstancedView_StereoPassIndex;
	float4 InstancedView_GlobalVolumeCenterAndExtent[6];
	float4 InstancedView_GlobalVolumeWorldToUVAddAndMul[6];
	float4 InstancedView_GlobalDistanceFieldMipWorldToUVScale[6];
	float4 InstancedView_GlobalDistanceFieldMipWorldToUVBias[6];
	float InstancedView_GlobalDistanceFieldMipFactor;
	float InstancedView_GlobalDistanceFieldMipTransition;
	int InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	int PrePadding_InstancedView_3484;
	float3 InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	float PrePadding_InstancedView_3500;
	float3 InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	float InstancedView_GlobalVolumeDimension;
	float InstancedView_GlobalVolumeTexelSize;
	float InstancedView_MaxGlobalDFAOConeDistance;
	uint InstancedView_NumGlobalSDFClipmaps;
	float InstancedView_FullyCoveredExpandSurfaceScale;
	float InstancedView_UncoveredExpandSurfaceScale;
	float InstancedView_UncoveredMinStepScale;
	int2 InstancedView_CursorPosition;
	float InstancedView_bCheckerboardSubsurfaceProfileRendering;
	float PrePadding_InstancedView_3556;
	float PrePadding_InstancedView_3560;
	float PrePadding_InstancedView_3564;
	float3 InstancedView_VolumetricFogInvGridSize;
	float PrePadding_InstancedView_3580;
	float3 InstancedView_VolumetricFogGridZParams;
	float PrePadding_InstancedView_3596;
	float2 InstancedView_VolumetricFogSVPosToVolumeUV;
	float InstancedView_VolumetricFogMaxDistance;
	float PrePadding_InstancedView_3612;
	float3 InstancedView_VolumetricLightmapWorldToUVScale;
	float PrePadding_InstancedView_3628;
	float3 InstancedView_VolumetricLightmapWorldToUVAdd;
	float PrePadding_InstancedView_3644;
	float3 InstancedView_VolumetricLightmapIndirectionTextureSize;
	float InstancedView_VolumetricLightmapBrickSize;
	float3 InstancedView_VolumetricLightmapBrickTexelSize;
	float InstancedView_StereoIPD;
	float InstancedView_IndirectLightingCacheShowFlag;
	float InstancedView_EyeToPixelSpreadAngle;
	float PrePadding_InstancedView_3688;
	float PrePadding_InstancedView_3692;
	float4 InstancedView_XRPassthroughCameraUVs[2];
	float InstancedView_GlobalVirtualTextureMipBias;
	uint InstancedView_VirtualTextureFeedbackShift;
	uint InstancedView_VirtualTextureFeedbackMask;
	uint InstancedView_VirtualTextureFeedbackStride;
	uint InstancedView_VirtualTextureFeedbackJitterOffset;
	uint InstancedView_VirtualTextureFeedbackSampleOffset;
	uint PrePadding_InstancedView_3752;
	uint PrePadding_InstancedView_3756;
	float4 InstancedView_RuntimeVirtualTextureMipLevel;
	float2 InstancedView_RuntimeVirtualTexturePackHeight;
	float PrePadding_InstancedView_3784;
	float PrePadding_InstancedView_3788;
	float4 InstancedView_RuntimeVirtualTextureDebugParams;
	float InstancedView_OverrideLandscapeLOD;
	int InstancedView_FarShadowStaticMeshLODBias;
	float InstancedView_MinRoughness;
	float PrePadding_InstancedView_3820;
	float4 InstancedView_HairRenderInfo;
	uint InstancedView_EnableSkyLight;
	uint InstancedView_HairRenderInfoBits;
	uint InstancedView_HairComponents;
	float InstancedView_bSubsurfacePostprocessEnabled;
	float4 InstancedView_SSProfilesTextureSizeAndInvSize;
	float4 InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 InstancedView_PhysicsFieldClipmapCenter;
	float InstancedView_PhysicsFieldClipmapDistance;
	int InstancedView_PhysicsFieldClipmapResolution;
	int InstancedView_PhysicsFieldClipmapExponent;
	int InstancedView_PhysicsFieldClipmapCount;
	int InstancedView_PhysicsFieldTargetCount;
	int4 InstancedView_PhysicsFieldTargets[32];
	uint InstancedView_InstanceSceneDataSOAStride;
	uint InstancedView_GPUSceneViewId;
}
/*atic const struct
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	uint ForceDrawAllVelocities;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float FullyCoveredExpandSurfaceScale;
	float UncoveredExpandSurfaceScale;
	float UncoveredMinStepScale;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
} InstancedView = {InstancedView_TranslatedWorldToClip,InstancedView_RelativeWorldToClip,InstancedView_ClipToRelativeWorld,InstancedView_TranslatedWorldToView,InstancedView_ViewToTranslatedWorld,InstancedView_TranslatedWorldToCameraView,InstancedView_CameraViewToTranslatedWorld,InstancedView_ViewToClip,InstancedView_ViewToClipNoAA,InstancedView_ClipToView,InstancedView_ClipToTranslatedWorld,InstancedView_SVPositionToTranslatedWorld,InstancedView_ScreenToRelativeWorld,InstancedView_ScreenToTranslatedWorld,InstancedView_MobileMultiviewShadowTransform,InstancedView_ViewTilePosition,InstancedView_MatrixTilePosition,InstancedView_ViewForward,InstancedView_ViewUp,InstancedView_ViewRight,InstancedView_HMDViewNoRollUp,InstancedView_HMDViewNoRollRight,InstancedView_InvDeviceZToWorldZTransform,InstancedView_ScreenPositionScaleBias,InstancedView_RelativeWorldCameraOrigin,InstancedView_TranslatedWorldCameraOrigin,InstancedView_RelativeWorldViewOrigin,InstancedView_RelativePreViewTranslation,InstancedView_PrevViewToClip,InstancedView_PrevClipToView,InstancedView_PrevTranslatedWorldToClip,InstancedView_PrevTranslatedWorldToView,InstancedView_PrevViewToTranslatedWorld,InstancedView_PrevTranslatedWorldToCameraView,InstancedView_PrevCameraViewToTranslatedWorld,InstancedView_PrevTranslatedWorldCameraOrigin,InstancedView_PrevRelativeWorldCameraOrigin,InstancedView_PrevRelativeWorldViewOrigin,InstancedView_RelativePrevPreViewTranslation,InstancedView_PrevClipToRelativeWorld,InstancedView_PrevScreenToTranslatedWorld,InstancedView_ClipToPrevClip,InstancedView_ClipToPrevClipWithAA,InstancedView_TemporalAAJitter,InstancedView_GlobalClippingPlane,InstancedView_FieldOfViewWideAngles,InstancedView_PrevFieldOfViewWideAngles,InstancedView_ViewRectMin,InstancedView_ViewSizeAndInvSize,InstancedView_LightProbeSizeRatioAndInvSizeRatio,InstancedView_BufferSizeAndInvSize,InstancedView_BufferBilinearUVMinMax,InstancedView_ScreenToViewSpace,InstancedView_NumSceneColorMSAASamples,InstancedView_PreExposure,InstancedView_OneOverPreExposure,InstancedView_DiffuseOverrideParameter,InstancedView_SpecularOverrideParameter,InstancedView_NormalOverrideParameter,InstancedView_RoughnessOverrideParameter,InstancedView_PrevFrameGameTime,InstancedView_PrevFrameRealTime,InstancedView_OutOfBoundsMask,InstancedView_WorldCameraMovementSinceLastFrame,InstancedView_CullingSign,InstancedView_NearPlane,InstancedView_GameTime,InstancedView_RealTime,InstancedView_DeltaTime,InstancedView_MaterialTextureMipBias,InstancedView_MaterialTextureDerivativeMultiply,InstancedView_Random,InstancedView_FrameNumber,InstancedView_StateFrameIndexMod8,InstancedView_StateFrameIndex,InstancedView_DebugViewModeMask,InstancedView_CameraCut,InstancedView_UnlitViewmodeMask,InstancedView_DirectionalLightColor,InstancedView_DirectionalLightDirection,InstancedView_TranslucencyLightingVolumeMin,InstancedView_TranslucencyLightingVolumeInvSize,InstancedView_TemporalAAParams,InstancedView_CircleDOFParams,InstancedView_ForceDrawAllVelocities,InstancedView_DepthOfFieldSensorWidth,InstancedView_DepthOfFieldFocalDistance,InstancedView_DepthOfFieldScale,InstancedView_DepthOfFieldFocalLength,InstancedView_DepthOfFieldFocalRegion,InstancedView_DepthOfFieldNearTransitionRegion,InstancedView_DepthOfFieldFarTransitionRegion,InstancedView_MotionBlurNormalizedToPixel,InstancedView_GeneralPurposeTweak,InstancedView_GeneralPurposeTweak2,InstancedView_DemosaicVposOffset,InstancedView_DecalDepthBias,InstancedView_IndirectLightingColorScale,InstancedView_PrecomputedIndirectLightingColorScale,InstancedView_PrecomputedIndirectSpecularColorScale,InstancedView_AtmosphereLightDirection,InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance,InstancedView_AtmosphereLightIlluminanceOuterSpace,InstancedView_AtmosphereLightDiscLuminance,InstancedView_AtmosphereLightDiscCosHalfApexAngle,InstancedView_SkyViewLutSizeAndInvSize,InstancedView_SkyCameraTranslatedWorldOrigin,InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight,InstancedView_SkyViewLutReferential,InstancedView_SkyAtmosphereSkyLuminanceFactor,InstancedView_SkyAtmospherePresentInScene,InstancedView_SkyAtmosphereHeightFogContribution,InstancedView_SkyAtmosphereBottomRadiusKm,InstancedView_SkyAtmosphereTopRadiusKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize,InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm,InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv,InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume,InstancedView_NormalCurvatureToRoughnessScaleBias,InstancedView_RenderingReflectionCaptureMask,InstancedView_RealTimeReflectionCapture,InstancedView_RealTimeReflectionCapturePreExposure,InstancedView_AmbientCubemapTint,InstancedView_AmbientCubemapIntensity,InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag,InstancedView_SkyLightAffectReflectionFlag,InstancedView_SkyLightAffectGlobalIlluminationFlag,InstancedView_SkyLightColor,InstancedView_MobileSkyIrradianceEnvironmentMap,InstancedView_MobilePreviewMode,InstancedView_HMDEyePaddingOffset,InstancedView_ReflectionCubemapMaxMip,InstancedView_ShowDecalsMask,InstancedView_DistanceFieldAOSpecularOcclusionMode,InstancedView_IndirectCapsuleSelfShadowingIntensity,InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight,InstancedView_StereoPassIndex,InstancedView_GlobalVolumeCenterAndExtent,InstancedView_GlobalVolumeWorldToUVAddAndMul,InstancedView_GlobalDistanceFieldMipWorldToUVScale,InstancedView_GlobalDistanceFieldMipWorldToUVBias,InstancedView_GlobalDistanceFieldMipFactor,InstancedView_GlobalDistanceFieldMipTransition,InstancedView_GlobalDistanceFieldClipmapSizeInPages,InstancedView_GlobalDistanceFieldInvPageAtlasSize,InstancedView_GlobalDistanceFieldInvCoverageAtlasSize,InstancedView_GlobalVolumeDimension,InstancedView_GlobalVolumeTexelSize,InstancedView_MaxGlobalDFAOConeDistance,InstancedView_NumGlobalSDFClipmaps,InstancedView_FullyCoveredExpandSurfaceScale,InstancedView_UncoveredExpandSurfaceScale,InstancedView_UncoveredMinStepScale,InstancedView_CursorPosition,InstancedView_bCheckerboardSubsurfaceProfileRendering,InstancedView_VolumetricFogInvGridSize,InstancedView_VolumetricFogGridZParams,InstancedView_VolumetricFogSVPosToVolumeUV,InstancedView_VolumetricFogMaxDistance,InstancedView_VolumetricLightmapWorldToUVScale,InstancedView_VolumetricLightmapWorldToUVAdd,InstancedView_VolumetricLightmapIndirectionTextureSize,InstancedView_VolumetricLightmapBrickSize,InstancedView_VolumetricLightmapBrickTexelSize,InstancedView_StereoIPD,InstancedView_IndirectLightingCacheShowFlag,InstancedView_EyeToPixelSpreadAngle,InstancedView_XRPassthroughCameraUVs,InstancedView_GlobalVirtualTextureMipBias,InstancedView_VirtualTextureFeedbackShift,InstancedView_VirtualTextureFeedbackMask,InstancedView_VirtualTextureFeedbackStride,InstancedView_VirtualTextureFeedbackJitterOffset,InstancedView_VirtualTextureFeedbackSampleOffset,InstancedView_RuntimeVirtualTextureMipLevel,InstancedView_RuntimeVirtualTexturePackHeight,InstancedView_RuntimeVirtualTextureDebugParams,InstancedView_OverrideLandscapeLOD,InstancedView_FarShadowStaticMeshLODBias,InstancedView_MinRoughness,InstancedView_HairRenderInfo,InstancedView_EnableSkyLight,InstancedView_HairRenderInfoBits,InstancedView_HairComponents,InstancedView_bSubsurfacePostprocessEnabled,InstancedView_SSProfilesTextureSizeAndInvSize,InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize,InstancedView_PhysicsFieldClipmapCenter,InstancedView_PhysicsFieldClipmapDistance,InstancedView_PhysicsFieldClipmapResolution,InstancedView_PhysicsFieldClipmapExponent,InstancedView_PhysicsFieldClipmapCount,InstancedView_PhysicsFieldTargetCount,InstancedView_PhysicsFieldTargets,InstancedView_InstanceSceneDataSOAStride,InstancedView_GPUSceneViewId,*/
#line 5 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileReflectionCapture.ush"


cbuffer MobileReflectionCapture
{
	float4 MobileReflectionCapture_Params;
}
TextureCube MobileReflectionCapture_Texture;
SamplerState MobileReflectionCapture_TextureSampler;
/*atic const struct
{
	float4 Params;
	TextureCube Texture;
	SamplerState TextureSampler;
} MobileReflectionCapture = {MobileReflectionCapture_Params,MobileReflectionCapture_Texture,MobileReflectionCapture_TextureSampler,*/
#line 6 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstanceVF.ush"


cbuffer InstanceVF
{
	float PrePadding_InstanceVF_0;
	float PrePadding_InstanceVF_4;
	float PrePadding_InstanceVF_8;
	float PrePadding_InstanceVF_12;
	float PrePadding_InstanceVF_16;
	float PrePadding_InstanceVF_20;
	float PrePadding_InstanceVF_24;
	float PrePadding_InstanceVF_28;
	int InstanceVF_NumCustomDataFloats;
}
Buffer<float4> InstanceVF_VertexFetch_InstanceOriginBuffer;
Buffer<float4> InstanceVF_VertexFetch_InstanceTransformBuffer;
Buffer<float4> InstanceVF_VertexFetch_InstanceLightmapBuffer;
Buffer<float> InstanceVF_InstanceCustomDataBuffer;
/*atic const struct
{
	int NumCustomDataFloats;
	Buffer<float4> VertexFetch_InstanceOriginBuffer;
	Buffer<float4> VertexFetch_InstanceTransformBuffer;
	Buffer<float4> VertexFetch_InstanceLightmapBuffer;
	Buffer<float> InstanceCustomDataBuffer;
} InstanceVF = {InstanceVF_NumCustomDataFloats,  InstanceVF_VertexFetch_InstanceOriginBuffer,   InstanceVF_VertexFetch_InstanceTransformBuffer,   InstanceVF_VertexFetch_InstanceLightmapBuffer,   InstanceVF_InstanceCustomDataBuffer,  */
#line 7 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MobileSceneTextures.ush"


cbuffer MobileSceneTextures
{
}
Texture2D MobileSceneTextures_SceneColorTexture;
SamplerState MobileSceneTextures_SceneColorTextureSampler;
Texture2D MobileSceneTextures_SceneDepthTexture;
SamplerState MobileSceneTextures_SceneDepthTextureSampler;
Texture2D MobileSceneTextures_CustomDepthTexture;
SamplerState MobileSceneTextures_CustomDepthTextureSampler;
Texture2D MobileSceneTextures_MobileCustomStencilTexture;
SamplerState MobileSceneTextures_MobileCustomStencilTextureSampler;
Texture2D MobileSceneTextures_SceneVelocityTexture;
SamplerState MobileSceneTextures_SceneVelocityTextureSampler;
Texture2D MobileSceneTextures_GBufferATexture;
Texture2D MobileSceneTextures_GBufferBTexture;
Texture2D MobileSceneTextures_GBufferCTexture;
Texture2D MobileSceneTextures_GBufferDTexture;
Texture2D MobileSceneTextures_SceneDepthAuxTexture;
SamplerState MobileSceneTextures_GBufferATextureSampler;
SamplerState MobileSceneTextures_GBufferBTextureSampler;
SamplerState MobileSceneTextures_GBufferCTextureSampler;
SamplerState MobileSceneTextures_GBufferDTextureSampler;
SamplerState MobileSceneTextures_SceneDepthAuxTextureSampler;
/*atic const struct
{
	Texture2D SceneColorTexture;
	SamplerState SceneColorTextureSampler;
	Texture2D SceneDepthTexture;
	SamplerState SceneDepthTextureSampler;
	Texture2D CustomDepthTexture;
	SamplerState CustomDepthTextureSampler;
	Texture2D MobileCustomStencilTexture;
	SamplerState MobileCustomStencilTextureSampler;
	Texture2D SceneVelocityTexture;
	SamplerState SceneVelocityTextureSampler;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D SceneDepthAuxTexture;
	SamplerState GBufferATextureSampler;
	SamplerState GBufferBTextureSampler;
	SamplerState GBufferCTextureSampler;
	SamplerState GBufferDTextureSampler;
	SamplerState SceneDepthAuxTextureSampler;
} MobileSceneTextures = {MobileSceneTextures_SceneColorTexture,MobileSceneTextures_SceneColorTextureSampler,MobileSceneTextures_SceneDepthTexture,MobileSceneTextures_SceneDepthTextureSampler,MobileSceneTextures_CustomDepthTexture,MobileSceneTextures_CustomDepthTextureSampler,MobileSceneTextures_MobileCustomStencilTexture,MobileSceneTextures_MobileCustomStencilTextureSampler,MobileSceneTextures_SceneVelocityTexture,MobileSceneTextures_SceneVelocityTextureSampler,MobileSceneTextures_GBufferATexture,MobileSceneTextures_GBufferBTexture,MobileSceneTextures_GBufferCTexture,MobileSceneTextures_GBufferDTexture,MobileSceneTextures_SceneDepthAuxTexture,MobileSceneTextures_GBufferATextureSampler,MobileSceneTextures_GBufferBTextureSampler,MobileSceneTextures_GBufferCTextureSampler,MobileSceneTextures_GBufferDTextureSampler,MobileSceneTextures_SceneDepthAuxTextureSampler,*/
#line 8 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SceneTexturesStruct.ush"


cbuffer SceneTexturesStruct
{
}
Texture2D SceneTexturesStruct_SceneColorTexture;
Texture2D SceneTexturesStruct_SceneDepthTexture;
Texture2D SceneTexturesStruct_GBufferATexture;
Texture2D SceneTexturesStruct_GBufferBTexture;
Texture2D SceneTexturesStruct_GBufferCTexture;
Texture2D SceneTexturesStruct_GBufferDTexture;
Texture2D SceneTexturesStruct_GBufferETexture;
Texture2D SceneTexturesStruct_GBufferFTexture;
Texture2D SceneTexturesStruct_GBufferVelocityTexture;
Texture2D SceneTexturesStruct_ScreenSpaceAOTexture;
Texture2D SceneTexturesStruct_CustomDepthTexture;
Texture2D<uint2> SceneTexturesStruct_CustomStencilTexture;
SamplerState SceneTexturesStruct_PointClampSampler;
/*atic const struct
{
	Texture2D SceneColorTexture;
	Texture2D SceneDepthTexture;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D ScreenSpaceAOTexture;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState PointClampSampler;
} SceneTexturesStruct = {SceneTexturesStruct_SceneColorTexture,SceneTexturesStruct_SceneDepthTexture,SceneTexturesStruct_GBufferATexture,SceneTexturesStruct_GBufferBTexture,SceneTexturesStruct_GBufferCTexture,SceneTexturesStruct_GBufferDTexture,SceneTexturesStruct_GBufferETexture,SceneTexturesStruct_GBufferFTexture,SceneTexturesStruct_GBufferVelocityTexture,SceneTexturesStruct_ScreenSpaceAOTexture,SceneTexturesStruct_CustomDepthTexture,SceneTexturesStruct_CustomStencilTexture,SceneTexturesStruct_PointClampSampler,*/
#line 9 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrimitiveDither.ush"


cbuffer PrimitiveDither
{
	float PrimitiveDither_LODFactor;
}
/*atic const struct
{
	float LODFactor;
} PrimitiveDither = {PrimitiveDither_LODFactor,*/
#line 10 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrimitiveFade.ush"


cbuffer PrimitiveFade
{
	float2 PrimitiveFade_FadeTimeScaleBias;
}
/*atic const struct
{
	float2 FadeTimeScaleBias;
} PrimitiveFade = {PrimitiveFade_FadeTimeScaleBias,*/
#line 11 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/ReflectionCapture.ush"


cbuffer ReflectionCapture
{
	float4 ReflectionCapture_PositionAndRadius[341];
	float4 ReflectionCapture_TilePosition[341];
	float4 ReflectionCapture_CaptureProperties[341];
	float4 ReflectionCapture_CaptureOffsetAndAverageBrightness[341];
	float4x4 ReflectionCapture_BoxTransform[341];
	float4 ReflectionCapture_BoxScales[341];
}
/*atic const struct
{
	float4 PositionAndRadius[341];
	float4 TilePosition[341];
	float4 CaptureProperties[341];
	float4 CaptureOffsetAndAverageBrightness[341];
	float4x4 BoxTransform[341];
	float4 BoxScales[341];
} ReflectionCapture = {ReflectionCapture_PositionAndRadius,ReflectionCapture_TilePosition,ReflectionCapture_CaptureProperties,ReflectionCapture_CaptureOffsetAndAverageBrightness,ReflectionCapture_BoxTransform,ReflectionCapture_BoxScales,*/
#line 12 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DeferredDecal.ush"


cbuffer DeferredDecal
{
	float PrePadding_DeferredDecal_0;
	float PrePadding_DeferredDecal_4;
	int DeferredDecal_NormalReprojectionEnabled;
	float DeferredDecal_NormalReprojectionThresholdLow;
	float DeferredDecal_NormalReprojectionThresholdHigh;
	float DeferredDecal_NormalReprojectionThresholdScaleHelper;
	float2 DeferredDecal_NormalReprojectionJitter;
}
Texture2D DeferredDecal_PreviousFrameNormal;
/*atic const struct
{
	int NormalReprojectionEnabled;
	float NormalReprojectionThresholdLow;
	float NormalReprojectionThresholdHigh;
	float NormalReprojectionThresholdScaleHelper;
	float2 NormalReprojectionJitter;
	Texture2D PreviousFrameNormal;
} DeferredDecal = {DeferredDecal_NormalReprojectionEnabled,DeferredDecal_NormalReprojectionThresholdLow,DeferredDecal_NormalReprojectionThresholdHigh,DeferredDecal_NormalReprojectionThresholdScaleHelper,DeferredDecal_NormalReprojectionJitter,DeferredDecal_PreviousFrameNormal,*/
#line 13 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/OpaqueBasePass.ush"


cbuffer OpaqueBasePass
{
	uint OpaqueBasePass_Shared_Forward_NumLocalLights;
	uint OpaqueBasePass_Shared_Forward_NumReflectionCaptures;
	uint OpaqueBasePass_Shared_Forward_HasDirectionalLight;
	uint OpaqueBasePass_Shared_Forward_NumGridCells;
	int3 OpaqueBasePass_Shared_Forward_CulledGridSize;
	uint OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell;
	uint OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift;
	uint PrePadding_OpaqueBasePass_Shared_Forward_36;
	uint PrePadding_OpaqueBasePass_Shared_Forward_40;
	uint PrePadding_OpaqueBasePass_Shared_Forward_44;
	float3 OpaqueBasePass_Shared_Forward_LightGridZParams;
	float PrePadding_OpaqueBasePass_Shared_Forward_60;
	float3 OpaqueBasePass_Shared_Forward_DirectionalLightDirection;
	float PrePadding_OpaqueBasePass_Shared_Forward_76;
	float3 OpaqueBasePass_Shared_Forward_DirectionalLightColor;
	float OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;
	uint OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;
	uint PrePadding_OpaqueBasePass_Shared_Forward_100;
	float2 OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
	uint OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades;
	int OpaqueBasePass_Shared_Forward_DirectionalLightVSM;
	int PrePadding_OpaqueBasePass_Shared_Forward_120;
	int PrePadding_OpaqueBasePass_Shared_Forward_124;
	float4 OpaqueBasePass_Shared_Forward_CascadeEndDepths;
	float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];
	float4 OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;
	float OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias;
	uint OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;
	uint OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex;
	uint OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;
	float4 OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;
	float4x4 OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	uint OpaqueBasePass_Shared_Forward_DirectLightingShowFlag;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_580;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_584;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_588;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_592;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_596;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_600;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_604;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_608;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_612;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_616;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_620;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_624;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_628;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_632;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_636;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_640;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_644;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_648;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_652;
	uint OpaqueBasePass_Shared_ForwardISR_NumLocalLights;
	uint OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures;
	uint OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight;
	uint OpaqueBasePass_Shared_ForwardISR_NumGridCells;
	int3 OpaqueBasePass_Shared_ForwardISR_CulledGridSize;
	uint OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;
	uint OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift;
	uint PrePadding_OpaqueBasePass_Shared_ForwardISR_692;
	uint PrePadding_OpaqueBasePass_Shared_ForwardISR_696;
	uint PrePadding_OpaqueBasePass_Shared_ForwardISR_700;
	float3 OpaqueBasePass_Shared_ForwardISR_LightGridZParams;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_716;
	float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection;
	float PrePadding_OpaqueBasePass_Shared_ForwardISR_732;
	float3 OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor;
	float OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;
	uint PrePadding_OpaqueBasePass_Shared_ForwardISR_756;
	float2 OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;
	uint OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades;
	int OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM;
	int PrePadding_OpaqueBasePass_Shared_ForwardISR_776;
	int PrePadding_OpaqueBasePass_Shared_ForwardISR_780;
	float4 OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths;
	float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];
	float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	float OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias;
	uint OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;
	uint OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex;
	uint OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;
	float4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;
	float4x4 OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	uint OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1236;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1240;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1244;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1248;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1252;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1256;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1260;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1264;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1268;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1272;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1276;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1280;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1284;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1288;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1292;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1296;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1300;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1304;
	float PrePadding_OpaqueBasePass_Shared_Reflection_1308;
	float4 OpaqueBasePass_Shared_Reflection_SkyLightParameters;
	float OpaqueBasePass_Shared_Reflection_SkyLightCubemapBrightness;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1332;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1336;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1340;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1344;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1348;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1352;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1356;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1360;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1364;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1368;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1372;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1376;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1380;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1384;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1388;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1392;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1396;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1400;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1404;
	float4 OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane;
	float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;
	float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;
	float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;
	float3x4 OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;
	float3 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1532;
	float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1544;
	float PrePadding_OpaqueBasePass_Shared_PlanarReflection_1548;
	float4x4 OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];
	float4 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	float2 OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;
	uint OpaqueBasePass_Shared_PlanarReflection_bIsStereo;
	float PrePadding_OpaqueBasePass_Shared_Fog_1724;
	float PrePadding_OpaqueBasePass_Shared_Fog_1728;
	float PrePadding_OpaqueBasePass_Shared_Fog_1732;
	float PrePadding_OpaqueBasePass_Shared_Fog_1736;
	float PrePadding_OpaqueBasePass_Shared_Fog_1740;
	float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters;
	float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters2;
	float4 OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter;
	float4 OpaqueBasePass_Shared_Fog_ExponentialFogParameters3;
	float4 OpaqueBasePass_Shared_Fog_InscatteringLightDirection;
	float4 OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor;
	float2 OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;
	float PrePadding_OpaqueBasePass_Shared_Fog_1848;
	float PrePadding_OpaqueBasePass_Shared_Fog_1852;
	float3 OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters;
	float OpaqueBasePass_Shared_Fog_ApplyVolumetricFog;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1872;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1876;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1880;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1884;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1888;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1892;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1896;
	float PrePadding_OpaqueBasePass_Shared_FogISR_1900;
	float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters;
	float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2;
	float4 OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter;
	float4 OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3;
	float4 OpaqueBasePass_Shared_FogISR_InscatteringLightDirection;
	float4 OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor;
	float2 OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;
	float PrePadding_OpaqueBasePass_Shared_FogISR_2008;
	float PrePadding_OpaqueBasePass_Shared_FogISR_2012;
	float3 OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters;
	float OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog;
	float PrePadding_OpaqueBasePass_Shared_2032;
	float PrePadding_OpaqueBasePass_Shared_2036;
	float PrePadding_OpaqueBasePass_Shared_2040;
	float PrePadding_OpaqueBasePass_Shared_2044;
	float PrePadding_OpaqueBasePass_Shared_2048;
	float PrePadding_OpaqueBasePass_Shared_2052;
	float PrePadding_OpaqueBasePass_Shared_2056;
	float PrePadding_OpaqueBasePass_Shared_2060;
	uint OpaqueBasePass_Shared_UseBasePassSkylight;
	float PrePadding_OpaqueBasePass_Strata_2068;
	float PrePadding_OpaqueBasePass_Strata_2072;
	float PrePadding_OpaqueBasePass_Strata_2076;
	uint OpaqueBasePass_Strata_MaxBytesPerPixel;
	uint OpaqueBasePass_Strata_bRoughDiffuse;
	float PrePadding_OpaqueBasePass_2088;
	float PrePadding_OpaqueBasePass_2092;
	float PrePadding_OpaqueBasePass_2096;
	float PrePadding_OpaqueBasePass_2100;
	float PrePadding_OpaqueBasePass_2104;
	float PrePadding_OpaqueBasePass_2108;
	int OpaqueBasePass_UseForwardScreenSpaceShadowMask;
	int PrePadding_OpaqueBasePass_2116;
	int PrePadding_OpaqueBasePass_2120;
	int PrePadding_OpaqueBasePass_2124;
	int PrePadding_OpaqueBasePass_2128;
	int PrePadding_OpaqueBasePass_2132;
	int PrePadding_OpaqueBasePass_2136;
	int PrePadding_OpaqueBasePass_2140;
	int PrePadding_OpaqueBasePass_2144;
	int PrePadding_OpaqueBasePass_2148;
	int PrePadding_OpaqueBasePass_2152;
	int PrePadding_OpaqueBasePass_2156;
	int PrePadding_OpaqueBasePass_2160;
	int PrePadding_OpaqueBasePass_2164;
	int PrePadding_OpaqueBasePass_2168;
	int PrePadding_OpaqueBasePass_2172;
	int PrePadding_OpaqueBasePass_2176;
	int PrePadding_OpaqueBasePass_2180;
	int PrePadding_OpaqueBasePass_2184;
	int PrePadding_OpaqueBasePass_2188;
	int PrePadding_OpaqueBasePass_2192;
	int PrePadding_OpaqueBasePass_2196;
	int PrePadding_OpaqueBasePass_2200;
	int PrePadding_OpaqueBasePass_2204;
	int PrePadding_OpaqueBasePass_2208;
	int PrePadding_OpaqueBasePass_2212;
	int PrePadding_OpaqueBasePass_2216;
	int PrePadding_OpaqueBasePass_2220;
	int PrePadding_OpaqueBasePass_2224;
	int PrePadding_OpaqueBasePass_2228;
	int PrePadding_OpaqueBasePass_2232;
	int PrePadding_OpaqueBasePass_2236;
	int PrePadding_OpaqueBasePass_2240;
	int PrePadding_OpaqueBasePass_2244;
	int PrePadding_OpaqueBasePass_2248;
	int PrePadding_OpaqueBasePass_2252;
	float4 OpaqueBasePass_SceneWithoutSingleLayerWaterMinMaxUV;
	float4 OpaqueBasePass_DistortionParams;
}
Texture2D OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;
SamplerState OpaqueBasePass_Shared_Forward_ShadowmapSampler;
Texture2D OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap;
SamplerState OpaqueBasePass_Shared_Forward_StaticShadowmapSampler;
Buffer<float4> OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer;
Buffer<uint> OpaqueBasePass_Shared_Forward_NumCulledLightsGrid;
Buffer<uint> OpaqueBasePass_Shared_Forward_CulledLightDataGrid;
Texture2D OpaqueBasePass_Shared_Forward_DummyRectLightSourceTexture;
Texture2D OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas;
SamplerState OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler;
Texture2D OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap;
SamplerState OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler;
Buffer<float4> OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer;
Buffer<uint> OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid;
Buffer<uint> OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid;
Texture2D OpaqueBasePass_Shared_ForwardISR_DummyRectLightSourceTexture;
TextureCube OpaqueBasePass_Shared_Reflection_SkyLightCubemap;
SamplerState OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler;
TextureCube OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap;
SamplerState OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler;
TextureCubeArray OpaqueBasePass_Shared_Reflection_ReflectionCubemap;
SamplerState OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler;
Texture2D OpaqueBasePass_Shared_Reflection_PreIntegratedGF;
SamplerState OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler;
Texture2D OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture;
SamplerState OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler;
TextureCube OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap;
SamplerState OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler;
Texture3D OpaqueBasePass_Shared_Fog_IntegratedLightScattering;
SamplerState OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler;
TextureCube OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap;
SamplerState OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler;
Texture3D OpaqueBasePass_Shared_FogISR_IntegratedLightScattering;
SamplerState OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler;
RWTexture2DArray<uint> OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs;
RWTexture2D<uint2> OpaqueBasePass_Strata_SSSTextureUAV;
Texture2D OpaqueBasePass_DBufferATexture;
Texture2D OpaqueBasePass_DBufferBTexture;
Texture2D OpaqueBasePass_DBufferCTexture;
Texture2D<uint> OpaqueBasePass_DBufferRenderMask;
SamplerState OpaqueBasePass_DBufferATextureSampler;
SamplerState OpaqueBasePass_DBufferBTextureSampler;
SamplerState OpaqueBasePass_DBufferCTextureSampler;
Texture2D OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture;
Texture2D OpaqueBasePass_IndirectOcclusionTexture;
Texture2D OpaqueBasePass_ResolvedSceneDepthTexture;
Texture2D OpaqueBasePass_SceneColorWithoutSingleLayerWaterTexture;
SamplerState OpaqueBasePass_SceneColorWithoutSingleLayerWaterSampler;
Texture2D OpaqueBasePass_SceneDepthWithoutSingleLayerWaterTexture;
SamplerState OpaqueBasePass_SceneDepthWithoutSingleLayerWaterSampler;
Texture2D OpaqueBasePass_PreIntegratedGFTexture;
SamplerState OpaqueBasePass_PreIntegratedGFSampler;
Texture2D OpaqueBasePass_EyeAdaptationTexture;
/*atic const struct
{
struct {
struct {
	uint NumLocalLights;
	uint NumReflectionCaptures;
	uint HasDirectionalLight;
	uint NumGridCells;
	int3 CulledGridSize;
	uint MaxCulledLightsPerCell;
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	float3 DirectionalLightDirection;
	float3 DirectionalLightColor;
	float DirectionalLightVolumetricScatteringIntensity;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	uint NumDirectionalLightCascades;
	int DirectionalLightVSM;
	float4 CascadeEndDepths;
	float4x4 DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 DirectionalLightShadowmapMinMax[4];
	float4 DirectionalLightShadowmapAtlasBufferSize;
	float DirectionalLightDepthBias;
	uint DirectionalLightUseStaticShadowing;
	uint SimpleLightsEndIndex;
	uint ClusteredDeferredSupportedEndIndex;
	float4 DirectionalLightStaticShadowBufferSize;
	float4x4 DirectionalLightTranslatedWorldToStaticShadow;
	uint DirectLightingShowFlag;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
	Texture2D DummyRectLightSourceTexture;
} Forward;
struct {
	uint NumLocalLights;
	uint NumReflectionCaptures;
	uint HasDirectionalLight;
	uint NumGridCells;
	int3 CulledGridSize;
	uint MaxCulledLightsPerCell;
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	float3 DirectionalLightDirection;
	float3 DirectionalLightColor;
	float DirectionalLightVolumetricScatteringIntensity;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	uint NumDirectionalLightCascades;
	int DirectionalLightVSM;
	float4 CascadeEndDepths;
	float4x4 DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 DirectionalLightShadowmapMinMax[4];
	float4 DirectionalLightShadowmapAtlasBufferSize;
	float DirectionalLightDepthBias;
	uint DirectionalLightUseStaticShadowing;
	uint SimpleLightsEndIndex;
	uint ClusteredDeferredSupportedEndIndex;
	float4 DirectionalLightStaticShadowBufferSize;
	float4x4 DirectionalLightTranslatedWorldToStaticShadow;
	uint DirectLightingShowFlag;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
	Texture2D DummyRectLightSourceTexture;
} ForwardISR;
struct {
	float4 SkyLightParameters;
	float SkyLightCubemapBrightness;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} Reflection;
struct {
	float4 ReflectionPlane;
	float4 PlanarReflectionOrigin;
	float4 PlanarReflectionXAxis;
	float4 PlanarReflectionYAxis;
	float3x4 InverseTransposeMirrorMatrix;
	float3 PlanarReflectionParameters;
	float2 PlanarReflectionParameters2;
	float4x4 ProjectionWithExtraFOV[2];
	float4 PlanarReflectionScreenScaleBias[2];
	float2 PlanarReflectionScreenBound;
	uint bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflection;
struct {
	float4 ExponentialFogParameters;
	float4 ExponentialFogParameters2;
	float4 ExponentialFogColorParameter;
	float4 ExponentialFogParameters3;
	float4 InscatteringLightDirection;
	float4 DirectionalInscatteringColor;
	float2 SinCosInscatteringColorCubemapRotation;
	float3 FogInscatteringTextureParameters;
	float ApplyVolumetricFog;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} Fog;
struct {
	float4 ExponentialFogParameters;
	float4 ExponentialFogParameters2;
	float4 ExponentialFogColorParameter;
	float4 ExponentialFogParameters3;
	float4 InscatteringLightDirection;
	float4 DirectionalInscatteringColor;
	float2 SinCosInscatteringColorCubemapRotation;
	float3 FogInscatteringTextureParameters;
	float ApplyVolumetricFog;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} FogISR;
	uint UseBasePassSkylight;
} Shared;
struct {
	uint MaxBytesPerPixel;
	uint bRoughDiffuse;
	RWTexture2DArray<uint> MaterialTextureArrayUAVWithoutRTs;
	RWTexture2D<uint2> SSSTextureUAV;
} Strata;
	int UseForwardScreenSpaceShadowMask;
	Texture2D DBufferATexture;
	Texture2D DBufferBTexture;
	Texture2D DBufferCTexture;
	Texture2D<uint> DBufferRenderMask;
	SamplerState DBufferATextureSampler;
	SamplerState DBufferBTextureSampler;
	SamplerState DBufferCTextureSampler;
	float4 SceneWithoutSingleLayerWaterMinMaxUV;
	float4 DistortionParams;
	Texture2D ForwardScreenSpaceShadowMaskTexture;
	Texture2D IndirectOcclusionTexture;
	Texture2D ResolvedSceneDepthTexture;
	Texture2D SceneColorWithoutSingleLayerWaterTexture;
	SamplerState SceneColorWithoutSingleLayerWaterSampler;
	Texture2D SceneDepthWithoutSingleLayerWaterTexture;
	SamplerState SceneDepthWithoutSingleLayerWaterSampler;
	Texture2D PreIntegratedGFTexture;
	SamplerState PreIntegratedGFSampler;
	Texture2D EyeAdaptationTexture;
} OpaqueBasePass = {{{OpaqueBasePass_Shared_Forward_NumLocalLights,OpaqueBasePass_Shared_Forward_NumReflectionCaptures,OpaqueBasePass_Shared_Forward_HasDirectionalLight,OpaqueBasePass_Shared_Forward_NumGridCells,OpaqueBasePass_Shared_Forward_CulledGridSize,OpaqueBasePass_Shared_Forward_MaxCulledLightsPerCell,OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift,OpaqueBasePass_Shared_Forward_LightGridZParams,OpaqueBasePass_Shared_Forward_DirectionalLightDirection,OpaqueBasePass_Shared_Forward_DirectionalLightColor,OpaqueBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity,OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask,OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD,OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades,OpaqueBasePass_Shared_Forward_DirectionalLightVSM,OpaqueBasePass_Shared_Forward_CascadeEndDepths,OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix,OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax,OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize,OpaqueBasePass_Shared_Forward_DirectionalLightDepthBias,OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing,OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex,OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex,OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize,OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow,OpaqueBasePass_Shared_Forward_DirectLightingShowFlag,OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas,OpaqueBasePass_Shared_Forward_ShadowmapSampler,OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap,OpaqueBasePass_Shared_Forward_StaticShadowmapSampler,OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer,OpaqueBasePass_Shared_Forward_NumCulledLightsGrid,OpaqueBasePass_Shared_Forward_CulledLightDataGrid,OpaqueBasePass_Shared_Forward_DummyRectLightSourceTexture,},{OpaqueBasePass_Shared_ForwardISR_NumLocalLights,OpaqueBasePass_Shared_ForwardISR_NumReflectionCaptures,OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight,OpaqueBasePass_Shared_ForwardISR_NumGridCells,OpaqueBasePass_Shared_ForwardISR_CulledGridSize,OpaqueBasePass_Shared_ForwardISR_MaxCulledLightsPerCell,OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift,OpaqueBasePass_Shared_ForwardISR_LightGridZParams,OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection,OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor,OpaqueBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity,OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask,OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD,OpaqueBasePass_Shared_ForwardISR_NumDirectionalLightCascades,OpaqueBasePass_Shared_ForwardISR_DirectionalLightVSM,OpaqueBasePass_Shared_ForwardISR_CascadeEndDepths,OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix,OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax,OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize,OpaqueBasePass_Shared_ForwardISR_DirectionalLightDepthBias,OpaqueBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing,OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex,OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex,OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize,OpaqueBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow,OpaqueBasePass_Shared_ForwardISR_DirectLightingShowFlag,OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas,OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler,OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap,OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler,OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer,OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid,OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid,OpaqueBasePass_Shared_ForwardISR_DummyRectLightSourceTexture,},{OpaqueBasePass_Shared_Reflection_SkyLightParameters,OpaqueBasePass_Shared_Reflection_SkyLightCubemapBrightness,OpaqueBasePass_Shared_Reflection_SkyLightCubemap,OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler,OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap,OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler,OpaqueBasePass_Shared_Reflection_ReflectionCubemap,OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler,OpaqueBasePass_Shared_Reflection_PreIntegratedGF,OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler,},{OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis,OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2,OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound,OpaqueBasePass_Shared_PlanarReflection_bIsStereo,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture,OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler,},{OpaqueBasePass_Shared_Fog_ExponentialFogParameters,OpaqueBasePass_Shared_Fog_ExponentialFogParameters2,OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter,OpaqueBasePass_Shared_Fog_ExponentialFogParameters3,OpaqueBasePass_Shared_Fog_InscatteringLightDirection,OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor,OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation,OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters,OpaqueBasePass_Shared_Fog_ApplyVolumetricFog,OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap,OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler,OpaqueBasePass_Shared_Fog_IntegratedLightScattering,OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler,},{OpaqueBasePass_Shared_FogISR_ExponentialFogParameters,OpaqueBasePass_Shared_FogISR_ExponentialFogParameters2,OpaqueBasePass_Shared_FogISR_ExponentialFogColorParameter,OpaqueBasePass_Shared_FogISR_ExponentialFogParameters3,OpaqueBasePass_Shared_FogISR_InscatteringLightDirection,OpaqueBasePass_Shared_FogISR_DirectionalInscatteringColor,OpaqueBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation,OpaqueBasePass_Shared_FogISR_FogInscatteringTextureParameters,OpaqueBasePass_Shared_FogISR_ApplyVolumetricFog,OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap,OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler,OpaqueBasePass_Shared_FogISR_IntegratedLightScattering,OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler,},OpaqueBasePass_Shared_UseBasePassSkylight,},{OpaqueBasePass_Strata_MaxBytesPerPixel,OpaqueBasePass_Strata_bRoughDiffuse,OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs,OpaqueBasePass_Strata_SSSTextureUAV,},OpaqueBasePass_UseForwardScreenSpaceShadowMask,OpaqueBasePass_DBufferATexture,OpaqueBasePass_DBufferBTexture,OpaqueBasePass_DBufferCTexture,OpaqueBasePass_DBufferRenderMask,OpaqueBasePass_DBufferATextureSampler,OpaqueBasePass_DBufferBTextureSampler,OpaqueBasePass_DBufferCTextureSampler,OpaqueBasePass_SceneWithoutSingleLayerWaterMinMaxUV,OpaqueBasePass_DistortionParams,OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture,OpaqueBasePass_IndirectOcclusionTexture,OpaqueBasePass_ResolvedSceneDepthTexture,OpaqueBasePass_SceneColorWithoutSingleLayerWaterTexture,OpaqueBasePass_SceneColorWithoutSingleLayerWaterSampler,OpaqueBasePass_SceneDepthWithoutSingleLayerWaterTexture,OpaqueBasePass_SceneDepthWithoutSingleLayerWaterSampler,OpaqueBasePass_PreIntegratedGFTexture,OpaqueBasePass_PreIntegratedGFSampler,OpaqueBasePass_EyeAdaptationTexture,*/
#line 14 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/BasePass.ush"


cbuffer BasePass
{
	uint BasePass_Forward_NumLocalLights;
	uint BasePass_Forward_NumReflectionCaptures;
	uint BasePass_Forward_HasDirectionalLight;
	uint BasePass_Forward_NumGridCells;
	int3 BasePass_Forward_CulledGridSize;
	uint BasePass_Forward_MaxCulledLightsPerCell;
	uint BasePass_Forward_LightGridPixelSizeShift;
	uint PrePadding_BasePass_Forward_36;
	uint PrePadding_BasePass_Forward_40;
	uint PrePadding_BasePass_Forward_44;
	float3 BasePass_Forward_LightGridZParams;
	float PrePadding_BasePass_Forward_60;
	float3 BasePass_Forward_DirectionalLightDirection;
	float PrePadding_BasePass_Forward_76;
	float3 BasePass_Forward_DirectionalLightColor;
	float BasePass_Forward_DirectionalLightVolumetricScatteringIntensity;
	uint BasePass_Forward_DirectionalLightShadowMapChannelMask;
	uint PrePadding_BasePass_Forward_100;
	float2 BasePass_Forward_DirectionalLightDistanceFadeMAD;
	uint BasePass_Forward_NumDirectionalLightCascades;
	int BasePass_Forward_DirectionalLightVSM;
	int PrePadding_BasePass_Forward_120;
	int PrePadding_BasePass_Forward_124;
	float4 BasePass_Forward_CascadeEndDepths;
	float4x4 BasePass_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 BasePass_Forward_DirectionalLightShadowmapMinMax[4];
	float4 BasePass_Forward_DirectionalLightShadowmapAtlasBufferSize;
	float BasePass_Forward_DirectionalLightDepthBias;
	uint BasePass_Forward_DirectionalLightUseStaticShadowing;
	uint BasePass_Forward_SimpleLightsEndIndex;
	uint BasePass_Forward_ClusteredDeferredSupportedEndIndex;
	float4 BasePass_Forward_DirectionalLightStaticShadowBufferSize;
	float4x4 BasePass_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	uint BasePass_Forward_DirectLightingShowFlag;
	float PrePadding_BasePass_ForwardISR_580;
	float PrePadding_BasePass_ForwardISR_584;
	float PrePadding_BasePass_ForwardISR_588;
	float PrePadding_BasePass_ForwardISR_592;
	float PrePadding_BasePass_ForwardISR_596;
	float PrePadding_BasePass_ForwardISR_600;
	float PrePadding_BasePass_ForwardISR_604;
	float PrePadding_BasePass_ForwardISR_608;
	float PrePadding_BasePass_ForwardISR_612;
	float PrePadding_BasePass_ForwardISR_616;
	float PrePadding_BasePass_ForwardISR_620;
	float PrePadding_BasePass_ForwardISR_624;
	float PrePadding_BasePass_ForwardISR_628;
	float PrePadding_BasePass_ForwardISR_632;
	float PrePadding_BasePass_ForwardISR_636;
	float PrePadding_BasePass_ForwardISR_640;
	float PrePadding_BasePass_ForwardISR_644;
	float PrePadding_BasePass_ForwardISR_648;
	float PrePadding_BasePass_ForwardISR_652;
	uint BasePass_ForwardISR_NumLocalLights;
	uint BasePass_ForwardISR_NumReflectionCaptures;
	uint BasePass_ForwardISR_HasDirectionalLight;
	uint BasePass_ForwardISR_NumGridCells;
	int3 BasePass_ForwardISR_CulledGridSize;
	uint BasePass_ForwardISR_MaxCulledLightsPerCell;
	uint BasePass_ForwardISR_LightGridPixelSizeShift;
	uint PrePadding_BasePass_ForwardISR_692;
	uint PrePadding_BasePass_ForwardISR_696;
	uint PrePadding_BasePass_ForwardISR_700;
	float3 BasePass_ForwardISR_LightGridZParams;
	float PrePadding_BasePass_ForwardISR_716;
	float3 BasePass_ForwardISR_DirectionalLightDirection;
	float PrePadding_BasePass_ForwardISR_732;
	float3 BasePass_ForwardISR_DirectionalLightColor;
	float BasePass_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	uint BasePass_ForwardISR_DirectionalLightShadowMapChannelMask;
	uint PrePadding_BasePass_ForwardISR_756;
	float2 BasePass_ForwardISR_DirectionalLightDistanceFadeMAD;
	uint BasePass_ForwardISR_NumDirectionalLightCascades;
	int BasePass_ForwardISR_DirectionalLightVSM;
	int PrePadding_BasePass_ForwardISR_776;
	int PrePadding_BasePass_ForwardISR_780;
	float4 BasePass_ForwardISR_CascadeEndDepths;
	float4x4 BasePass_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 BasePass_ForwardISR_DirectionalLightShadowmapMinMax[4];
	float4 BasePass_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	float BasePass_ForwardISR_DirectionalLightDepthBias;
	uint BasePass_ForwardISR_DirectionalLightUseStaticShadowing;
	uint BasePass_ForwardISR_SimpleLightsEndIndex;
	uint BasePass_ForwardISR_ClusteredDeferredSupportedEndIndex;
	float4 BasePass_ForwardISR_DirectionalLightStaticShadowBufferSize;
	float4x4 BasePass_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	uint BasePass_ForwardISR_DirectLightingShowFlag;
	float PrePadding_BasePass_Reflection_1236;
	float PrePadding_BasePass_Reflection_1240;
	float PrePadding_BasePass_Reflection_1244;
	float PrePadding_BasePass_Reflection_1248;
	float PrePadding_BasePass_Reflection_1252;
	float PrePadding_BasePass_Reflection_1256;
	float PrePadding_BasePass_Reflection_1260;
	float PrePadding_BasePass_Reflection_1264;
	float PrePadding_BasePass_Reflection_1268;
	float PrePadding_BasePass_Reflection_1272;
	float PrePadding_BasePass_Reflection_1276;
	float PrePadding_BasePass_Reflection_1280;
	float PrePadding_BasePass_Reflection_1284;
	float PrePadding_BasePass_Reflection_1288;
	float PrePadding_BasePass_Reflection_1292;
	float PrePadding_BasePass_Reflection_1296;
	float PrePadding_BasePass_Reflection_1300;
	float PrePadding_BasePass_Reflection_1304;
	float PrePadding_BasePass_Reflection_1308;
	float4 BasePass_Reflection_SkyLightParameters;
	float BasePass_Reflection_SkyLightCubemapBrightness;
	float PrePadding_BasePass_PlanarReflection_1332;
	float PrePadding_BasePass_PlanarReflection_1336;
	float PrePadding_BasePass_PlanarReflection_1340;
	float PrePadding_BasePass_PlanarReflection_1344;
	float PrePadding_BasePass_PlanarReflection_1348;
	float PrePadding_BasePass_PlanarReflection_1352;
	float PrePadding_BasePass_PlanarReflection_1356;
	float PrePadding_BasePass_PlanarReflection_1360;
	float PrePadding_BasePass_PlanarReflection_1364;
	float PrePadding_BasePass_PlanarReflection_1368;
	float PrePadding_BasePass_PlanarReflection_1372;
	float PrePadding_BasePass_PlanarReflection_1376;
	float PrePadding_BasePass_PlanarReflection_1380;
	float PrePadding_BasePass_PlanarReflection_1384;
	float PrePadding_BasePass_PlanarReflection_1388;
	float PrePadding_BasePass_PlanarReflection_1392;
	float PrePadding_BasePass_PlanarReflection_1396;
	float PrePadding_BasePass_PlanarReflection_1400;
	float PrePadding_BasePass_PlanarReflection_1404;
	float4 BasePass_PlanarReflection_ReflectionPlane;
	float4 BasePass_PlanarReflection_PlanarReflectionOrigin;
	float4 BasePass_PlanarReflection_PlanarReflectionXAxis;
	float4 BasePass_PlanarReflection_PlanarReflectionYAxis;
	float3x4 BasePass_PlanarReflection_InverseTransposeMirrorMatrix;
	float3 BasePass_PlanarReflection_PlanarReflectionParameters;
	float PrePadding_BasePass_PlanarReflection_1532;
	float2 BasePass_PlanarReflection_PlanarReflectionParameters2;
	float PrePadding_BasePass_PlanarReflection_1544;
	float PrePadding_BasePass_PlanarReflection_1548;
	float4x4 BasePass_PlanarReflection_ProjectionWithExtraFOV[2];
	float4 BasePass_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	float2 BasePass_PlanarReflection_PlanarReflectionScreenBound;
	uint BasePass_PlanarReflection_bIsStereo;
	float PrePadding_BasePass_Fog_1724;
	float PrePadding_BasePass_Fog_1728;
	float PrePadding_BasePass_Fog_1732;
	float PrePadding_BasePass_Fog_1736;
	float PrePadding_BasePass_Fog_1740;
	float4 BasePass_Fog_ExponentialFogParameters;
	float4 BasePass_Fog_ExponentialFogParameters2;
	float4 BasePass_Fog_ExponentialFogColorParameter;
	float4 BasePass_Fog_ExponentialFogParameters3;
	float4 BasePass_Fog_InscatteringLightDirection;
	float4 BasePass_Fog_DirectionalInscatteringColor;
	float2 BasePass_Fog_SinCosInscatteringColorCubemapRotation;
	float PrePadding_BasePass_Fog_1848;
	float PrePadding_BasePass_Fog_1852;
	float3 BasePass_Fog_FogInscatteringTextureParameters;
	float BasePass_Fog_ApplyVolumetricFog;
	float PrePadding_BasePass_FogISR_1872;
	float PrePadding_BasePass_FogISR_1876;
	float PrePadding_BasePass_FogISR_1880;
	float PrePadding_BasePass_FogISR_1884;
	float PrePadding_BasePass_FogISR_1888;
	float PrePadding_BasePass_FogISR_1892;
	float PrePadding_BasePass_FogISR_1896;
	float PrePadding_BasePass_FogISR_1900;
	float4 BasePass_FogISR_ExponentialFogParameters;
	float4 BasePass_FogISR_ExponentialFogParameters2;
	float4 BasePass_FogISR_ExponentialFogColorParameter;
	float4 BasePass_FogISR_ExponentialFogParameters3;
	float4 BasePass_FogISR_InscatteringLightDirection;
	float4 BasePass_FogISR_DirectionalInscatteringColor;
	float2 BasePass_FogISR_SinCosInscatteringColorCubemapRotation;
	float PrePadding_BasePass_FogISR_2008;
	float PrePadding_BasePass_FogISR_2012;
	float3 BasePass_FogISR_FogInscatteringTextureParameters;
	float BasePass_FogISR_ApplyVolumetricFog;
	float PrePadding_BasePass_2032;
	float PrePadding_BasePass_2036;
	float PrePadding_BasePass_2040;
	float PrePadding_BasePass_2044;
	float PrePadding_BasePass_2048;
	float PrePadding_BasePass_2052;
	float PrePadding_BasePass_2056;
	float PrePadding_BasePass_2060;
	uint BasePass_UseBasePassSkylight;
}
Texture2D BasePass_Forward_DirectionalLightShadowmapAtlas;
SamplerState BasePass_Forward_ShadowmapSampler;
Texture2D BasePass_Forward_DirectionalLightStaticShadowmap;
SamplerState BasePass_Forward_StaticShadowmapSampler;
Buffer<float4> BasePass_Forward_ForwardLocalLightBuffer;
Buffer<uint> BasePass_Forward_NumCulledLightsGrid;
Buffer<uint> BasePass_Forward_CulledLightDataGrid;
Texture2D BasePass_Forward_DummyRectLightSourceTexture;
Texture2D BasePass_ForwardISR_DirectionalLightShadowmapAtlas;
SamplerState BasePass_ForwardISR_ShadowmapSampler;
Texture2D BasePass_ForwardISR_DirectionalLightStaticShadowmap;
SamplerState BasePass_ForwardISR_StaticShadowmapSampler;
Buffer<float4> BasePass_ForwardISR_ForwardLocalLightBuffer;
Buffer<uint> BasePass_ForwardISR_NumCulledLightsGrid;
Buffer<uint> BasePass_ForwardISR_CulledLightDataGrid;
Texture2D BasePass_ForwardISR_DummyRectLightSourceTexture;
TextureCube BasePass_Reflection_SkyLightCubemap;
SamplerState BasePass_Reflection_SkyLightCubemapSampler;
TextureCube BasePass_Reflection_SkyLightBlendDestinationCubemap;
SamplerState BasePass_Reflection_SkyLightBlendDestinationCubemapSampler;
TextureCubeArray BasePass_Reflection_ReflectionCubemap;
SamplerState BasePass_Reflection_ReflectionCubemapSampler;
Texture2D BasePass_Reflection_PreIntegratedGF;
SamplerState BasePass_Reflection_PreIntegratedGFSampler;
Texture2D BasePass_PlanarReflection_PlanarReflectionTexture;
SamplerState BasePass_PlanarReflection_PlanarReflectionSampler;
TextureCube BasePass_Fog_FogInscatteringColorCubemap;
SamplerState BasePass_Fog_FogInscatteringColorSampler;
Texture3D BasePass_Fog_IntegratedLightScattering;
SamplerState BasePass_Fog_IntegratedLightScatteringSampler;
TextureCube BasePass_FogISR_FogInscatteringColorCubemap;
SamplerState BasePass_FogISR_FogInscatteringColorSampler;
Texture3D BasePass_FogISR_IntegratedLightScattering;
SamplerState BasePass_FogISR_IntegratedLightScatteringSampler;
/*atic const struct
{
struct {
	uint NumLocalLights;
	uint NumReflectionCaptures;
	uint HasDirectionalLight;
	uint NumGridCells;
	int3 CulledGridSize;
	uint MaxCulledLightsPerCell;
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	float3 DirectionalLightDirection;
	float3 DirectionalLightColor;
	float DirectionalLightVolumetricScatteringIntensity;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	uint NumDirectionalLightCascades;
	int DirectionalLightVSM;
	float4 CascadeEndDepths;
	float4x4 DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 DirectionalLightShadowmapMinMax[4];
	float4 DirectionalLightShadowmapAtlasBufferSize;
	float DirectionalLightDepthBias;
	uint DirectionalLightUseStaticShadowing;
	uint SimpleLightsEndIndex;
	uint ClusteredDeferredSupportedEndIndex;
	float4 DirectionalLightStaticShadowBufferSize;
	float4x4 DirectionalLightTranslatedWorldToStaticShadow;
	uint DirectLightingShowFlag;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
	Texture2D DummyRectLightSourceTexture;
} Forward;
struct {
	uint NumLocalLights;
	uint NumReflectionCaptures;
	uint HasDirectionalLight;
	uint NumGridCells;
	int3 CulledGridSize;
	uint MaxCulledLightsPerCell;
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	float3 DirectionalLightDirection;
	float3 DirectionalLightColor;
	float DirectionalLightVolumetricScatteringIntensity;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	uint NumDirectionalLightCascades;
	int DirectionalLightVSM;
	float4 CascadeEndDepths;
	float4x4 DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 DirectionalLightShadowmapMinMax[4];
	float4 DirectionalLightShadowmapAtlasBufferSize;
	float DirectionalLightDepthBias;
	uint DirectionalLightUseStaticShadowing;
	uint SimpleLightsEndIndex;
	uint ClusteredDeferredSupportedEndIndex;
	float4 DirectionalLightStaticShadowBufferSize;
	float4x4 DirectionalLightTranslatedWorldToStaticShadow;
	uint DirectLightingShowFlag;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
	Texture2D DummyRectLightSourceTexture;
} ForwardISR;
struct {
	float4 SkyLightParameters;
	float SkyLightCubemapBrightness;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} Reflection;
struct {
	float4 ReflectionPlane;
	float4 PlanarReflectionOrigin;
	float4 PlanarReflectionXAxis;
	float4 PlanarReflectionYAxis;
	float3x4 InverseTransposeMirrorMatrix;
	float3 PlanarReflectionParameters;
	float2 PlanarReflectionParameters2;
	float4x4 ProjectionWithExtraFOV[2];
	float4 PlanarReflectionScreenScaleBias[2];
	float2 PlanarReflectionScreenBound;
	uint bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflection;
struct {
	float4 ExponentialFogParameters;
	float4 ExponentialFogParameters2;
	float4 ExponentialFogColorParameter;
	float4 ExponentialFogParameters3;
	float4 InscatteringLightDirection;
	float4 DirectionalInscatteringColor;
	float2 SinCosInscatteringColorCubemapRotation;
	float3 FogInscatteringTextureParameters;
	float ApplyVolumetricFog;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} Fog;
struct {
	float4 ExponentialFogParameters;
	float4 ExponentialFogParameters2;
	float4 ExponentialFogColorParameter;
	float4 ExponentialFogParameters3;
	float4 InscatteringLightDirection;
	float4 DirectionalInscatteringColor;
	float2 SinCosInscatteringColorCubemapRotation;
	float3 FogInscatteringTextureParameters;
	float ApplyVolumetricFog;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} FogISR;
	uint UseBasePassSkylight;
} BasePass = {{BasePass_Forward_NumLocalLights,BasePass_Forward_NumReflectionCaptures,BasePass_Forward_HasDirectionalLight,BasePass_Forward_NumGridCells,BasePass_Forward_CulledGridSize,BasePass_Forward_MaxCulledLightsPerCell,BasePass_Forward_LightGridPixelSizeShift,BasePass_Forward_LightGridZParams,BasePass_Forward_DirectionalLightDirection,BasePass_Forward_DirectionalLightColor,BasePass_Forward_DirectionalLightVolumetricScatteringIntensity,BasePass_Forward_DirectionalLightShadowMapChannelMask,BasePass_Forward_DirectionalLightDistanceFadeMAD,BasePass_Forward_NumDirectionalLightCascades,BasePass_Forward_DirectionalLightVSM,BasePass_Forward_CascadeEndDepths,BasePass_Forward_DirectionalLightTranslatedWorldToShadowMatrix,BasePass_Forward_DirectionalLightShadowmapMinMax,BasePass_Forward_DirectionalLightShadowmapAtlasBufferSize,BasePass_Forward_DirectionalLightDepthBias,BasePass_Forward_DirectionalLightUseStaticShadowing,BasePass_Forward_SimpleLightsEndIndex,BasePass_Forward_ClusteredDeferredSupportedEndIndex,BasePass_Forward_DirectionalLightStaticShadowBufferSize,BasePass_Forward_DirectionalLightTranslatedWorldToStaticShadow,BasePass_Forward_DirectLightingShowFlag,BasePass_Forward_DirectionalLightShadowmapAtlas,BasePass_Forward_ShadowmapSampler,BasePass_Forward_DirectionalLightStaticShadowmap,BasePass_Forward_StaticShadowmapSampler,BasePass_Forward_ForwardLocalLightBuffer,BasePass_Forward_NumCulledLightsGrid,BasePass_Forward_CulledLightDataGrid,BasePass_Forward_DummyRectLightSourceTexture,},{BasePass_ForwardISR_NumLocalLights,BasePass_ForwardISR_NumReflectionCaptures,BasePass_ForwardISR_HasDirectionalLight,BasePass_ForwardISR_NumGridCells,BasePass_ForwardISR_CulledGridSize,BasePass_ForwardISR_MaxCulledLightsPerCell,BasePass_ForwardISR_LightGridPixelSizeShift,BasePass_ForwardISR_LightGridZParams,BasePass_ForwardISR_DirectionalLightDirection,BasePass_ForwardISR_DirectionalLightColor,BasePass_ForwardISR_DirectionalLightVolumetricScatteringIntensity,BasePass_ForwardISR_DirectionalLightShadowMapChannelMask,BasePass_ForwardISR_DirectionalLightDistanceFadeMAD,BasePass_ForwardISR_NumDirectionalLightCascades,BasePass_ForwardISR_DirectionalLightVSM,BasePass_ForwardISR_CascadeEndDepths,BasePass_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix,BasePass_ForwardISR_DirectionalLightShadowmapMinMax,BasePass_ForwardISR_DirectionalLightShadowmapAtlasBufferSize,BasePass_ForwardISR_DirectionalLightDepthBias,BasePass_ForwardISR_DirectionalLightUseStaticShadowing,BasePass_ForwardISR_SimpleLightsEndIndex,BasePass_ForwardISR_ClusteredDeferredSupportedEndIndex,BasePass_ForwardISR_DirectionalLightStaticShadowBufferSize,BasePass_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow,BasePass_ForwardISR_DirectLightingShowFlag,BasePass_ForwardISR_DirectionalLightShadowmapAtlas,BasePass_ForwardISR_ShadowmapSampler,BasePass_ForwardISR_DirectionalLightStaticShadowmap,BasePass_ForwardISR_StaticShadowmapSampler,BasePass_ForwardISR_ForwardLocalLightBuffer,BasePass_ForwardISR_NumCulledLightsGrid,BasePass_ForwardISR_CulledLightDataGrid,BasePass_ForwardISR_DummyRectLightSourceTexture,},{BasePass_Reflection_SkyLightParameters,BasePass_Reflection_SkyLightCubemapBrightness,BasePass_Reflection_SkyLightCubemap,BasePass_Reflection_SkyLightCubemapSampler,BasePass_Reflection_SkyLightBlendDestinationCubemap,BasePass_Reflection_SkyLightBlendDestinationCubemapSampler,BasePass_Reflection_ReflectionCubemap,BasePass_Reflection_ReflectionCubemapSampler,BasePass_Reflection_PreIntegratedGF,BasePass_Reflection_PreIntegratedGFSampler,},{BasePass_PlanarReflection_ReflectionPlane,BasePass_PlanarReflection_PlanarReflectionOrigin,BasePass_PlanarReflection_PlanarReflectionXAxis,BasePass_PlanarReflection_PlanarReflectionYAxis,BasePass_PlanarReflection_InverseTransposeMirrorMatrix,BasePass_PlanarReflection_PlanarReflectionParameters,BasePass_PlanarReflection_PlanarReflectionParameters2,BasePass_PlanarReflection_ProjectionWithExtraFOV,BasePass_PlanarReflection_PlanarReflectionScreenScaleBias,BasePass_PlanarReflection_PlanarReflectionScreenBound,BasePass_PlanarReflection_bIsStereo,BasePass_PlanarReflection_PlanarReflectionTexture,BasePass_PlanarReflection_PlanarReflectionSampler,},{BasePass_Fog_ExponentialFogParameters,BasePass_Fog_ExponentialFogParameters2,BasePass_Fog_ExponentialFogColorParameter,BasePass_Fog_ExponentialFogParameters3,BasePass_Fog_InscatteringLightDirection,BasePass_Fog_DirectionalInscatteringColor,BasePass_Fog_SinCosInscatteringColorCubemapRotation,BasePass_Fog_FogInscatteringTextureParameters,BasePass_Fog_ApplyVolumetricFog,BasePass_Fog_FogInscatteringColorCubemap,BasePass_Fog_FogInscatteringColorSampler,BasePass_Fog_IntegratedLightScattering,BasePass_Fog_IntegratedLightScatteringSampler,},{BasePass_FogISR_ExponentialFogParameters,BasePass_FogISR_ExponentialFogParameters2,BasePass_FogISR_ExponentialFogColorParameter,BasePass_FogISR_ExponentialFogParameters3,BasePass_FogISR_InscatteringLightDirection,BasePass_FogISR_DirectionalInscatteringColor,BasePass_FogISR_SinCosInscatteringColorCubemapRotation,BasePass_FogISR_FogInscatteringTextureParameters,BasePass_FogISR_ApplyVolumetricFog,BasePass_FogISR_FogInscatteringColorCubemap,BasePass_FogISR_FogInscatteringColorSampler,BasePass_FogISR_IntegratedLightScattering,BasePass_FogISR_IntegratedLightScatteringSampler,},BasePass_UseBasePassSkylight,*/
#line 15 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Primitive.ush"


cbuffer Primitive
{
	uint Primitive_Flags;
	uint Primitive_InstanceSceneDataOffset;
	uint Primitive_NumInstanceSceneDataEntries;
	int Primitive_SingleCaptureIndex;
	float3 Primitive_TilePosition;
	uint Primitive_PrimitiveComponentId;
	float4x4 Primitive_LocalToRelativeWorld;
	float4x4 Primitive_RelativeWorldToLocal;
	float4x4 Primitive_PreviousLocalToRelativeWorld;
	float4x4 Primitive_PreviousRelativeWorldToLocal;
	float3 Primitive_InvNonUniformScale;
	float Primitive_ObjectBoundsX;
	float4 Primitive_ObjectRelativeWorldPositionAndRadius;
	float3 Primitive_ActorRelativeWorldPosition;
	uint Primitive_LightmapUVIndex;
	float3 Primitive_ObjectOrientation;
	uint Primitive_LightmapDataIndex;
	float4 Primitive_NonUniformScale;
	float3 Primitive_PreSkinnedLocalBoundsMin;
	uint Primitive_NaniteResourceID;
	float3 Primitive_PreSkinnedLocalBoundsMax;
	uint Primitive_NaniteHierarchyOffset;
	float3 Primitive_LocalObjectBoundsMin;
	float Primitive_ObjectBoundsY;
	float3 Primitive_LocalObjectBoundsMax;
	float Primitive_ObjectBoundsZ;
	float3 Primitive_InstanceLocalBoundsCenter;
	uint Primitive_InstancePayloadDataOffset;
	float3 Primitive_InstanceLocalBoundsExtent;
	uint Primitive_InstancePayloadDataStride;
	float3 Primitive_WireframeColor;
	uint Primitive_NaniteImposterIndex;
	float3 Primitive_LevelColor;
	int Primitive_PersistentPrimitiveIndex;
	float4 Primitive_CustomPrimitiveData[9];
}
/*atic const struct
{
	uint Flags;
	uint InstanceSceneDataOffset;
	uint NumInstanceSceneDataEntries;
	int SingleCaptureIndex;
	float3 TilePosition;
	uint PrimitiveComponentId;
	float4x4 LocalToRelativeWorld;
	float4x4 RelativeWorldToLocal;
	float4x4 PreviousLocalToRelativeWorld;
	float4x4 PreviousRelativeWorldToLocal;
	float3 InvNonUniformScale;
	float ObjectBoundsX;
	float4 ObjectRelativeWorldPositionAndRadius;
	float3 ActorRelativeWorldPosition;
	uint LightmapUVIndex;
	float3 ObjectOrientation;
	uint LightmapDataIndex;
	float4 NonUniformScale;
	float3 PreSkinnedLocalBoundsMin;
	uint NaniteResourceID;
	float3 PreSkinnedLocalBoundsMax;
	uint NaniteHierarchyOffset;
	float3 LocalObjectBoundsMin;
	float ObjectBoundsY;
	float3 LocalObjectBoundsMax;
	float ObjectBoundsZ;
	float3 InstanceLocalBoundsCenter;
	uint InstancePayloadDataOffset;
	float3 InstanceLocalBoundsExtent;
	uint InstancePayloadDataStride;
	float3 WireframeColor;
	uint NaniteImposterIndex;
	float3 LevelColor;
	int PersistentPrimitiveIndex;
	float4 CustomPrimitiveData[9];
} Primitive = {Primitive_Flags,Primitive_InstanceSceneDataOffset,Primitive_NumInstanceSceneDataEntries,Primitive_SingleCaptureIndex,Primitive_TilePosition,Primitive_PrimitiveComponentId,Primitive_LocalToRelativeWorld,Primitive_RelativeWorldToLocal,Primitive_PreviousLocalToRelativeWorld,Primitive_PreviousRelativeWorldToLocal,Primitive_InvNonUniformScale,Primitive_ObjectBoundsX,Primitive_ObjectRelativeWorldPositionAndRadius,Primitive_ActorRelativeWorldPosition,Primitive_LightmapUVIndex,Primitive_ObjectOrientation,Primitive_LightmapDataIndex,Primitive_NonUniformScale,Primitive_PreSkinnedLocalBoundsMin,Primitive_NaniteResourceID,Primitive_PreSkinnedLocalBoundsMax,Primitive_NaniteHierarchyOffset,Primitive_LocalObjectBoundsMin,Primitive_ObjectBoundsY,Primitive_LocalObjectBoundsMax,Primitive_ObjectBoundsZ,Primitive_InstanceLocalBoundsCenter,Primitive_InstancePayloadDataOffset,Primitive_InstanceLocalBoundsExtent,Primitive_InstancePayloadDataStride,Primitive_WireframeColor,Primitive_NaniteImposterIndex,Primitive_LevelColor,Primitive_PersistentPrimitiveIndex,Primitive_CustomPrimitiveData,*/
#line 16 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstanceCulling.ush"


cbuffer InstanceCulling
{
	float PrePadding_InstanceCulling_0;
	float PrePadding_InstanceCulling_4;
	float PrePadding_InstanceCulling_8;
	float PrePadding_InstanceCulling_12;
	uint InstanceCulling_BufferCapacity;
}
StructuredBuffer<uint> InstanceCulling_InstanceIdsBuffer;
StructuredBuffer<uint> InstanceCulling_PageInfoBuffer;
/*atic const struct
{
	uint BufferCapacity;
	StructuredBuffer<uint> InstanceIdsBuffer;
	StructuredBuffer<uint> PageInfoBuffer;
} InstanceCulling = {InstanceCulling_BufferCapacity,InstanceCulling_InstanceIdsBuffer,InstanceCulling_PageInfoBuffer,*/
#line 17 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/HairCardsVF.ush"


cbuffer HairCardsVF
{
	uint HairCardsVF_Flags;
	uint HairCardsVF_MaxVertexCount;
}
Buffer<float4> HairCardsVF_PositionBuffer;
Buffer<float4> HairCardsVF_PreviousPositionBuffer;
Buffer<float4> HairCardsVF_NormalsBuffer;
Buffer<float4> HairCardsVF_UVsBuffer;
Buffer<float4> HairCardsVF_MaterialsBuffer;
Texture2D<float4> HairCardsVF_DepthTexture;
SamplerState HairCardsVF_DepthSampler;
Texture2D<float4> HairCardsVF_TangentTexture;
SamplerState HairCardsVF_TangentSampler;
Texture2D<float4> HairCardsVF_CoverageTexture;
SamplerState HairCardsVF_CoverageSampler;
Texture2D<float4> HairCardsVF_AttributeTexture;
SamplerState HairCardsVF_AttributeSampler;
Texture2D<float4> HairCardsVF_AuxilaryDataTexture;
SamplerState HairCardsVF_AuxilaryDataSampler;
Texture2D<float4> HairCardsVF_MaterialTexture;
SamplerState HairCardsVF_MaterialSampler;
/*atic const struct
{
	uint Flags;
	uint MaxVertexCount;
	Buffer<float4> PositionBuffer;
	Buffer<float4> PreviousPositionBuffer;
	Buffer<float4> NormalsBuffer;
	Buffer<float4> UVsBuffer;
	Buffer<float4> MaterialsBuffer;
	Texture2D<float4> DepthTexture;
	SamplerState DepthSampler;
	Texture2D<float4> TangentTexture;
	SamplerState TangentSampler;
	Texture2D<float4> CoverageTexture;
	SamplerState CoverageSampler;
	Texture2D<float4> AttributeTexture;
	SamplerState AttributeSampler;
	Texture2D<float4> AuxilaryDataTexture;
	SamplerState AuxilaryDataSampler;
	Texture2D<float4> MaterialTexture;
	SamplerState MaterialSampler;
} HairCardsVF = {HairCardsVF_Flags,HairCardsVF_MaxVertexCount,  HairCardsVF_PositionBuffer,   HairCardsVF_PreviousPositionBuffer,   HairCardsVF_NormalsBuffer,   HairCardsVF_UVsBuffer,   HairCardsVF_MaterialsBuffer,  HairCardsVF_DepthTexture,HairCardsVF_DepthSampler,HairCardsVF_TangentTexture,HairCardsVF_TangentSampler,HairCardsVF_CoverageTexture,HairCardsVF_CoverageSampler,HairCardsVF_AttributeTexture,HairCardsVF_AttributeSampler,HairCardsVF_AuxilaryDataTexture,HairCardsVF_AuxilaryDataSampler,HairCardsVF_MaterialTexture,HairCardsVF_MaterialSampler,*/
#line 18 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/HairStrandsVF.ush"


cbuffer HairStrandsVF
{
	float HairStrandsVF_Radius;
	float HairStrandsVF_RootScale;
	float HairStrandsVF_TipScale;
	float HairStrandsVF_Length;
	float HairStrandsVF_Density;
	float HairStrandsVF_RaytracingRadiusScale;
	uint HairStrandsVF_CullingEnable;
	uint HairStrandsVF_HasMaterial;
	uint HairStrandsVF_StableRasterization;
	uint HairStrandsVF_ScatterSceneLighing;
	uint HairStrandsVF_RaytracingProceduralSplits;
	float HairStrandsVF_GroupIndex;
}
Buffer<float4> HairStrandsVF_PositionOffsetBuffer;
Buffer<float4> HairStrandsVF_PreviousPositionOffsetBuffer;
Buffer<uint4> HairStrandsVF_PositionBuffer;
Buffer<uint4> HairStrandsVF_PreviousPositionBuffer;
Buffer<float2> HairStrandsVF_Attribute0Buffer;
Buffer<uint> HairStrandsVF_Attribute1Buffer;
Buffer<float4> HairStrandsVF_MaterialBuffer;
Buffer<float4> HairStrandsVF_TangentBuffer;
Buffer<uint> HairStrandsVF_CulledVertexIdsBuffer;
Buffer<float> HairStrandsVF_CulledVertexRadiusScaleBuffer;
/*atic const struct
{
	float Radius;
	float RootScale;
	float TipScale;
	float Length;
	float Density;
	float RaytracingRadiusScale;
	uint CullingEnable;
	uint HasMaterial;
	uint StableRasterization;
	uint ScatterSceneLighing;
	uint RaytracingProceduralSplits;
	float GroupIndex;
	Buffer<float4> PositionOffsetBuffer;
	Buffer<float4> PreviousPositionOffsetBuffer;
	Buffer<uint4> PositionBuffer;
	Buffer<uint4> PreviousPositionBuffer;
	Buffer<float2> Attribute0Buffer;
	Buffer<uint> Attribute1Buffer;
	Buffer<float4> MaterialBuffer;
	Buffer<float4> TangentBuffer;
	Buffer<uint> CulledVertexIdsBuffer;
	Buffer<float> CulledVertexRadiusScaleBuffer;
} HairStrandsVF = {HairStrandsVF_Radius,HairStrandsVF_RootScale,HairStrandsVF_TipScale,HairStrandsVF_Length,HairStrandsVF_Density,HairStrandsVF_RaytracingRadiusScale,HairStrandsVF_CullingEnable,HairStrandsVF_HasMaterial,HairStrandsVF_StableRasterization,HairStrandsVF_ScatterSceneLighing,HairStrandsVF_RaytracingProceduralSplits,HairStrandsVF_GroupIndex,  HairStrandsVF_PositionOffsetBuffer,   HairStrandsVF_PreviousPositionOffsetBuffer,   HairStrandsVF_PositionBuffer,   HairStrandsVF_PreviousPositionBuffer,   HairStrandsVF_Attribute0Buffer,   HairStrandsVF_Attribute1Buffer,   HairStrandsVF_MaterialBuffer,   HairStrandsVF_TangentBuffer,   HairStrandsVF_CulledVertexIdsBuffer,   HairStrandsVF_CulledVertexRadiusScaleBuffer,  */
#line 19 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/SpeedTreeData.ush"


cbuffer SpeedTreeData
{
	float4 SpeedTreeData_WindVector;
	float4 SpeedTreeData_WindGlobal;
	float4 SpeedTreeData_WindBranch;
	float4 SpeedTreeData_WindBranchTwitch;
	float4 SpeedTreeData_WindBranchWhip;
	float4 SpeedTreeData_WindBranchAnchor;
	float4 SpeedTreeData_WindBranchAdherences;
	float4 SpeedTreeData_WindTurbulences;
	float4 SpeedTreeData_WindLeaf1Ripple;
	float4 SpeedTreeData_WindLeaf1Tumble;
	float4 SpeedTreeData_WindLeaf1Twitch;
	float4 SpeedTreeData_WindLeaf2Ripple;
	float4 SpeedTreeData_WindLeaf2Tumble;
	float4 SpeedTreeData_WindLeaf2Twitch;
	float4 SpeedTreeData_WindFrondRipple;
	float4 SpeedTreeData_WindRollingBranch;
	float4 SpeedTreeData_WindRollingLeafAndDirection;
	float4 SpeedTreeData_WindRollingNoise;
	float4 SpeedTreeData_WindAnimation;
	float4 SpeedTreeData_PrevWindVector;
	float4 SpeedTreeData_PrevWindGlobal;
	float4 SpeedTreeData_PrevWindBranch;
	float4 SpeedTreeData_PrevWindBranchTwitch;
	float4 SpeedTreeData_PrevWindBranchWhip;
	float4 SpeedTreeData_PrevWindBranchAnchor;
	float4 SpeedTreeData_PrevWindBranchAdherences;
	float4 SpeedTreeData_PrevWindTurbulences;
	float4 SpeedTreeData_PrevWindLeaf1Ripple;
	float4 SpeedTreeData_PrevWindLeaf1Tumble;
	float4 SpeedTreeData_PrevWindLeaf1Twitch;
	float4 SpeedTreeData_PrevWindLeaf2Ripple;
	float4 SpeedTreeData_PrevWindLeaf2Tumble;
	float4 SpeedTreeData_PrevWindLeaf2Twitch;
	float4 SpeedTreeData_PrevWindFrondRipple;
	float4 SpeedTreeData_PrevWindRollingBranch;
	float4 SpeedTreeData_PrevWindRollingLeafAndDirection;
	float4 SpeedTreeData_PrevWindRollingNoise;
	float4 SpeedTreeData_PrevWindAnimation;
}
/*atic const struct
{
	float4 WindVector;
	float4 WindGlobal;
	float4 WindBranch;
	float4 WindBranchTwitch;
	float4 WindBranchWhip;
	float4 WindBranchAnchor;
	float4 WindBranchAdherences;
	float4 WindTurbulences;
	float4 WindLeaf1Ripple;
	float4 WindLeaf1Tumble;
	float4 WindLeaf1Twitch;
	float4 WindLeaf2Ripple;
	float4 WindLeaf2Tumble;
	float4 WindLeaf2Twitch;
	float4 WindFrondRipple;
	float4 WindRollingBranch;
	float4 WindRollingLeafAndDirection;
	float4 WindRollingNoise;
	float4 WindAnimation;
	float4 PrevWindVector;
	float4 PrevWindGlobal;
	float4 PrevWindBranch;
	float4 PrevWindBranchTwitch;
	float4 PrevWindBranchWhip;
	float4 PrevWindBranchAnchor;
	float4 PrevWindBranchAdherences;
	float4 PrevWindTurbulences;
	float4 PrevWindLeaf1Ripple;
	float4 PrevWindLeaf1Tumble;
	float4 PrevWindLeaf1Twitch;
	float4 PrevWindLeaf2Ripple;
	float4 PrevWindLeaf2Tumble;
	float4 PrevWindLeaf2Twitch;
	float4 PrevWindFrondRipple;
	float4 PrevWindRollingBranch;
	float4 PrevWindRollingLeafAndDirection;
	float4 PrevWindRollingNoise;
	float4 PrevWindAnimation;
} SpeedTreeData = {SpeedTreeData_WindVector,SpeedTreeData_WindGlobal,SpeedTreeData_WindBranch,SpeedTreeData_WindBranchTwitch,SpeedTreeData_WindBranchWhip,SpeedTreeData_WindBranchAnchor,SpeedTreeData_WindBranchAdherences,SpeedTreeData_WindTurbulences,SpeedTreeData_WindLeaf1Ripple,SpeedTreeData_WindLeaf1Tumble,SpeedTreeData_WindLeaf1Twitch,SpeedTreeData_WindLeaf2Ripple,SpeedTreeData_WindLeaf2Tumble,SpeedTreeData_WindLeaf2Twitch,SpeedTreeData_WindFrondRipple,SpeedTreeData_WindRollingBranch,SpeedTreeData_WindRollingLeafAndDirection,SpeedTreeData_WindRollingNoise,SpeedTreeData_WindAnimation,SpeedTreeData_PrevWindVector,SpeedTreeData_PrevWindGlobal,SpeedTreeData_PrevWindBranch,SpeedTreeData_PrevWindBranchTwitch,SpeedTreeData_PrevWindBranchWhip,SpeedTreeData_PrevWindBranchAnchor,SpeedTreeData_PrevWindBranchAdherences,SpeedTreeData_PrevWindTurbulences,SpeedTreeData_PrevWindLeaf1Ripple,SpeedTreeData_PrevWindLeaf1Tumble,SpeedTreeData_PrevWindLeaf1Twitch,SpeedTreeData_PrevWindLeaf2Ripple,SpeedTreeData_PrevWindLeaf2Tumble,SpeedTreeData_PrevWindLeaf2Twitch,SpeedTreeData_PrevWindFrondRipple,SpeedTreeData_PrevWindRollingBranch,SpeedTreeData_PrevWindRollingLeafAndDirection,SpeedTreeData_PrevWindRollingNoise,SpeedTreeData_PrevWindAnimation,*/
#line 20 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Atmosphere.ush"


cbuffer Atmosphere
{
	float Atmosphere_MultiScatteringFactor;
	float Atmosphere_BottomRadiusKm;
	float Atmosphere_TopRadiusKm;
	float Atmosphere_RayleighDensityExpScale;
	float4 Atmosphere_RayleighScattering;
	float4 Atmosphere_MieScattering;
	float Atmosphere_MieDensityExpScale;
	float PrePadding_Atmosphere_52;
	float PrePadding_Atmosphere_56;
	float PrePadding_Atmosphere_60;
	float4 Atmosphere_MieExtinction;
	float Atmosphere_MiePhaseG;
	float PrePadding_Atmosphere_84;
	float PrePadding_Atmosphere_88;
	float PrePadding_Atmosphere_92;
	float4 Atmosphere_MieAbsorption;
	float Atmosphere_AbsorptionDensity0LayerWidth;
	float Atmosphere_AbsorptionDensity0ConstantTerm;
	float Atmosphere_AbsorptionDensity0LinearTerm;
	float Atmosphere_AbsorptionDensity1ConstantTerm;
	float Atmosphere_AbsorptionDensity1LinearTerm;
	float PrePadding_Atmosphere_132;
	float PrePadding_Atmosphere_136;
	float PrePadding_Atmosphere_140;
	float4 Atmosphere_AbsorptionExtinction;
	float4 Atmosphere_GroundAlbedo;
}
/*atic const struct
{
	float MultiScatteringFactor;
	float BottomRadiusKm;
	float TopRadiusKm;
	float RayleighDensityExpScale;
	float4 RayleighScattering;
	float4 MieScattering;
	float MieDensityExpScale;
	float4 MieExtinction;
	float MiePhaseG;
	float4 MieAbsorption;
	float AbsorptionDensity0LayerWidth;
	float AbsorptionDensity0ConstantTerm;
	float AbsorptionDensity0LinearTerm;
	float AbsorptionDensity1ConstantTerm;
	float AbsorptionDensity1LinearTerm;
	float4 AbsorptionExtinction;
	float4 GroundAlbedo;
} Atmosphere = {Atmosphere_MultiScatteringFactor,Atmosphere_BottomRadiusKm,Atmosphere_TopRadiusKm,Atmosphere_RayleighDensityExpScale,Atmosphere_RayleighScattering,Atmosphere_MieScattering,Atmosphere_MieDensityExpScale,Atmosphere_MieExtinction,Atmosphere_MiePhaseG,Atmosphere_MieAbsorption,Atmosphere_AbsorptionDensity0LayerWidth,Atmosphere_AbsorptionDensity0ConstantTerm,Atmosphere_AbsorptionDensity0LinearTerm,Atmosphere_AbsorptionDensity1ConstantTerm,Atmosphere_AbsorptionDensity1LinearTerm,Atmosphere_AbsorptionExtinction,Atmosphere_GroundAlbedo,*/
#line 21 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/TranslucentBasePass.ush"


cbuffer TranslucentBasePass
{
	uint TranslucentBasePass_Shared_Forward_NumLocalLights;
	uint TranslucentBasePass_Shared_Forward_NumReflectionCaptures;
	uint TranslucentBasePass_Shared_Forward_HasDirectionalLight;
	uint TranslucentBasePass_Shared_Forward_NumGridCells;
	int3 TranslucentBasePass_Shared_Forward_CulledGridSize;
	uint TranslucentBasePass_Shared_Forward_MaxCulledLightsPerCell;
	uint TranslucentBasePass_Shared_Forward_LightGridPixelSizeShift;
	uint PrePadding_TranslucentBasePass_Shared_Forward_36;
	uint PrePadding_TranslucentBasePass_Shared_Forward_40;
	uint PrePadding_TranslucentBasePass_Shared_Forward_44;
	float3 TranslucentBasePass_Shared_Forward_LightGridZParams;
	float PrePadding_TranslucentBasePass_Shared_Forward_60;
	float3 TranslucentBasePass_Shared_Forward_DirectionalLightDirection;
	float PrePadding_TranslucentBasePass_Shared_Forward_76;
	float3 TranslucentBasePass_Shared_Forward_DirectionalLightColor;
	float TranslucentBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity;
	uint TranslucentBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask;
	uint PrePadding_TranslucentBasePass_Shared_Forward_100;
	float2 TranslucentBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD;
	uint TranslucentBasePass_Shared_Forward_NumDirectionalLightCascades;
	int TranslucentBasePass_Shared_Forward_DirectionalLightVSM;
	int PrePadding_TranslucentBasePass_Shared_Forward_120;
	int PrePadding_TranslucentBasePass_Shared_Forward_124;
	float4 TranslucentBasePass_Shared_Forward_CascadeEndDepths;
	float4x4 TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapMinMax[4];
	float4 TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize;
	float TranslucentBasePass_Shared_Forward_DirectionalLightDepthBias;
	uint TranslucentBasePass_Shared_Forward_DirectionalLightUseStaticShadowing;
	uint TranslucentBasePass_Shared_Forward_SimpleLightsEndIndex;
	uint TranslucentBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex;
	float4 TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize;
	float4x4 TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow;
	uint TranslucentBasePass_Shared_Forward_DirectLightingShowFlag;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_580;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_584;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_588;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_592;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_596;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_600;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_604;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_608;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_612;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_616;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_620;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_624;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_628;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_632;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_636;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_640;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_644;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_648;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_652;
	uint TranslucentBasePass_Shared_ForwardISR_NumLocalLights;
	uint TranslucentBasePass_Shared_ForwardISR_NumReflectionCaptures;
	uint TranslucentBasePass_Shared_ForwardISR_HasDirectionalLight;
	uint TranslucentBasePass_Shared_ForwardISR_NumGridCells;
	int3 TranslucentBasePass_Shared_ForwardISR_CulledGridSize;
	uint TranslucentBasePass_Shared_ForwardISR_MaxCulledLightsPerCell;
	uint TranslucentBasePass_Shared_ForwardISR_LightGridPixelSizeShift;
	uint PrePadding_TranslucentBasePass_Shared_ForwardISR_692;
	uint PrePadding_TranslucentBasePass_Shared_ForwardISR_696;
	uint PrePadding_TranslucentBasePass_Shared_ForwardISR_700;
	float3 TranslucentBasePass_Shared_ForwardISR_LightGridZParams;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_716;
	float3 TranslucentBasePass_Shared_ForwardISR_DirectionalLightDirection;
	float PrePadding_TranslucentBasePass_Shared_ForwardISR_732;
	float3 TranslucentBasePass_Shared_ForwardISR_DirectionalLightColor;
	float TranslucentBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity;
	uint TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask;
	uint PrePadding_TranslucentBasePass_Shared_ForwardISR_756;
	float2 TranslucentBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD;
	uint TranslucentBasePass_Shared_ForwardISR_NumDirectionalLightCascades;
	int TranslucentBasePass_Shared_ForwardISR_DirectionalLightVSM;
	int PrePadding_TranslucentBasePass_Shared_ForwardISR_776;
	int PrePadding_TranslucentBasePass_Shared_ForwardISR_780;
	float4 TranslucentBasePass_Shared_ForwardISR_CascadeEndDepths;
	float4x4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax[4];
	float4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize;
	float TranslucentBasePass_Shared_ForwardISR_DirectionalLightDepthBias;
	uint TranslucentBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing;
	uint TranslucentBasePass_Shared_ForwardISR_SimpleLightsEndIndex;
	uint TranslucentBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex;
	float4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize;
	float4x4 TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow;
	uint TranslucentBasePass_Shared_ForwardISR_DirectLightingShowFlag;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1236;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1240;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1244;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1248;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1252;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1256;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1260;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1264;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1268;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1272;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1276;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1280;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1284;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1288;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1292;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1296;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1300;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1304;
	float PrePadding_TranslucentBasePass_Shared_Reflection_1308;
	float4 TranslucentBasePass_Shared_Reflection_SkyLightParameters;
	float TranslucentBasePass_Shared_Reflection_SkyLightCubemapBrightness;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1332;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1336;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1340;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1344;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1348;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1352;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1356;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1360;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1364;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1368;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1372;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1376;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1380;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1384;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1388;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1392;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1396;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1400;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1404;
	float4 TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane;
	float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionOrigin;
	float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis;
	float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis;
	float3x4 TranslucentBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix;
	float3 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1532;
	float2 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1544;
	float PrePadding_TranslucentBasePass_Shared_PlanarReflection_1548;
	float4x4 TranslucentBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV[2];
	float4 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias[2];
	float2 TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound;
	uint TranslucentBasePass_Shared_PlanarReflection_bIsStereo;
	float PrePadding_TranslucentBasePass_Shared_Fog_1724;
	float PrePadding_TranslucentBasePass_Shared_Fog_1728;
	float PrePadding_TranslucentBasePass_Shared_Fog_1732;
	float PrePadding_TranslucentBasePass_Shared_Fog_1736;
	float PrePadding_TranslucentBasePass_Shared_Fog_1740;
	float4 TranslucentBasePass_Shared_Fog_ExponentialFogParameters;
	float4 TranslucentBasePass_Shared_Fog_ExponentialFogParameters2;
	float4 TranslucentBasePass_Shared_Fog_ExponentialFogColorParameter;
	float4 TranslucentBasePass_Shared_Fog_ExponentialFogParameters3;
	float4 TranslucentBasePass_Shared_Fog_InscatteringLightDirection;
	float4 TranslucentBasePass_Shared_Fog_DirectionalInscatteringColor;
	float2 TranslucentBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation;
	float PrePadding_TranslucentBasePass_Shared_Fog_1848;
	float PrePadding_TranslucentBasePass_Shared_Fog_1852;
	float3 TranslucentBasePass_Shared_Fog_FogInscatteringTextureParameters;
	float TranslucentBasePass_Shared_Fog_ApplyVolumetricFog;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1872;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1876;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1880;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1884;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1888;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1892;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1896;
	float PrePadding_TranslucentBasePass_Shared_FogISR_1900;
	float4 TranslucentBasePass_Shared_FogISR_ExponentialFogParameters;
	float4 TranslucentBasePass_Shared_FogISR_ExponentialFogParameters2;
	float4 TranslucentBasePass_Shared_FogISR_ExponentialFogColorParameter;
	float4 TranslucentBasePass_Shared_FogISR_ExponentialFogParameters3;
	float4 TranslucentBasePass_Shared_FogISR_InscatteringLightDirection;
	float4 TranslucentBasePass_Shared_FogISR_DirectionalInscatteringColor;
	float2 TranslucentBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation;
	float PrePadding_TranslucentBasePass_Shared_FogISR_2008;
	float PrePadding_TranslucentBasePass_Shared_FogISR_2012;
	float3 TranslucentBasePass_Shared_FogISR_FogInscatteringTextureParameters;
	float TranslucentBasePass_Shared_FogISR_ApplyVolumetricFog;
	float PrePadding_TranslucentBasePass_Shared_2032;
	float PrePadding_TranslucentBasePass_Shared_2036;
	float PrePadding_TranslucentBasePass_Shared_2040;
	float PrePadding_TranslucentBasePass_Shared_2044;
	float PrePadding_TranslucentBasePass_Shared_2048;
	float PrePadding_TranslucentBasePass_Shared_2052;
	float PrePadding_TranslucentBasePass_Shared_2056;
	float PrePadding_TranslucentBasePass_Shared_2060;
	uint TranslucentBasePass_Shared_UseBasePassSkylight;
	float PrePadding_TranslucentBasePass_Strata_2068;
	float PrePadding_TranslucentBasePass_Strata_2072;
	float PrePadding_TranslucentBasePass_Strata_2076;
	float PrePadding_TranslucentBasePass_Strata_2080;
	float PrePadding_TranslucentBasePass_Strata_2084;
	float PrePadding_TranslucentBasePass_Strata_2088;
	float PrePadding_TranslucentBasePass_Strata_2092;
	float PrePadding_TranslucentBasePass_Strata_2096;
	float PrePadding_TranslucentBasePass_Strata_2100;
	float PrePadding_TranslucentBasePass_Strata_2104;
	float PrePadding_TranslucentBasePass_Strata_2108;
	float PrePadding_TranslucentBasePass_Strata_2112;
	float PrePadding_TranslucentBasePass_Strata_2116;
	float PrePadding_TranslucentBasePass_Strata_2120;
	float PrePadding_TranslucentBasePass_Strata_2124;
	float PrePadding_TranslucentBasePass_Strata_2128;
	float PrePadding_TranslucentBasePass_Strata_2132;
	float PrePadding_TranslucentBasePass_Strata_2136;
	float PrePadding_TranslucentBasePass_Strata_2140;
	float PrePadding_TranslucentBasePass_Strata_2144;
	float PrePadding_TranslucentBasePass_Strata_2148;
	float PrePadding_TranslucentBasePass_Strata_2152;
	float PrePadding_TranslucentBasePass_Strata_2156;
	float PrePadding_TranslucentBasePass_Strata_2160;
	float PrePadding_TranslucentBasePass_Strata_2164;
	float PrePadding_TranslucentBasePass_Strata_2168;
	float PrePadding_TranslucentBasePass_Strata_2172;
	float PrePadding_TranslucentBasePass_Strata_2176;
	float PrePadding_TranslucentBasePass_Strata_2180;
	float PrePadding_TranslucentBasePass_Strata_2184;
	float PrePadding_TranslucentBasePass_Strata_2188;
	uint TranslucentBasePass_Strata_bRoughDiffuse;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2196;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2200;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2204;
	float4x4 TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix;
	float TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2276;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2280;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2284;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2288;
	float PrePadding_TranslucentBasePass_ForwardDirLightCloudShadow_2292;
	float TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapStrength;
	float PrePadding_TranslucentBasePass_2300;
	float4 TranslucentBasePass_HZBUvFactorAndInvFactor;
	float4 TranslucentBasePass_PrevScreenPositionScaleBias;
	float2 TranslucentBasePass_PrevSceneColorBilinearUVMin;
	float2 TranslucentBasePass_PrevSceneColorBilinearUVMax;
	float TranslucentBasePass_PrevSceneColorPreExposureInv;
	int TranslucentBasePass_SSRQuality;
	int PrePadding_TranslucentBasePass_2360;
	int PrePadding_TranslucentBasePass_2364;
	int PrePadding_TranslucentBasePass_2368;
	int PrePadding_TranslucentBasePass_2372;
	int PrePadding_TranslucentBasePass_2376;
	int PrePadding_TranslucentBasePass_2380;
	int PrePadding_TranslucentBasePass_2384;
	int PrePadding_TranslucentBasePass_2388;
	int PrePadding_TranslucentBasePass_2392;
	int PrePadding_TranslucentBasePass_2396;
	int PrePadding_TranslucentBasePass_2400;
	int PrePadding_TranslucentBasePass_2404;
	int PrePadding_TranslucentBasePass_2408;
	int PrePadding_TranslucentBasePass_2412;
	int PrePadding_TranslucentBasePass_2416;
	int PrePadding_TranslucentBasePass_2420;
	float TranslucentBasePass_ApplyVolumetricCloudOnTransparent;
	float PrePadding_TranslucentBasePass_2428;
	float PrePadding_TranslucentBasePass_2432;
	float PrePadding_TranslucentBasePass_2436;
	float PrePadding_TranslucentBasePass_2440;
	float PrePadding_TranslucentBasePass_2444;
	float PrePadding_TranslucentBasePass_2448;
	float PrePadding_TranslucentBasePass_2452;
	float PrePadding_TranslucentBasePass_2456;
	float PrePadding_TranslucentBasePass_2460;
	float TranslucentBasePass_ReprojectionRadiusScale;
	float TranslucentBasePass_ClipmapWorldExtent;
	float TranslucentBasePass_ClipmapDistributionBase;
	float TranslucentBasePass_InvClipmapFadeSize;
	int2 TranslucentBasePass_ProbeAtlasResolutionInProbes;
	uint TranslucentBasePass_RadianceProbeClipmapResolution;
	uint TranslucentBasePass_NumRadianceProbeClipmaps;
	uint TranslucentBasePass_RadianceProbeResolution;
	uint TranslucentBasePass_FinalProbeResolution;
	uint TranslucentBasePass_FinalRadianceAtlasMaxMip;
	uint TranslucentBasePass_CalculateIrradiance;
	uint TranslucentBasePass_IrradianceProbeResolution;
	uint TranslucentBasePass_OcclusionProbeResolution;
	uint TranslucentBasePass_NumProbesToTraceBudget;
	uint TranslucentBasePass_RadianceCacheStats;
	float PrePadding_TranslucentBasePass_2528;
	float PrePadding_TranslucentBasePass_2532;
	float PrePadding_TranslucentBasePass_2536;
	float PrePadding_TranslucentBasePass_2540;
	float PrePadding_TranslucentBasePass_2544;
	float PrePadding_TranslucentBasePass_2548;
	float PrePadding_TranslucentBasePass_2552;
	float PrePadding_TranslucentBasePass_2556;
	float PrePadding_TranslucentBasePass_2560;
	float PrePadding_TranslucentBasePass_2564;
	float PrePadding_TranslucentBasePass_2568;
	float PrePadding_TranslucentBasePass_2572;
	float4 TranslucentBasePass_RadianceProbeSettings[6];
	float4 TranslucentBasePass_PaddedWorldPositionToRadianceProbeCoordBias[6];
	float4 TranslucentBasePass_PaddedRadianceProbeCoordToWorldPositionBias[6];
	float2 TranslucentBasePass_InvProbeFinalRadianceAtlasResolution;
	float2 TranslucentBasePass_InvProbeFinalIrradianceAtlasResolution;
	float2 TranslucentBasePass_InvProbeDepthAtlasResolution;
	uint TranslucentBasePass_OverrideCacheOcclusionLighting;
	uint TranslucentBasePass_ShowBlackRadianceCacheLighting;
	uint TranslucentBasePass_ProbeAtlasResolutionModuloMask;
	uint TranslucentBasePass_ProbeAtlasResolutionDivideShift;
	float PrePadding_TranslucentBasePass_2904;
	float PrePadding_TranslucentBasePass_2908;
	float PrePadding_TranslucentBasePass_2912;
	float PrePadding_TranslucentBasePass_2916;
	float PrePadding_TranslucentBasePass_2920;
	float PrePadding_TranslucentBasePass_2924;
	float PrePadding_TranslucentBasePass_2928;
	float PrePadding_TranslucentBasePass_2932;
	float PrePadding_TranslucentBasePass_2936;
	float PrePadding_TranslucentBasePass_2940;
	float PrePadding_TranslucentBasePass_2944;
	float PrePadding_TranslucentBasePass_2948;
	float PrePadding_TranslucentBasePass_2952;
	float PrePadding_TranslucentBasePass_2956;
	float3 TranslucentBasePass_TranslucencyGIGridZParams;
	uint TranslucentBasePass_TranslucencyGIGridPixelSizeShift;
	int3 TranslucentBasePass_TranslucencyGIGridSize;
}
Texture2D TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas;
SamplerState TranslucentBasePass_Shared_Forward_ShadowmapSampler;
Texture2D TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap;
SamplerState TranslucentBasePass_Shared_Forward_StaticShadowmapSampler;
Buffer<float4> TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer;
Buffer<uint> TranslucentBasePass_Shared_Forward_NumCulledLightsGrid;
Buffer<uint> TranslucentBasePass_Shared_Forward_CulledLightDataGrid;
Texture2D TranslucentBasePass_Shared_Forward_DummyRectLightSourceTexture;
Texture2D TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas;
SamplerState TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler;
Texture2D TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap;
SamplerState TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler;
Buffer<float4> TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer;
Buffer<uint> TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid;
Buffer<uint> TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid;
Texture2D TranslucentBasePass_Shared_ForwardISR_DummyRectLightSourceTexture;
TextureCube TranslucentBasePass_Shared_Reflection_SkyLightCubemap;
SamplerState TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler;
TextureCube TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap;
SamplerState TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler;
TextureCubeArray TranslucentBasePass_Shared_Reflection_ReflectionCubemap;
SamplerState TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler;
Texture2D TranslucentBasePass_Shared_Reflection_PreIntegratedGF;
SamplerState TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler;
Texture2D TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture;
SamplerState TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler;
TextureCube TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap;
SamplerState TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler;
Texture3D TranslucentBasePass_Shared_Fog_IntegratedLightScattering;
SamplerState TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler;
TextureCube TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap;
SamplerState TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler;
Texture3D TranslucentBasePass_Shared_FogISR_IntegratedLightScattering;
SamplerState TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler;
Texture2D TranslucentBasePass_SceneTextures_SceneColorTexture;
Texture2D TranslucentBasePass_SceneTextures_SceneDepthTexture;
Texture2D TranslucentBasePass_SceneTextures_GBufferATexture;
Texture2D TranslucentBasePass_SceneTextures_GBufferBTexture;
Texture2D TranslucentBasePass_SceneTextures_GBufferCTexture;
Texture2D TranslucentBasePass_SceneTextures_GBufferDTexture;
Texture2D TranslucentBasePass_SceneTextures_GBufferETexture;
Texture2D TranslucentBasePass_SceneTextures_GBufferFTexture;
Texture2D TranslucentBasePass_SceneTextures_GBufferVelocityTexture;
Texture2D TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture;
Texture2D TranslucentBasePass_SceneTextures_CustomDepthTexture;
Texture2D<uint2> TranslucentBasePass_SceneTextures_CustomStencilTexture;
SamplerState TranslucentBasePass_SceneTextures_PointClampSampler;
Texture2D<float3> TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture;
SamplerState TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler;
Texture3D TranslucentBasePass_TranslucencyLightingVolumeAmbientInner;
Texture3D TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter;
Texture3D TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner;
Texture3D TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter;
Texture3D<uint> TranslucentBasePass_RadianceProbeIndirectionTexture;
Texture2D<float3> TranslucentBasePass_RadianceCacheFinalRadianceAtlas;
Texture2D<float3> TranslucentBasePass_RadianceCacheFinalIrradianceAtlas;
Texture2D<float2> TranslucentBasePass_RadianceCacheProbeOcclusionAtlas;
Texture2D<float> TranslucentBasePass_RadianceCacheDepthAtlas;
StructuredBuffer<float4> TranslucentBasePass_ProbeWorldOffset;
Texture3D TranslucentBasePass_TranslucencyGIVolume0;
Texture3D TranslucentBasePass_TranslucencyGIVolume1;
Texture3D TranslucentBasePass_TranslucencyGIVolumeHistory0;
Texture3D TranslucentBasePass_TranslucencyGIVolumeHistory1;
SamplerState TranslucentBasePass_TranslucencyGIVolumeSampler;
Texture2D TranslucentBasePass_HZBTexture;
SamplerState TranslucentBasePass_HZBSampler;
Texture2D TranslucentBasePass_PrevSceneColor;
SamplerState TranslucentBasePass_PrevSceneColorSampler;
Texture2D TranslucentBasePass_VolumetricCloudColor;
SamplerState TranslucentBasePass_VolumetricCloudColorSampler;
Texture2D TranslucentBasePass_VolumetricCloudDepth;
SamplerState TranslucentBasePass_VolumetricCloudDepthSampler;
Texture2D TranslucentBasePass_PreIntegratedGFTexture;
SamplerState TranslucentBasePass_PreIntegratedGFSampler;
Texture2D TranslucentBasePass_EyeAdaptationTexture;
Texture2D TranslucentBasePass_SceneColorCopyTexture;
SamplerState TranslucentBasePass_SceneColorCopySampler;
/*atic const struct
{
struct {
struct {
	uint NumLocalLights;
	uint NumReflectionCaptures;
	uint HasDirectionalLight;
	uint NumGridCells;
	int3 CulledGridSize;
	uint MaxCulledLightsPerCell;
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	float3 DirectionalLightDirection;
	float3 DirectionalLightColor;
	float DirectionalLightVolumetricScatteringIntensity;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	uint NumDirectionalLightCascades;
	int DirectionalLightVSM;
	float4 CascadeEndDepths;
	float4x4 DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 DirectionalLightShadowmapMinMax[4];
	float4 DirectionalLightShadowmapAtlasBufferSize;
	float DirectionalLightDepthBias;
	uint DirectionalLightUseStaticShadowing;
	uint SimpleLightsEndIndex;
	uint ClusteredDeferredSupportedEndIndex;
	float4 DirectionalLightStaticShadowBufferSize;
	float4x4 DirectionalLightTranslatedWorldToStaticShadow;
	uint DirectLightingShowFlag;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
	Texture2D DummyRectLightSourceTexture;
} Forward;
struct {
	uint NumLocalLights;
	uint NumReflectionCaptures;
	uint HasDirectionalLight;
	uint NumGridCells;
	int3 CulledGridSize;
	uint MaxCulledLightsPerCell;
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	float3 DirectionalLightDirection;
	float3 DirectionalLightColor;
	float DirectionalLightVolumetricScatteringIntensity;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	uint NumDirectionalLightCascades;
	int DirectionalLightVSM;
	float4 CascadeEndDepths;
	float4x4 DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 DirectionalLightShadowmapMinMax[4];
	float4 DirectionalLightShadowmapAtlasBufferSize;
	float DirectionalLightDepthBias;
	uint DirectionalLightUseStaticShadowing;
	uint SimpleLightsEndIndex;
	uint ClusteredDeferredSupportedEndIndex;
	float4 DirectionalLightStaticShadowBufferSize;
	float4x4 DirectionalLightTranslatedWorldToStaticShadow;
	uint DirectLightingShowFlag;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
	Texture2D DummyRectLightSourceTexture;
} ForwardISR;
struct {
	float4 SkyLightParameters;
	float SkyLightCubemapBrightness;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} Reflection;
struct {
	float4 ReflectionPlane;
	float4 PlanarReflectionOrigin;
	float4 PlanarReflectionXAxis;
	float4 PlanarReflectionYAxis;
	float3x4 InverseTransposeMirrorMatrix;
	float3 PlanarReflectionParameters;
	float2 PlanarReflectionParameters2;
	float4x4 ProjectionWithExtraFOV[2];
	float4 PlanarReflectionScreenScaleBias[2];
	float2 PlanarReflectionScreenBound;
	uint bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflection;
struct {
	float4 ExponentialFogParameters;
	float4 ExponentialFogParameters2;
	float4 ExponentialFogColorParameter;
	float4 ExponentialFogParameters3;
	float4 InscatteringLightDirection;
	float4 DirectionalInscatteringColor;
	float2 SinCosInscatteringColorCubemapRotation;
	float3 FogInscatteringTextureParameters;
	float ApplyVolumetricFog;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} Fog;
struct {
	float4 ExponentialFogParameters;
	float4 ExponentialFogParameters2;
	float4 ExponentialFogColorParameter;
	float4 ExponentialFogParameters3;
	float4 InscatteringLightDirection;
	float4 DirectionalInscatteringColor;
	float2 SinCosInscatteringColorCubemapRotation;
	float3 FogInscatteringTextureParameters;
	float ApplyVolumetricFog;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} FogISR;
	uint UseBasePassSkylight;
} Shared;
struct {
	Texture2D SceneColorTexture;
	Texture2D SceneDepthTexture;
	Texture2D GBufferATexture;
	Texture2D GBufferBTexture;
	Texture2D GBufferCTexture;
	Texture2D GBufferDTexture;
	Texture2D GBufferETexture;
	Texture2D GBufferFTexture;
	Texture2D GBufferVelocityTexture;
	Texture2D ScreenSpaceAOTexture;
	Texture2D CustomDepthTexture;
	Texture2D<uint2> CustomStencilTexture;
	SamplerState PointClampSampler;
} SceneTextures;
struct {
	uint bRoughDiffuse;
} Strata;
struct {
	float4x4 CloudShadowmapTranslatedWorldToLightClipMatrix;
	float CloudShadowmapFarDepthKm;
	float CloudShadowmapStrength;
	Texture2D<float3> CloudShadowmapTexture;
	SamplerState CloudShadowmapSampler;
} ForwardDirLightCloudShadow;
	float4 HZBUvFactorAndInvFactor;
	float4 PrevScreenPositionScaleBias;
	float2 PrevSceneColorBilinearUVMin;
	float2 PrevSceneColorBilinearUVMax;
	float PrevSceneColorPreExposureInv;
	int SSRQuality;
	float ApplyVolumetricCloudOnTransparent;
	Texture3D TranslucencyLightingVolumeAmbientInner;
	Texture3D TranslucencyLightingVolumeAmbientOuter;
	Texture3D TranslucencyLightingVolumeDirectionalInner;
	Texture3D TranslucencyLightingVolumeDirectionalOuter;
	float ReprojectionRadiusScale;
	float ClipmapWorldExtent;
	float ClipmapDistributionBase;
	float InvClipmapFadeSize;
	int2 ProbeAtlasResolutionInProbes;
	uint RadianceProbeClipmapResolution;
	uint NumRadianceProbeClipmaps;
	uint RadianceProbeResolution;
	uint FinalProbeResolution;
	uint FinalRadianceAtlasMaxMip;
	uint CalculateIrradiance;
	uint IrradianceProbeResolution;
	uint OcclusionProbeResolution;
	uint NumProbesToTraceBudget;
	uint RadianceCacheStats;
	float4 RadianceProbeSettings[6];
	float4 PaddedWorldPositionToRadianceProbeCoordBias[6];
	float4 PaddedRadianceProbeCoordToWorldPositionBias[6];
	float2 InvProbeFinalRadianceAtlasResolution;
	float2 InvProbeFinalIrradianceAtlasResolution;
	float2 InvProbeDepthAtlasResolution;
	uint OverrideCacheOcclusionLighting;
	uint ShowBlackRadianceCacheLighting;
	uint ProbeAtlasResolutionModuloMask;
	uint ProbeAtlasResolutionDivideShift;
	Texture3D<uint> RadianceProbeIndirectionTexture;
	Texture2D<float3> RadianceCacheFinalRadianceAtlas;
	Texture2D<float3> RadianceCacheFinalIrradianceAtlas;
	Texture2D<float2> RadianceCacheProbeOcclusionAtlas;
	Texture2D<float> RadianceCacheDepthAtlas;
	StructuredBuffer<float4> ProbeWorldOffset;
	float3 TranslucencyGIGridZParams;
	uint TranslucencyGIGridPixelSizeShift;
	int3 TranslucencyGIGridSize;
	Texture3D TranslucencyGIVolume0;
	Texture3D TranslucencyGIVolume1;
	Texture3D TranslucencyGIVolumeHistory0;
	Texture3D TranslucencyGIVolumeHistory1;
	SamplerState TranslucencyGIVolumeSampler;
	Texture2D HZBTexture;
	SamplerState HZBSampler;
	Texture2D PrevSceneColor;
	SamplerState PrevSceneColorSampler;
	Texture2D VolumetricCloudColor;
	SamplerState VolumetricCloudColorSampler;
	Texture2D VolumetricCloudDepth;
	SamplerState VolumetricCloudDepthSampler;
	Texture2D PreIntegratedGFTexture;
	SamplerState PreIntegratedGFSampler;
	Texture2D EyeAdaptationTexture;
	Texture2D SceneColorCopyTexture;
	SamplerState SceneColorCopySampler;
} TranslucentBasePass = {{{TranslucentBasePass_Shared_Forward_NumLocalLights,TranslucentBasePass_Shared_Forward_NumReflectionCaptures,TranslucentBasePass_Shared_Forward_HasDirectionalLight,TranslucentBasePass_Shared_Forward_NumGridCells,TranslucentBasePass_Shared_Forward_CulledGridSize,TranslucentBasePass_Shared_Forward_MaxCulledLightsPerCell,TranslucentBasePass_Shared_Forward_LightGridPixelSizeShift,TranslucentBasePass_Shared_Forward_LightGridZParams,TranslucentBasePass_Shared_Forward_DirectionalLightDirection,TranslucentBasePass_Shared_Forward_DirectionalLightColor,TranslucentBasePass_Shared_Forward_DirectionalLightVolumetricScatteringIntensity,TranslucentBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask,TranslucentBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD,TranslucentBasePass_Shared_Forward_NumDirectionalLightCascades,TranslucentBasePass_Shared_Forward_DirectionalLightVSM,TranslucentBasePass_Shared_Forward_CascadeEndDepths,TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix,TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapMinMax,TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize,TranslucentBasePass_Shared_Forward_DirectionalLightDepthBias,TranslucentBasePass_Shared_Forward_DirectionalLightUseStaticShadowing,TranslucentBasePass_Shared_Forward_SimpleLightsEndIndex,TranslucentBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex,TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowBufferSize,TranslucentBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow,TranslucentBasePass_Shared_Forward_DirectLightingShowFlag,TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas,TranslucentBasePass_Shared_Forward_ShadowmapSampler,TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap,TranslucentBasePass_Shared_Forward_StaticShadowmapSampler,TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer,TranslucentBasePass_Shared_Forward_NumCulledLightsGrid,TranslucentBasePass_Shared_Forward_CulledLightDataGrid,TranslucentBasePass_Shared_Forward_DummyRectLightSourceTexture,},{TranslucentBasePass_Shared_ForwardISR_NumLocalLights,TranslucentBasePass_Shared_ForwardISR_NumReflectionCaptures,TranslucentBasePass_Shared_ForwardISR_HasDirectionalLight,TranslucentBasePass_Shared_ForwardISR_NumGridCells,TranslucentBasePass_Shared_ForwardISR_CulledGridSize,TranslucentBasePass_Shared_ForwardISR_MaxCulledLightsPerCell,TranslucentBasePass_Shared_ForwardISR_LightGridPixelSizeShift,TranslucentBasePass_Shared_ForwardISR_LightGridZParams,TranslucentBasePass_Shared_ForwardISR_DirectionalLightDirection,TranslucentBasePass_Shared_ForwardISR_DirectionalLightColor,TranslucentBasePass_Shared_ForwardISR_DirectionalLightVolumetricScatteringIntensity,TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask,TranslucentBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD,TranslucentBasePass_Shared_ForwardISR_NumDirectionalLightCascades,TranslucentBasePass_Shared_ForwardISR_DirectionalLightVSM,TranslucentBasePass_Shared_ForwardISR_CascadeEndDepths,TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToShadowMatrix,TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapMinMax,TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlasBufferSize,TranslucentBasePass_Shared_ForwardISR_DirectionalLightDepthBias,TranslucentBasePass_Shared_ForwardISR_DirectionalLightUseStaticShadowing,TranslucentBasePass_Shared_ForwardISR_SimpleLightsEndIndex,TranslucentBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex,TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowBufferSize,TranslucentBasePass_Shared_ForwardISR_DirectionalLightTranslatedWorldToStaticShadow,TranslucentBasePass_Shared_ForwardISR_DirectLightingShowFlag,TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas,TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler,TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap,TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler,TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer,TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid,TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid,TranslucentBasePass_Shared_ForwardISR_DummyRectLightSourceTexture,},{TranslucentBasePass_Shared_Reflection_SkyLightParameters,TranslucentBasePass_Shared_Reflection_SkyLightCubemapBrightness,TranslucentBasePass_Shared_Reflection_SkyLightCubemap,TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler,TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap,TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler,TranslucentBasePass_Shared_Reflection_ReflectionCubemap,TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler,TranslucentBasePass_Shared_Reflection_PreIntegratedGF,TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler,},{TranslucentBasePass_Shared_PlanarReflection_ReflectionPlane,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionOrigin,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionXAxis,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionYAxis,TranslucentBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionParameters2,TranslucentBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound,TranslucentBasePass_Shared_PlanarReflection_bIsStereo,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture,TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler,},{TranslucentBasePass_Shared_Fog_ExponentialFogParameters,TranslucentBasePass_Shared_Fog_ExponentialFogParameters2,TranslucentBasePass_Shared_Fog_ExponentialFogColorParameter,TranslucentBasePass_Shared_Fog_ExponentialFogParameters3,TranslucentBasePass_Shared_Fog_InscatteringLightDirection,TranslucentBasePass_Shared_Fog_DirectionalInscatteringColor,TranslucentBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation,TranslucentBasePass_Shared_Fog_FogInscatteringTextureParameters,TranslucentBasePass_Shared_Fog_ApplyVolumetricFog,TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap,TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler,TranslucentBasePass_Shared_Fog_IntegratedLightScattering,TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler,},{TranslucentBasePass_Shared_FogISR_ExponentialFogParameters,TranslucentBasePass_Shared_FogISR_ExponentialFogParameters2,TranslucentBasePass_Shared_FogISR_ExponentialFogColorParameter,TranslucentBasePass_Shared_FogISR_ExponentialFogParameters3,TranslucentBasePass_Shared_FogISR_InscatteringLightDirection,TranslucentBasePass_Shared_FogISR_DirectionalInscatteringColor,TranslucentBasePass_Shared_FogISR_SinCosInscatteringColorCubemapRotation,TranslucentBasePass_Shared_FogISR_FogInscatteringTextureParameters,TranslucentBasePass_Shared_FogISR_ApplyVolumetricFog,TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap,TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler,TranslucentBasePass_Shared_FogISR_IntegratedLightScattering,TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler,},TranslucentBasePass_Shared_UseBasePassSkylight,},{TranslucentBasePass_SceneTextures_SceneColorTexture,TranslucentBasePass_SceneTextures_SceneDepthTexture,TranslucentBasePass_SceneTextures_GBufferATexture,TranslucentBasePass_SceneTextures_GBufferBTexture,TranslucentBasePass_SceneTextures_GBufferCTexture,TranslucentBasePass_SceneTextures_GBufferDTexture,TranslucentBasePass_SceneTextures_GBufferETexture,TranslucentBasePass_SceneTextures_GBufferFTexture,TranslucentBasePass_SceneTextures_GBufferVelocityTexture,TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture,TranslucentBasePass_SceneTextures_CustomDepthTexture,TranslucentBasePass_SceneTextures_CustomStencilTexture,TranslucentBasePass_SceneTextures_PointClampSampler,},{TranslucentBasePass_Strata_bRoughDiffuse,},{TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTranslatedWorldToLightClipMatrix,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapFarDepthKm,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapStrength,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture,TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler,},TranslucentBasePass_HZBUvFactorAndInvFactor,TranslucentBasePass_PrevScreenPositionScaleBias,TranslucentBasePass_PrevSceneColorBilinearUVMin,TranslucentBasePass_PrevSceneColorBilinearUVMax,TranslucentBasePass_PrevSceneColorPreExposureInv,TranslucentBasePass_SSRQuality,TranslucentBasePass_ApplyVolumetricCloudOnTransparent,TranslucentBasePass_TranslucencyLightingVolumeAmbientInner,TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter,TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner,TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter,TranslucentBasePass_ReprojectionRadiusScale,TranslucentBasePass_ClipmapWorldExtent,TranslucentBasePass_ClipmapDistributionBase,TranslucentBasePass_InvClipmapFadeSize,TranslucentBasePass_ProbeAtlasResolutionInProbes,TranslucentBasePass_RadianceProbeClipmapResolution,TranslucentBasePass_NumRadianceProbeClipmaps,TranslucentBasePass_RadianceProbeResolution,TranslucentBasePass_FinalProbeResolution,TranslucentBasePass_FinalRadianceAtlasMaxMip,TranslucentBasePass_CalculateIrradiance,TranslucentBasePass_IrradianceProbeResolution,TranslucentBasePass_OcclusionProbeResolution,TranslucentBasePass_NumProbesToTraceBudget,TranslucentBasePass_RadianceCacheStats,TranslucentBasePass_RadianceProbeSettings,TranslucentBasePass_PaddedWorldPositionToRadianceProbeCoordBias,TranslucentBasePass_PaddedRadianceProbeCoordToWorldPositionBias,TranslucentBasePass_InvProbeFinalRadianceAtlasResolution,TranslucentBasePass_InvProbeFinalIrradianceAtlasResolution,TranslucentBasePass_InvProbeDepthAtlasResolution,TranslucentBasePass_OverrideCacheOcclusionLighting,TranslucentBasePass_ShowBlackRadianceCacheLighting,TranslucentBasePass_ProbeAtlasResolutionModuloMask,TranslucentBasePass_ProbeAtlasResolutionDivideShift,TranslucentBasePass_RadianceProbeIndirectionTexture,TranslucentBasePass_RadianceCacheFinalRadianceAtlas,TranslucentBasePass_RadianceCacheFinalIrradianceAtlas,TranslucentBasePass_RadianceCacheProbeOcclusionAtlas,TranslucentBasePass_RadianceCacheDepthAtlas,TranslucentBasePass_ProbeWorldOffset,TranslucentBasePass_TranslucencyGIGridZParams,TranslucentBasePass_TranslucencyGIGridPixelSizeShift,TranslucentBasePass_TranslucencyGIGridSize,TranslucentBasePass_TranslucencyGIVolume0,TranslucentBasePass_TranslucencyGIVolume1,TranslucentBasePass_TranslucencyGIVolumeHistory0,TranslucentBasePass_TranslucencyGIVolumeHistory1,TranslucentBasePass_TranslucencyGIVolumeSampler,TranslucentBasePass_HZBTexture,TranslucentBasePass_HZBSampler,TranslucentBasePass_PrevSceneColor,TranslucentBasePass_PrevSceneColorSampler,TranslucentBasePass_VolumetricCloudColor,TranslucentBasePass_VolumetricCloudColorSampler,TranslucentBasePass_VolumetricCloudDepth,TranslucentBasePass_VolumetricCloudDepthSampler,TranslucentBasePass_PreIntegratedGFTexture,TranslucentBasePass_PreIntegratedGFSampler,TranslucentBasePass_EyeAdaptationTexture,TranslucentBasePass_SceneColorCopyTexture,TranslucentBasePass_SceneColorCopySampler,*/
#line 22 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/LightmapResourceCluster.ush"


cbuffer LightmapResourceCluster
{
}
Texture2D LightmapResourceCluster_LightMapTexture;
Texture2D LightmapResourceCluster_SkyOcclusionTexture;
Texture2D LightmapResourceCluster_AOMaterialMaskTexture;
Texture2D LightmapResourceCluster_StaticShadowTexture;
Texture2D<float4> LightmapResourceCluster_VTLightMapTexture;
Texture2D<float4> LightmapResourceCluster_VTLightMapTexture_1;
Texture2D<float4> LightmapResourceCluster_VTSkyOcclusionTexture;
Texture2D<float4> LightmapResourceCluster_VTAOMaterialMaskTexture;
Texture2D<float4> LightmapResourceCluster_VTStaticShadowTexture;
SamplerState LightmapResourceCluster_LightMapSampler;
SamplerState LightmapResourceCluster_LightMapSampler_1;
SamplerState LightmapResourceCluster_SkyOcclusionSampler;
SamplerState LightmapResourceCluster_AOMaterialMaskSampler;
SamplerState LightmapResourceCluster_StaticShadowTextureSampler;
Texture2D<uint4> LightmapResourceCluster_LightmapVirtualTexturePageTable0;
Texture2D<uint4> LightmapResourceCluster_LightmapVirtualTexturePageTable1;
/*atic const struct
{
	Texture2D LightMapTexture;
	Texture2D SkyOcclusionTexture;
	Texture2D AOMaterialMaskTexture;
	Texture2D StaticShadowTexture;
	Texture2D<float4> VTLightMapTexture;
	Texture2D<float4> VTLightMapTexture_1;
	Texture2D<float4> VTSkyOcclusionTexture;
	Texture2D<float4> VTAOMaterialMaskTexture;
	Texture2D<float4> VTStaticShadowTexture;
	SamplerState LightMapSampler;
	SamplerState LightMapSampler_1;
	SamplerState SkyOcclusionSampler;
	SamplerState AOMaterialMaskSampler;
	SamplerState StaticShadowTextureSampler;
	Texture2D<uint4> LightmapVirtualTexturePageTable0;
	Texture2D<uint4> LightmapVirtualTexturePageTable1;
} LightmapResourceCluster = {LightmapResourceCluster_LightMapTexture,LightmapResourceCluster_SkyOcclusionTexture,LightmapResourceCluster_AOMaterialMaskTexture,LightmapResourceCluster_StaticShadowTexture,  LightmapResourceCluster_VTLightMapTexture,   LightmapResourceCluster_VTLightMapTexture_1,   LightmapResourceCluster_VTSkyOcclusionTexture,   LightmapResourceCluster_VTAOMaterialMaskTexture,   LightmapResourceCluster_VTStaticShadowTexture,  LightmapResourceCluster_LightMapSampler,LightmapResourceCluster_LightMapSampler_1,LightmapResourceCluster_SkyOcclusionSampler,LightmapResourceCluster_AOMaterialMaskSampler,LightmapResourceCluster_StaticShadowTextureSampler,LightmapResourceCluster_LightmapVirtualTexturePageTable0,LightmapResourceCluster_LightmapVirtualTexturePageTable1,*/
#line 23 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"


cbuffer PrecomputedLightingBuffer
{
	float4 PrecomputedLightingBuffer_StaticShadowMapMasks;
	float4 PrecomputedLightingBuffer_InvUniformPenumbraSizes;
	float4 PrecomputedLightingBuffer_LightMapCoordinateScaleBias;
	float4 PrecomputedLightingBuffer_ShadowMapCoordinateScaleBias;
	float4 PrecomputedLightingBuffer_LightMapScale[2];
	float4 PrecomputedLightingBuffer_LightMapAdd[2];
	uint4 PrecomputedLightingBuffer_LightmapVTPackedPageTableUniform[2];
	uint4 PrecomputedLightingBuffer_LightmapVTPackedUniform[5];
}
/*atic const struct
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
} PrecomputedLightingBuffer = {PrecomputedLightingBuffer_StaticShadowMapMasks,PrecomputedLightingBuffer_InvUniformPenumbraSizes,PrecomputedLightingBuffer_LightMapCoordinateScaleBias,PrecomputedLightingBuffer_ShadowMapCoordinateScaleBias,PrecomputedLightingBuffer_LightMapScale,PrecomputedLightingBuffer_LightMapAdd,PrecomputedLightingBuffer_LightmapVTPackedPageTableUniform,PrecomputedLightingBuffer_LightmapVTPackedUniform,*/
#line 24 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/IndirectLightingCache.ush"


cbuffer IndirectLightingCache
{
	float3 IndirectLightingCache_IndirectLightingCachePrimitiveAdd;
	float PrePadding_IndirectLightingCache_12;
	float3 IndirectLightingCache_IndirectLightingCachePrimitiveScale;
	float PrePadding_IndirectLightingCache_28;
	float3 IndirectLightingCache_IndirectLightingCacheMinUV;
	float PrePadding_IndirectLightingCache_44;
	float3 IndirectLightingCache_IndirectLightingCacheMaxUV;
	float PrePadding_IndirectLightingCache_60;
	float4 IndirectLightingCache_PointSkyBentNormal;
	float IndirectLightingCache_DirectionalLightShadowing;
	float PrePadding_IndirectLightingCache_84;
	float PrePadding_IndirectLightingCache_88;
	float PrePadding_IndirectLightingCache_92;
	float4 IndirectLightingCache_IndirectLightingSHCoefficients0[3];
	float4 IndirectLightingCache_IndirectLightingSHCoefficients1[3];
	float4 IndirectLightingCache_IndirectLightingSHCoefficients2;
	float4 IndirectLightingCache_IndirectLightingSHSingleCoefficient;
}
Texture3D IndirectLightingCache_IndirectLightingCacheTexture0;
Texture3D IndirectLightingCache_IndirectLightingCacheTexture1;
Texture3D IndirectLightingCache_IndirectLightingCacheTexture2;
SamplerState IndirectLightingCache_IndirectLightingCacheTextureSampler0;
SamplerState IndirectLightingCache_IndirectLightingCacheTextureSampler1;
SamplerState IndirectLightingCache_IndirectLightingCacheTextureSampler2;
/*atic const struct
{
	float3 IndirectLightingCachePrimitiveAdd;
	float3 IndirectLightingCachePrimitiveScale;
	float3 IndirectLightingCacheMinUV;
	float3 IndirectLightingCacheMaxUV;
	float4 PointSkyBentNormal;
	float DirectionalLightShadowing;
	float4 IndirectLightingSHCoefficients0[3];
	float4 IndirectLightingSHCoefficients1[3];
	float4 IndirectLightingSHCoefficients2;
	float4 IndirectLightingSHSingleCoefficient;
	Texture3D IndirectLightingCacheTexture0;
	Texture3D IndirectLightingCacheTexture1;
	Texture3D IndirectLightingCacheTexture2;
	SamplerState IndirectLightingCacheTextureSampler0;
	SamplerState IndirectLightingCacheTextureSampler1;
	SamplerState IndirectLightingCacheTextureSampler2;
} IndirectLightingCache = {IndirectLightingCache_IndirectLightingCachePrimitiveAdd,IndirectLightingCache_IndirectLightingCachePrimitiveScale,IndirectLightingCache_IndirectLightingCacheMinUV,IndirectLightingCache_IndirectLightingCacheMaxUV,IndirectLightingCache_PointSkyBentNormal,IndirectLightingCache_DirectionalLightShadowing,IndirectLightingCache_IndirectLightingSHCoefficients0,IndirectLightingCache_IndirectLightingSHCoefficients1,IndirectLightingCache_IndirectLightingSHCoefficients2,IndirectLightingCache_IndirectLightingSHSingleCoefficient,IndirectLightingCache_IndirectLightingCacheTexture0,IndirectLightingCache_IndirectLightingCacheTexture1,IndirectLightingCache_IndirectLightingCacheTexture2,IndirectLightingCache_IndirectLightingCacheTextureSampler0,IndirectLightingCache_IndirectLightingCacheTextureSampler1,IndirectLightingCache_IndirectLightingCacheTextureSampler2,*/
#line 25 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/PlanarReflectionStruct.ush"


cbuffer PlanarReflectionStruct
{
	float4 PlanarReflectionStruct_ReflectionPlane;
	float4 PlanarReflectionStruct_PlanarReflectionOrigin;
	float4 PlanarReflectionStruct_PlanarReflectionXAxis;
	float4 PlanarReflectionStruct_PlanarReflectionYAxis;
	float3x4 PlanarReflectionStruct_InverseTransposeMirrorMatrix;
	float3 PlanarReflectionStruct_PlanarReflectionParameters;
	float PrePadding_PlanarReflectionStruct_124;
	float2 PlanarReflectionStruct_PlanarReflectionParameters2;
	float PrePadding_PlanarReflectionStruct_136;
	float PrePadding_PlanarReflectionStruct_140;
	float4x4 PlanarReflectionStruct_ProjectionWithExtraFOV[2];
	float4 PlanarReflectionStruct_PlanarReflectionScreenScaleBias[2];
	float2 PlanarReflectionStruct_PlanarReflectionScreenBound;
	uint PlanarReflectionStruct_bIsStereo;
}
Texture2D PlanarReflectionStruct_PlanarReflectionTexture;
SamplerState PlanarReflectionStruct_PlanarReflectionSampler;
/*atic const struct
{
	float4 ReflectionPlane;
	float4 PlanarReflectionOrigin;
	float4 PlanarReflectionXAxis;
	float4 PlanarReflectionYAxis;
	float3x4 InverseTransposeMirrorMatrix;
	float3 PlanarReflectionParameters;
	float2 PlanarReflectionParameters2;
	float4x4 ProjectionWithExtraFOV[2];
	float4 PlanarReflectionScreenScaleBias[2];
	float2 PlanarReflectionScreenBound;
	uint bIsStereo;
	Texture2D PlanarReflectionTexture;
	SamplerState PlanarReflectionSampler;
} PlanarReflectionStruct = {PlanarReflectionStruct_ReflectionPlane,PlanarReflectionStruct_PlanarReflectionOrigin,PlanarReflectionStruct_PlanarReflectionXAxis,PlanarReflectionStruct_PlanarReflectionYAxis,PlanarReflectionStruct_InverseTransposeMirrorMatrix,PlanarReflectionStruct_PlanarReflectionParameters,PlanarReflectionStruct_PlanarReflectionParameters2,PlanarReflectionStruct_ProjectionWithExtraFOV,PlanarReflectionStruct_PlanarReflectionScreenScaleBias,PlanarReflectionStruct_PlanarReflectionScreenBound,PlanarReflectionStruct_bIsStereo,PlanarReflectionStruct_PlanarReflectionTexture,PlanarReflectionStruct_PlanarReflectionSampler,*/
#line 26 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/ReflectionStruct.ush"


cbuffer ReflectionStruct
{
	float4 ReflectionStruct_SkyLightParameters;
	float ReflectionStruct_SkyLightCubemapBrightness;
}
TextureCube ReflectionStruct_SkyLightCubemap;
SamplerState ReflectionStruct_SkyLightCubemapSampler;
TextureCube ReflectionStruct_SkyLightBlendDestinationCubemap;
SamplerState ReflectionStruct_SkyLightBlendDestinationCubemapSampler;
TextureCubeArray ReflectionStruct_ReflectionCubemap;
SamplerState ReflectionStruct_ReflectionCubemapSampler;
Texture2D ReflectionStruct_PreIntegratedGF;
SamplerState ReflectionStruct_PreIntegratedGFSampler;
/*atic const struct
{
	float4 SkyLightParameters;
	float SkyLightCubemapBrightness;
	TextureCube SkyLightCubemap;
	SamplerState SkyLightCubemapSampler;
	TextureCube SkyLightBlendDestinationCubemap;
	SamplerState SkyLightBlendDestinationCubemapSampler;
	TextureCubeArray ReflectionCubemap;
	SamplerState ReflectionCubemapSampler;
	Texture2D PreIntegratedGF;
	SamplerState PreIntegratedGFSampler;
} ReflectionStruct = {ReflectionStruct_SkyLightParameters,ReflectionStruct_SkyLightCubemapBrightness,ReflectionStruct_SkyLightCubemap,ReflectionStruct_SkyLightCubemapSampler,ReflectionStruct_SkyLightBlendDestinationCubemap,ReflectionStruct_SkyLightBlendDestinationCubemapSampler,ReflectionStruct_ReflectionCubemap,ReflectionStruct_ReflectionCubemapSampler,ReflectionStruct_PreIntegratedGF,ReflectionStruct_PreIntegratedGFSampler,*/
#line 27 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/FogStruct.ush"


cbuffer FogStruct
{
	float4 FogStruct_ExponentialFogParameters;
	float4 FogStruct_ExponentialFogParameters2;
	float4 FogStruct_ExponentialFogColorParameter;
	float4 FogStruct_ExponentialFogParameters3;
	float4 FogStruct_InscatteringLightDirection;
	float4 FogStruct_DirectionalInscatteringColor;
	float2 FogStruct_SinCosInscatteringColorCubemapRotation;
	float PrePadding_FogStruct_104;
	float PrePadding_FogStruct_108;
	float3 FogStruct_FogInscatteringTextureParameters;
	float FogStruct_ApplyVolumetricFog;
}
TextureCube FogStruct_FogInscatteringColorCubemap;
SamplerState FogStruct_FogInscatteringColorSampler;
Texture3D FogStruct_IntegratedLightScattering;
SamplerState FogStruct_IntegratedLightScatteringSampler;
/*atic const struct
{
	float4 ExponentialFogParameters;
	float4 ExponentialFogParameters2;
	float4 ExponentialFogColorParameter;
	float4 ExponentialFogParameters3;
	float4 InscatteringLightDirection;
	float4 DirectionalInscatteringColor;
	float2 SinCosInscatteringColorCubemapRotation;
	float3 FogInscatteringTextureParameters;
	float ApplyVolumetricFog;
	TextureCube FogInscatteringColorCubemap;
	SamplerState FogInscatteringColorSampler;
	Texture3D IntegratedLightScattering;
	SamplerState IntegratedLightScatteringSampler;
} FogStruct = {FogStruct_ExponentialFogParameters,FogStruct_ExponentialFogParameters2,FogStruct_ExponentialFogColorParameter,FogStruct_ExponentialFogParameters3,FogStruct_InscatteringLightDirection,FogStruct_DirectionalInscatteringColor,FogStruct_SinCosInscatteringColorCubemapRotation,FogStruct_FogInscatteringTextureParameters,FogStruct_ApplyVolumetricFog,FogStruct_FogInscatteringColorCubemap,FogStruct_FogInscatteringColorSampler,FogStruct_IntegratedLightScattering,FogStruct_IntegratedLightScatteringSampler,*/
#line 28 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/LumenGIVolumeStruct.ush"


cbuffer LumenGIVolumeStruct
{
	float LumenGIVolumeStruct_ReprojectionRadiusScale;
	float LumenGIVolumeStruct_ClipmapWorldExtent;
	float LumenGIVolumeStruct_ClipmapDistributionBase;
	float LumenGIVolumeStruct_InvClipmapFadeSize;
	int2 LumenGIVolumeStruct_ProbeAtlasResolutionInProbes;
	uint LumenGIVolumeStruct_RadianceProbeClipmapResolution;
	uint LumenGIVolumeStruct_NumRadianceProbeClipmaps;
	uint LumenGIVolumeStruct_RadianceProbeResolution;
	uint LumenGIVolumeStruct_FinalProbeResolution;
	uint LumenGIVolumeStruct_FinalRadianceAtlasMaxMip;
	uint LumenGIVolumeStruct_CalculateIrradiance;
	uint LumenGIVolumeStruct_IrradianceProbeResolution;
	uint LumenGIVolumeStruct_OcclusionProbeResolution;
	uint LumenGIVolumeStruct_NumProbesToTraceBudget;
	uint LumenGIVolumeStruct_RadianceCacheStats;
	float PrePadding_LumenGIVolumeStruct_64;
	float PrePadding_LumenGIVolumeStruct_68;
	float PrePadding_LumenGIVolumeStruct_72;
	float PrePadding_LumenGIVolumeStruct_76;
	float PrePadding_LumenGIVolumeStruct_80;
	float PrePadding_LumenGIVolumeStruct_84;
	float PrePadding_LumenGIVolumeStruct_88;
	float PrePadding_LumenGIVolumeStruct_92;
	float PrePadding_LumenGIVolumeStruct_96;
	float PrePadding_LumenGIVolumeStruct_100;
	float PrePadding_LumenGIVolumeStruct_104;
	float PrePadding_LumenGIVolumeStruct_108;
	float4 LumenGIVolumeStruct_RadianceProbeSettings[6];
	float4 LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias[6];
	float4 LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias[6];
	float2 LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution;
	float2 LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution;
	float2 LumenGIVolumeStruct_InvProbeDepthAtlasResolution;
	uint LumenGIVolumeStruct_OverrideCacheOcclusionLighting;
	uint LumenGIVolumeStruct_ShowBlackRadianceCacheLighting;
	uint LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask;
	uint LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift;
	float PrePadding_LumenGIVolumeStruct_440;
	float PrePadding_LumenGIVolumeStruct_444;
	float PrePadding_LumenGIVolumeStruct_448;
	float PrePadding_LumenGIVolumeStruct_452;
	float PrePadding_LumenGIVolumeStruct_456;
	float PrePadding_LumenGIVolumeStruct_460;
	float PrePadding_LumenGIVolumeStruct_464;
	float PrePadding_LumenGIVolumeStruct_468;
	float PrePadding_LumenGIVolumeStruct_472;
	float PrePadding_LumenGIVolumeStruct_476;
	float PrePadding_LumenGIVolumeStruct_480;
	float PrePadding_LumenGIVolumeStruct_484;
	float PrePadding_LumenGIVolumeStruct_488;
	float PrePadding_LumenGIVolumeStruct_492;
	float3 LumenGIVolumeStruct_TranslucencyGIGridZParams;
	uint LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift;
	int3 LumenGIVolumeStruct_TranslucencyGIGridSize;
}
Texture3D<uint> LumenGIVolumeStruct_RadianceProbeIndirectionTexture;
Texture2D<float3> LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas;
Texture2D<float3> LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas;
Texture2D<float2> LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas;
Texture2D<float> LumenGIVolumeStruct_RadianceCacheDepthAtlas;
StructuredBuffer<float4> LumenGIVolumeStruct_ProbeWorldOffset;
Texture3D LumenGIVolumeStruct_TranslucencyGIVolume0;
Texture3D LumenGIVolumeStruct_TranslucencyGIVolume1;
Texture3D LumenGIVolumeStruct_TranslucencyGIVolumeHistory0;
Texture3D LumenGIVolumeStruct_TranslucencyGIVolumeHistory1;
SamplerState LumenGIVolumeStruct_TranslucencyGIVolumeSampler;
/*atic const struct
{
	float ReprojectionRadiusScale;
	float ClipmapWorldExtent;
	float ClipmapDistributionBase;
	float InvClipmapFadeSize;
	int2 ProbeAtlasResolutionInProbes;
	uint RadianceProbeClipmapResolution;
	uint NumRadianceProbeClipmaps;
	uint RadianceProbeResolution;
	uint FinalProbeResolution;
	uint FinalRadianceAtlasMaxMip;
	uint CalculateIrradiance;
	uint IrradianceProbeResolution;
	uint OcclusionProbeResolution;
	uint NumProbesToTraceBudget;
	uint RadianceCacheStats;
	float4 RadianceProbeSettings[6];
	float4 PaddedWorldPositionToRadianceProbeCoordBias[6];
	float4 PaddedRadianceProbeCoordToWorldPositionBias[6];
	float2 InvProbeFinalRadianceAtlasResolution;
	float2 InvProbeFinalIrradianceAtlasResolution;
	float2 InvProbeDepthAtlasResolution;
	uint OverrideCacheOcclusionLighting;
	uint ShowBlackRadianceCacheLighting;
	uint ProbeAtlasResolutionModuloMask;
	uint ProbeAtlasResolutionDivideShift;
	Texture3D<uint> RadianceProbeIndirectionTexture;
	Texture2D<float3> RadianceCacheFinalRadianceAtlas;
	Texture2D<float3> RadianceCacheFinalIrradianceAtlas;
	Texture2D<float2> RadianceCacheProbeOcclusionAtlas;
	Texture2D<float> RadianceCacheDepthAtlas;
	StructuredBuffer<float4> ProbeWorldOffset;
	float3 TranslucencyGIGridZParams;
	uint TranslucencyGIGridPixelSizeShift;
	int3 TranslucencyGIGridSize;
	Texture3D TranslucencyGIVolume0;
	Texture3D TranslucencyGIVolume1;
	Texture3D TranslucencyGIVolumeHistory0;
	Texture3D TranslucencyGIVolumeHistory1;
	SamplerState TranslucencyGIVolumeSampler;
} LumenGIVolumeStruct = {LumenGIVolumeStruct_ReprojectionRadiusScale,LumenGIVolumeStruct_ClipmapWorldExtent,LumenGIVolumeStruct_ClipmapDistributionBase,LumenGIVolumeStruct_InvClipmapFadeSize,LumenGIVolumeStruct_ProbeAtlasResolutionInProbes,LumenGIVolumeStruct_RadianceProbeClipmapResolution,LumenGIVolumeStruct_NumRadianceProbeClipmaps,LumenGIVolumeStruct_RadianceProbeResolution,LumenGIVolumeStruct_FinalProbeResolution,LumenGIVolumeStruct_FinalRadianceAtlasMaxMip,LumenGIVolumeStruct_CalculateIrradiance,LumenGIVolumeStruct_IrradianceProbeResolution,LumenGIVolumeStruct_OcclusionProbeResolution,LumenGIVolumeStruct_NumProbesToTraceBudget,LumenGIVolumeStruct_RadianceCacheStats,LumenGIVolumeStruct_RadianceProbeSettings,LumenGIVolumeStruct_PaddedWorldPositionToRadianceProbeCoordBias,LumenGIVolumeStruct_PaddedRadianceProbeCoordToWorldPositionBias,LumenGIVolumeStruct_InvProbeFinalRadianceAtlasResolution,LumenGIVolumeStruct_InvProbeFinalIrradianceAtlasResolution,LumenGIVolumeStruct_InvProbeDepthAtlasResolution,LumenGIVolumeStruct_OverrideCacheOcclusionLighting,LumenGIVolumeStruct_ShowBlackRadianceCacheLighting,LumenGIVolumeStruct_ProbeAtlasResolutionModuloMask,LumenGIVolumeStruct_ProbeAtlasResolutionDivideShift,LumenGIVolumeStruct_RadianceProbeIndirectionTexture,LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas,LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas,LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas,LumenGIVolumeStruct_RadianceCacheDepthAtlas,LumenGIVolumeStruct_ProbeWorldOffset,LumenGIVolumeStruct_TranslucencyGIGridZParams,LumenGIVolumeStruct_TranslucencyGIGridPixelSizeShift,LumenGIVolumeStruct_TranslucencyGIGridSize,LumenGIVolumeStruct_TranslucencyGIVolume0,LumenGIVolumeStruct_TranslucencyGIVolume1,LumenGIVolumeStruct_TranslucencyGIVolumeHistory0,LumenGIVolumeStruct_TranslucencyGIVolumeHistory1,LumenGIVolumeStruct_TranslucencyGIVolumeSampler,*/
#line 29 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/TranslucentSelfShadow.ush"


cbuffer TranslucentSelfShadow
{
	float4x4 TranslucentSelfShadow_WorldToShadowMatrix;
	float4 TranslucentSelfShadow_ShadowUVMinMax;
	float4 TranslucentSelfShadow_DirectionalLightDirection;
	float4 TranslucentSelfShadow_DirectionalLightColor;
}
Texture2D TranslucentSelfShadow_Transmission0;
Texture2D TranslucentSelfShadow_Transmission1;
SamplerState TranslucentSelfShadow_Transmission0Sampler;
SamplerState TranslucentSelfShadow_Transmission1Sampler;
/*atic const struct
{
	float4x4 WorldToShadowMatrix;
	float4 ShadowUVMinMax;
	float4 DirectionalLightDirection;
	float4 DirectionalLightColor;
	Texture2D Transmission0;
	Texture2D Transmission1;
	SamplerState Transmission0Sampler;
	SamplerState Transmission1Sampler;
} TranslucentSelfShadow = {TranslucentSelfShadow_WorldToShadowMatrix,TranslucentSelfShadow_ShadowUVMinMax,TranslucentSelfShadow_DirectionalLightDirection,TranslucentSelfShadow_DirectionalLightColor,TranslucentSelfShadow_Transmission0,TranslucentSelfShadow_Transmission1,TranslucentSelfShadow_Transmission0Sampler,TranslucentSelfShadow_Transmission1Sampler,*/
#line 30 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/ForwardLightData.ush"


cbuffer ForwardLightData
{
	uint ForwardLightData_NumLocalLights;
	uint ForwardLightData_NumReflectionCaptures;
	uint ForwardLightData_HasDirectionalLight;
	uint ForwardLightData_NumGridCells;
	int3 ForwardLightData_CulledGridSize;
	uint ForwardLightData_MaxCulledLightsPerCell;
	uint ForwardLightData_LightGridPixelSizeShift;
	uint PrePadding_ForwardLightData_36;
	uint PrePadding_ForwardLightData_40;
	uint PrePadding_ForwardLightData_44;
	float3 ForwardLightData_LightGridZParams;
	float PrePadding_ForwardLightData_60;
	float3 ForwardLightData_DirectionalLightDirection;
	float PrePadding_ForwardLightData_76;
	float3 ForwardLightData_DirectionalLightColor;
	float ForwardLightData_DirectionalLightVolumetricScatteringIntensity;
	uint ForwardLightData_DirectionalLightShadowMapChannelMask;
	uint PrePadding_ForwardLightData_100;
	float2 ForwardLightData_DirectionalLightDistanceFadeMAD;
	uint ForwardLightData_NumDirectionalLightCascades;
	int ForwardLightData_DirectionalLightVSM;
	int PrePadding_ForwardLightData_120;
	int PrePadding_ForwardLightData_124;
	float4 ForwardLightData_CascadeEndDepths;
	float4x4 ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 ForwardLightData_DirectionalLightShadowmapMinMax[4];
	float4 ForwardLightData_DirectionalLightShadowmapAtlasBufferSize;
	float ForwardLightData_DirectionalLightDepthBias;
	uint ForwardLightData_DirectionalLightUseStaticShadowing;
	uint ForwardLightData_SimpleLightsEndIndex;
	uint ForwardLightData_ClusteredDeferredSupportedEndIndex;
	float4 ForwardLightData_DirectionalLightStaticShadowBufferSize;
	float4x4 ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow;
	uint ForwardLightData_DirectLightingShowFlag;
}
Texture2D ForwardLightData_DirectionalLightShadowmapAtlas;
SamplerState ForwardLightData_ShadowmapSampler;
Texture2D ForwardLightData_DirectionalLightStaticShadowmap;
SamplerState ForwardLightData_StaticShadowmapSampler;
Buffer<float4> ForwardLightData_ForwardLocalLightBuffer;
Buffer<uint> ForwardLightData_NumCulledLightsGrid;
Buffer<uint> ForwardLightData_CulledLightDataGrid;
Texture2D ForwardLightData_DummyRectLightSourceTexture;
/*atic const struct
{
	uint NumLocalLights;
	uint NumReflectionCaptures;
	uint HasDirectionalLight;
	uint NumGridCells;
	int3 CulledGridSize;
	uint MaxCulledLightsPerCell;
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	float3 DirectionalLightDirection;
	float3 DirectionalLightColor;
	float DirectionalLightVolumetricScatteringIntensity;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	uint NumDirectionalLightCascades;
	int DirectionalLightVSM;
	float4 CascadeEndDepths;
	float4x4 DirectionalLightTranslatedWorldToShadowMatrix[4];
	float4 DirectionalLightShadowmapMinMax[4];
	float4 DirectionalLightShadowmapAtlasBufferSize;
	float DirectionalLightDepthBias;
	uint DirectionalLightUseStaticShadowing;
	uint SimpleLightsEndIndex;
	uint ClusteredDeferredSupportedEndIndex;
	float4 DirectionalLightStaticShadowBufferSize;
	float4x4 DirectionalLightTranslatedWorldToStaticShadow;
	uint DirectLightingShowFlag;
	Texture2D DirectionalLightShadowmapAtlas;
	SamplerState ShadowmapSampler;
	Texture2D DirectionalLightStaticShadowmap;
	SamplerState StaticShadowmapSampler;
	Buffer<float4> ForwardLocalLightBuffer;
	Buffer<uint> NumCulledLightsGrid;
	Buffer<uint> CulledLightDataGrid;
	Texture2D DummyRectLightSourceTexture;
} ForwardLightData = {ForwardLightData_NumLocalLights,ForwardLightData_NumReflectionCaptures,ForwardLightData_HasDirectionalLight,ForwardLightData_NumGridCells,ForwardLightData_CulledGridSize,ForwardLightData_MaxCulledLightsPerCell,ForwardLightData_LightGridPixelSizeShift,ForwardLightData_LightGridZParams,ForwardLightData_DirectionalLightDirection,ForwardLightData_DirectionalLightColor,ForwardLightData_DirectionalLightVolumetricScatteringIntensity,ForwardLightData_DirectionalLightShadowMapChannelMask,ForwardLightData_DirectionalLightDistanceFadeMAD,ForwardLightData_NumDirectionalLightCascades,ForwardLightData_DirectionalLightVSM,ForwardLightData_CascadeEndDepths,ForwardLightData_DirectionalLightTranslatedWorldToShadowMatrix,ForwardLightData_DirectionalLightShadowmapMinMax,ForwardLightData_DirectionalLightShadowmapAtlasBufferSize,ForwardLightData_DirectionalLightDepthBias,ForwardLightData_DirectionalLightUseStaticShadowing,ForwardLightData_SimpleLightsEndIndex,ForwardLightData_ClusteredDeferredSupportedEndIndex,ForwardLightData_DirectionalLightStaticShadowBufferSize,ForwardLightData_DirectionalLightTranslatedWorldToStaticShadow,ForwardLightData_DirectLightingShowFlag,ForwardLightData_DirectionalLightShadowmapAtlas,ForwardLightData_ShadowmapSampler,ForwardLightData_DirectionalLightStaticShadowmap,ForwardLightData_StaticShadowmapSampler,ForwardLightData_ForwardLocalLightBuffer,ForwardLightData_NumCulledLightsGrid,ForwardLightData_CulledLightDataGrid,ForwardLightData_DummyRectLightSourceTexture,*/
#line 31 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DeferredLightUniforms.ush"


cbuffer DeferredLightUniforms
{
	float4 DeferredLightUniforms_ShadowMapChannelMask;
	float2 DeferredLightUniforms_DistanceFadeMAD;
	float DeferredLightUniforms_ContactShadowLength;
	float DeferredLightUniforms_ContactShadowNonShadowCastingIntensity;
	float DeferredLightUniforms_VolumetricScatteringIntensity;
	uint DeferredLightUniforms_ShadowedBits;
	uint DeferredLightUniforms_LightingChannelMask;
	float PrePadding_DeferredLightUniforms_44;
	float3 DeferredLightUniforms_TranslatedWorldPosition;
	float DeferredLightUniforms_InvRadius;
	float3 DeferredLightUniforms_Color;
	float DeferredLightUniforms_FalloffExponent;
	float3 DeferredLightUniforms_Direction;
	float DeferredLightUniforms_SpecularScale;
	float3 DeferredLightUniforms_Tangent;
	float DeferredLightUniforms_SourceRadius;
	float2 DeferredLightUniforms_SpotAngles;
	float DeferredLightUniforms_SoftSourceRadius;
	float DeferredLightUniforms_SourceLength;
	float DeferredLightUniforms_RectLightBarnCosAngle;
	float DeferredLightUniforms_RectLightBarnLength;
}
Texture2D DeferredLightUniforms_SourceTexture;
/*atic const struct
{
	float4 ShadowMapChannelMask;
	float2 DistanceFadeMAD;
	float ContactShadowLength;
	float ContactShadowNonShadowCastingIntensity;
	float VolumetricScatteringIntensity;
	uint ShadowedBits;
	uint LightingChannelMask;
	float3 TranslatedWorldPosition;
	float InvRadius;
	float3 Color;
	float FalloffExponent;
	float3 Direction;
	float SpecularScale;
	float3 Tangent;
	float SourceRadius;
	float2 SpotAngles;
	float SoftSourceRadius;
	float SourceLength;
	float RectLightBarnCosAngle;
	float RectLightBarnLength;
	Texture2D SourceTexture;
} DeferredLightUniforms = {DeferredLightUniforms_ShadowMapChannelMask,DeferredLightUniforms_DistanceFadeMAD,DeferredLightUniforms_ContactShadowLength,DeferredLightUniforms_ContactShadowNonShadowCastingIntensity,DeferredLightUniforms_VolumetricScatteringIntensity,DeferredLightUniforms_ShadowedBits,DeferredLightUniforms_LightingChannelMask,DeferredLightUniforms_TranslatedWorldPosition,DeferredLightUniforms_InvRadius,DeferredLightUniforms_Color,DeferredLightUniforms_FalloffExponent,DeferredLightUniforms_Direction,DeferredLightUniforms_SpecularScale,DeferredLightUniforms_Tangent,DeferredLightUniforms_SourceRadius,DeferredLightUniforms_SpotAngles,DeferredLightUniforms_SoftSourceRadius,DeferredLightUniforms_SourceLength,DeferredLightUniforms_RectLightBarnCosAngle,DeferredLightUniforms_RectLightBarnLength,DeferredLightUniforms_SourceTexture,*/
#line 32 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/RaytracingLightsDataPacked.ush"


cbuffer RaytracingLightsDataPacked
{
	uint RaytracingLightsDataPacked_Count;
	float RaytracingLightsDataPacked_IESLightProfileInvCount;
	uint RaytracingLightsDataPacked_CellCount;
	float RaytracingLightsDataPacked_CellScale;
}
Texture2D RaytracingLightsDataPacked_RectLightTexture0;
Texture2D RaytracingLightsDataPacked_RectLightTexture1;
Texture2D RaytracingLightsDataPacked_RectLightTexture2;
Texture2D RaytracingLightsDataPacked_RectLightTexture3;
Texture2D RaytracingLightsDataPacked_RectLightTexture4;
Texture2D RaytracingLightsDataPacked_RectLightTexture5;
Texture2D RaytracingLightsDataPacked_RectLightTexture6;
Texture2D RaytracingLightsDataPacked_RectLightTexture7;
SamplerState RaytracingLightsDataPacked_IESLightProfileTextureSampler;
Texture2D RaytracingLightsDataPacked_IESLightProfileTexture;
Texture2D RaytracingLightsDataPacked_SSProfilesTexture;
StructuredBuffer<uint4> RaytracingLightsDataPacked_LightDataBuffer;
Buffer<uint> RaytracingLightsDataPacked_LightIndices;
StructuredBuffer<uint4> RaytracingLightsDataPacked_LightCullingVolume;
/*atic const struct
{
	uint Count;
	float IESLightProfileInvCount;
	uint CellCount;
	float CellScale;
	Texture2D RectLightTexture0;
	Texture2D RectLightTexture1;
	Texture2D RectLightTexture2;
	Texture2D RectLightTexture3;
	Texture2D RectLightTexture4;
	Texture2D RectLightTexture5;
	Texture2D RectLightTexture6;
	Texture2D RectLightTexture7;
	SamplerState IESLightProfileTextureSampler;
	Texture2D IESLightProfileTexture;
	Texture2D SSProfilesTexture;
	StructuredBuffer<uint4> LightDataBuffer;
	Buffer<uint> LightIndices;
	StructuredBuffer<uint4> LightCullingVolume;
} RaytracingLightsDataPacked = {RaytracingLightsDataPacked_Count,RaytracingLightsDataPacked_IESLightProfileInvCount,RaytracingLightsDataPacked_CellCount,RaytracingLightsDataPacked_CellScale,RaytracingLightsDataPacked_RectLightTexture0,RaytracingLightsDataPacked_RectLightTexture1,RaytracingLightsDataPacked_RectLightTexture2,RaytracingLightsDataPacked_RectLightTexture3,RaytracingLightsDataPacked_RectLightTexture4,RaytracingLightsDataPacked_RectLightTexture5,RaytracingLightsDataPacked_RectLightTexture6,RaytracingLightsDataPacked_RectLightTexture7,RaytracingLightsDataPacked_IESLightProfileTextureSampler,RaytracingLightsDataPacked_IESLightProfileTexture,  RaytracingLightsDataPacked_SSProfilesTexture,   RaytracingLightsDataPacked_LightDataBuffer,   RaytracingLightsDataPacked_LightIndices,   RaytracingLightsDataPacked_LightCullingVolume,  */
#line 33 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/VirtualShadowMap.ush"


cbuffer VirtualShadowMap
{
	uint VirtualShadowMap_NumShadowMaps;
	uint VirtualShadowMap_NumDirectionalLights;
	uint VirtualShadowMap_MaxPhysicalPages;
	uint VirtualShadowMap_StaticCachedPixelOffsetY;
	uint VirtualShadowMap_StaticPageIndexOffset;
	uint VirtualShadowMap_PhysicalPageRowMask;
	uint VirtualShadowMap_PhysicalPageRowShift;
	uint VirtualShadowMap_PackedShadowMaskMaxLightCount;
	float4 VirtualShadowMap_RecPhysicalPoolSize;
	int2 VirtualShadowMap_PhysicalPoolSize;
	int2 VirtualShadowMap_PhysicalPoolSizePages;
}
ByteAddressBuffer VirtualShadowMap_ProjectionData;
StructuredBuffer<uint> VirtualShadowMap_PageTable;
StructuredBuffer<uint> VirtualShadowMap_PageFlags;
StructuredBuffer<uint4> VirtualShadowMap_PageRectBounds;
Texture2D<uint> VirtualShadowMap_PhysicalPagePool;
/*atic const struct
{
	uint NumShadowMaps;
	uint NumDirectionalLights;
	uint MaxPhysicalPages;
	uint StaticCachedPixelOffsetY;
	uint StaticPageIndexOffset;
	uint PhysicalPageRowMask;
	uint PhysicalPageRowShift;
	uint PackedShadowMaskMaxLightCount;
	float4 RecPhysicalPoolSize;
	int2 PhysicalPoolSize;
	int2 PhysicalPoolSizePages;
	ByteAddressBuffer ProjectionData;
	StructuredBuffer<uint> PageTable;
	StructuredBuffer<uint> PageFlags;
	StructuredBuffer<uint4> PageRectBounds;
	Texture2D<uint> PhysicalPagePool;
} VirtualShadowMap = {VirtualShadowMap_NumShadowMaps,VirtualShadowMap_NumDirectionalLights,VirtualShadowMap_MaxPhysicalPages,VirtualShadowMap_StaticCachedPixelOffsetY,VirtualShadowMap_StaticPageIndexOffset,VirtualShadowMap_PhysicalPageRowMask,VirtualShadowMap_PhysicalPageRowShift,VirtualShadowMap_PackedShadowMaskMaxLightCount,VirtualShadowMap_RecPhysicalPoolSize,VirtualShadowMap_PhysicalPoolSize,VirtualShadowMap_PhysicalPoolSizePages,VirtualShadowMap_ProjectionData,VirtualShadowMap_PageTable,VirtualShadowMap_PageFlags,VirtualShadowMap_PageRectBounds,VirtualShadowMap_PhysicalPagePool,*/
#line 34 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 35 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 36 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Strata.ush"
#line 37 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/DrawRectangleParameters.ush"
#line 38 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 39 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Primitive.ush"
#line 40 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstanceCulling.ush"
#line 41 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Bones.ush"


cbuffer Bones
{
	float3x4 Bones_BoneMatrices[256];
}
/*atic const struct
{
	float3x4 BoneMatrices[256];
} Bones = {Bones_BoneMatrices,*/
#line 42 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MaterialCollection0.ush"


cbuffer MaterialCollection0
{
	float4 MaterialCollection0_Vectors[11];
}
/*atic const struct
{
	float4 Vectors[11];
} MaterialCollection0 = {MaterialCollection0_Vectors,*/
#line 43 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/MaterialCollection1.ush"


cbuffer MaterialCollection1
{
	float4 MaterialCollection1_Vectors[2];
}
/*atic const struct
{
	float4 Vectors[2];
} MaterialCollection1 = {MaterialCollection1_Vectors,*/
#line 44 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 1 "/Engine/Generated/UniformBuffers/Material.ush"


cbuffer Material
{
	float4 Material_PreshaderBuffer[108];
}
Texture2D Material_Texture2D_0;
SamplerState Material_Texture2D_0Sampler;
Texture2D Material_Texture2D_1;
SamplerState Material_Texture2D_1Sampler;
Texture2D Material_Texture2D_2;
SamplerState Material_Texture2D_2Sampler;
Texture2D Material_Texture2D_3;
SamplerState Material_Texture2D_3Sampler;
Texture2D Material_Texture2D_4;
SamplerState Material_Texture2D_4Sampler;
Texture2D Material_Texture2D_5;
SamplerState Material_Texture2D_5Sampler;
Texture2D Material_Texture2D_6;
SamplerState Material_Texture2D_6Sampler;
Texture2D Material_Texture2D_7;
SamplerState Material_Texture2D_7Sampler;
Texture2D Material_Texture2D_8;
SamplerState Material_Texture2D_8Sampler;
Texture2D Material_Texture2D_9;
SamplerState Material_Texture2D_9Sampler;
Texture2D Material_Texture2D_10;
SamplerState Material_Texture2D_10Sampler;
Texture2D Material_Texture2D_11;
SamplerState Material_Texture2D_11Sampler;
Texture2D Material_Texture2D_12;
SamplerState Material_Texture2D_12Sampler;
Texture2D Material_Texture2D_13;
SamplerState Material_Texture2D_13Sampler;
Texture2D Material_Texture2D_14;
SamplerState Material_Texture2D_14Sampler;
Texture2D Material_Texture2D_15;
SamplerState Material_Texture2D_15Sampler;
Texture2D Material_Texture2D_16;
SamplerState Material_Texture2D_16Sampler;
Texture2D Material_Texture2D_17;
SamplerState Material_Texture2D_17Sampler;
Texture2D Material_Texture2D_18;
SamplerState Material_Texture2D_18Sampler;
Texture2D Material_Texture2D_19;
SamplerState Material_Texture2D_19Sampler;
Texture2D Material_Texture2D_20;
SamplerState Material_Texture2D_20Sampler;
Texture2D Material_Texture2D_21;
SamplerState Material_Texture2D_21Sampler;
Texture2D Material_Texture2D_22;
SamplerState Material_Texture2D_22Sampler;
Texture2D Material_Texture2D_23;
SamplerState Material_Texture2D_23Sampler;
Texture2D Material_Texture2D_24;
SamplerState Material_Texture2D_24Sampler;
Texture2D Material_Texture2D_25;
SamplerState Material_Texture2D_25Sampler;
Texture2D Material_Texture2D_26;
SamplerState Material_Texture2D_26Sampler;
Texture2D Material_Texture2D_27;
SamplerState Material_Texture2D_27Sampler;
Texture2D Material_Texture2D_28;
SamplerState Material_Texture2D_28Sampler;
Texture2D Material_Texture2D_29;
SamplerState Material_Texture2D_29Sampler;
Texture2D Material_Texture2D_30;
SamplerState Material_Texture2D_30Sampler;
Texture2D Material_Texture2D_31;
SamplerState Material_Texture2D_31Sampler;
Texture2D Material_Texture2D_32;
SamplerState Material_Texture2D_32Sampler;
Texture2D Material_Texture2D_33;
SamplerState Material_Texture2D_33Sampler;
Texture2D Material_Texture2D_34;
SamplerState Material_Texture2D_34Sampler;
Texture2D Material_Texture2D_35;
SamplerState Material_Texture2D_35Sampler;
Texture2D Material_Texture2D_36;
SamplerState Material_Texture2D_36Sampler;
Texture2D Material_Texture2D_37;
SamplerState Material_Texture2D_37Sampler;
Texture2D Material_Texture2D_38;
SamplerState Material_Texture2D_38Sampler;
Texture2D Material_Texture2D_39;
SamplerState Material_Texture2D_39Sampler;
SamplerState Material_Wrap_WorldGroupSettings;
SamplerState Material_Clamp_WorldGroupSettings;
/*atic const struct
{
	float4 PreshaderBuffer[108];
	Texture2D Texture2D_0;
	SamplerState Texture2D_0Sampler;
	Texture2D Texture2D_1;
	SamplerState Texture2D_1Sampler;
	Texture2D Texture2D_2;
	SamplerState Texture2D_2Sampler;
	Texture2D Texture2D_3;
	SamplerState Texture2D_3Sampler;
	Texture2D Texture2D_4;
	SamplerState Texture2D_4Sampler;
	Texture2D Texture2D_5;
	SamplerState Texture2D_5Sampler;
	Texture2D Texture2D_6;
	SamplerState Texture2D_6Sampler;
	Texture2D Texture2D_7;
	SamplerState Texture2D_7Sampler;
	Texture2D Texture2D_8;
	SamplerState Texture2D_8Sampler;
	Texture2D Texture2D_9;
	SamplerState Texture2D_9Sampler;
	Texture2D Texture2D_10;
	SamplerState Texture2D_10Sampler;
	Texture2D Texture2D_11;
	SamplerState Texture2D_11Sampler;
	Texture2D Texture2D_12;
	SamplerState Texture2D_12Sampler;
	Texture2D Texture2D_13;
	SamplerState Texture2D_13Sampler;
	Texture2D Texture2D_14;
	SamplerState Texture2D_14Sampler;
	Texture2D Texture2D_15;
	SamplerState Texture2D_15Sampler;
	Texture2D Texture2D_16;
	SamplerState Texture2D_16Sampler;
	Texture2D Texture2D_17;
	SamplerState Texture2D_17Sampler;
	Texture2D Texture2D_18;
	SamplerState Texture2D_18Sampler;
	Texture2D Texture2D_19;
	SamplerState Texture2D_19Sampler;
	Texture2D Texture2D_20;
	SamplerState Texture2D_20Sampler;
	Texture2D Texture2D_21;
	SamplerState Texture2D_21Sampler;
	Texture2D Texture2D_22;
	SamplerState Texture2D_22Sampler;
	Texture2D Texture2D_23;
	SamplerState Texture2D_23Sampler;
	Texture2D Texture2D_24;
	SamplerState Texture2D_24Sampler;
	Texture2D Texture2D_25;
	SamplerState Texture2D_25Sampler;
	Texture2D Texture2D_26;
	SamplerState Texture2D_26Sampler;
	Texture2D Texture2D_27;
	SamplerState Texture2D_27Sampler;
	Texture2D Texture2D_28;
	SamplerState Texture2D_28Sampler;
	Texture2D Texture2D_29;
	SamplerState Texture2D_29Sampler;
	Texture2D Texture2D_30;
	SamplerState Texture2D_30Sampler;
	Texture2D Texture2D_31;
	SamplerState Texture2D_31Sampler;
	Texture2D Texture2D_32;
	SamplerState Texture2D_32Sampler;
	Texture2D Texture2D_33;
	SamplerState Texture2D_33Sampler;
	Texture2D Texture2D_34;
	SamplerState Texture2D_34Sampler;
	Texture2D Texture2D_35;
	SamplerState Texture2D_35Sampler;
	Texture2D Texture2D_36;
	SamplerState Texture2D_36Sampler;
	Texture2D Texture2D_37;
	SamplerState Texture2D_37Sampler;
	Texture2D Texture2D_38;
	SamplerState Texture2D_38Sampler;
	Texture2D Texture2D_39;
	SamplerState Texture2D_39Sampler;
	SamplerState Wrap_WorldGroupSettings;
	SamplerState Clamp_WorldGroupSettings;
} Material = {Material_PreshaderBuffer,Material_Texture2D_0,Material_Texture2D_0Sampler,Material_Texture2D_1,Material_Texture2D_1Sampler,Material_Texture2D_2,Material_Texture2D_2Sampler,Material_Texture2D_3,Material_Texture2D_3Sampler,Material_Texture2D_4,Material_Texture2D_4Sampler,Material_Texture2D_5,Material_Texture2D_5Sampler,Material_Texture2D_6,Material_Texture2D_6Sampler,Material_Texture2D_7,Material_Texture2D_7Sampler,Material_Texture2D_8,Material_Texture2D_8Sampler,Material_Texture2D_9,Material_Texture2D_9Sampler,Material_Texture2D_10,Material_Texture2D_10Sampler,Material_Texture2D_11,Material_Texture2D_11Sampler,Material_Texture2D_12,Material_Texture2D_12Sampler,Material_Texture2D_13,Material_Texture2D_13Sampler,Material_Texture2D_14,Material_Texture2D_14Sampler,Material_Texture2D_15,Material_Texture2D_15Sampler,Material_Texture2D_16,Material_Texture2D_16Sampler,Material_Texture2D_17,Material_Texture2D_17Sampler,Material_Texture2D_18,Material_Texture2D_18Sampler,Material_Texture2D_19,Material_Texture2D_19Sampler,Material_Texture2D_20,Material_Texture2D_20Sampler,Material_Texture2D_21,Material_Texture2D_21Sampler,Material_Texture2D_22,Material_Texture2D_22Sampler,Material_Texture2D_23,Material_Texture2D_23Sampler,Material_Texture2D_24,Material_Texture2D_24Sampler,Material_Texture2D_25,Material_Texture2D_25Sampler,Material_Texture2D_26,Material_Texture2D_26Sampler,Material_Texture2D_27,Material_Texture2D_27Sampler,Material_Texture2D_28,Material_Texture2D_28Sampler,Material_Texture2D_29,Material_Texture2D_29Sampler,Material_Texture2D_30,Material_Texture2D_30Sampler,Material_Texture2D_31,Material_Texture2D_31Sampler,Material_Texture2D_32,Material_Texture2D_32Sampler,Material_Texture2D_33,Material_Texture2D_33Sampler,Material_Texture2D_34,Material_Texture2D_34Sampler,Material_Texture2D_35,Material_Texture2D_35Sampler,Material_Texture2D_36,Material_Texture2D_36Sampler,Material_Texture2D_37,Material_Texture2D_37Sampler,Material_Texture2D_38,Material_Texture2D_38Sampler,Material_Texture2D_39,Material_Texture2D_39Sampler,Material_Wrap_WorldGroupSettings,Material_Clamp_WorldGroupSettings,*/
#line 45 "/Engine/Generated/GeneratedUniformBuffers.ush"
#line 170 "/Engine/Private/Common.ush"
#line 172 "/Engine/Private/Common.ush"
#line 1 "CommonViewUniformBuffer.ush"
#line 12 "/Engine/Private/CommonViewUniformBuffer.ush"
float2 GetTanHalfFieldOfView()
{
	return float2(View_ClipToView[0][0], View_ClipToView[1][1]);
}

float2 GetPrevTanHalfFieldOfView()
{
	return float2(View_PrevClipToView[0][0], View_PrevClipToView[1][1]);
}



float2 GetCotanHalfFieldOfView()
{
	return float2(View_ViewToClip[0][0], View_ViewToClip[1][1]);
}



float2 GetPrevCotanHalfFieldOfView()
{
	return float2(View_PrevViewToClip[0][0], View_PrevViewToClip[1][1]);
}


uint GetPowerOfTwoModulatedFrameIndex(uint Pow2Modulus)
{

	return View_StateFrameIndex & uint(Pow2Modulus - 1);
}
#line 173 "/Engine/Private/Common.ush"



float FmodFloor(float Lhs, float Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float2 FmodFloor(float2 Lhs, float2 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float3 FmodFloor(float3 Lhs, float3 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}

float4 FmodFloor(float4 Lhs, float4 Rhs)
{
	return Lhs - floor(Lhs / Rhs) * Rhs;
}
#line 196 "/Engine/Private/Common.ush"
#line 1 "LargeWorldCoordinates.ush"
#line 5 "/Engine/Private/LargeWorldCoordinates.ush"
struct FLWCScalar
{
	float Tile;
	float Offset;
};

struct FLWCVector2
{
	float2 Tile;
	float2 Offset;
};

struct FLWCVector3
{
	float3 Tile;
	float3 Offset;
};

struct FLWCVector4
{
	float4 Tile;
	float4 Offset;
};


struct FLWCMatrix
{
	float4x4 M;
	float3 Tile;
};


struct FLWCInverseMatrix
{
	float4x4 M;
	float3 Tile;
	int Dummy;
};




float LWCGetTileOffset(FLWCScalar V) { return  ((V).Tile)  *  2097152.00f ; }
float2 LWCGetTileOffset(FLWCVector2 V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCVector3 V) { return  ((V).Tile)  *  2097152.00f ; }
float4 LWCGetTileOffset(FLWCVector4 V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCMatrix V) { return  ((V).Tile)  *  2097152.00f ; }
float3 LWCGetTileOffset(FLWCInverseMatrix V) { return  ((V).Tile)  *  2097152.00f ; }

float4x4 Make4x3Matrix(float4x4 M)
{

	float4x4 Result;
	Result[0] = float4(M[0].xyz, 0.0f);
	Result[1] = float4(M[1].xyz, 0.0f);
	Result[2] = float4(M[2].xyz, 0.0f);
	Result[3] = float4(M[3].xyz, 1.0f);
	return Result;
}

float4x4 MakeTranslationMatrix(float3 Offset)
{
	float4x4 Result;
	Result[0] = float4(1.0f, 0.0f, 0.0f, 0.0f);
	Result[1] = float4(0.0f, 1.0f, 0.0f, 0.0f);
	Result[2] = float4(0.0f, 0.0f, 1.0f, 0.0f);
	Result[3] = float4(Offset, 1.0f);
	return Result;
}

FLWCScalar MakeLWCScalar(float Tile, float Offset)
{
	FLWCScalar Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector2 MakeLWCVector2(float2 Tile, float2 Offset)
{
	FLWCVector2 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector3 MakeLWCVector3(float3 Tile, float3 Offset)
{
	FLWCVector3 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float4 Tile, float4 Offset)
{
	FLWCVector4 Result;
	(Result).Tile = (Tile) ;
	Result.Offset = Offset;
	return Result;
}

FLWCVector4 MakeLWCVector4(float3 Tile, float4 Offset)
{
	return MakeLWCVector4(float4(Tile, 0), Offset);
}

FLWCVector4 MakeLWCVector4(FLWCVector3 XYZ, float W)
{
	return MakeLWCVector4( ((XYZ).Tile) , float4(XYZ.Offset, W));
}

FLWCScalar MakeLWCVector(FLWCScalar X) { return X; }

FLWCVector2 MakeLWCVector(FLWCScalar X, FLWCScalar Y) { return MakeLWCVector2(float2( ((X).Tile) ,  ((Y).Tile) ), float2(X.Offset, Y.Offset)); }

FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z) { return MakeLWCVector3(float3( ((X).Tile) ,  ((Y).Tile) ,  ((Z).Tile) ), float3(X.Offset, Y.Offset, Z.Offset)); }
FLWCVector3 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ) { return MakeLWCVector3(float3( ((X).Tile) ,  ((YZ).Tile) ), float3(X.Offset, YZ.Offset)); }
FLWCVector3 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z) { return MakeLWCVector3(float3( ((XY).Tile) ,  ((Z).Tile) ), float3(XY.Offset, Z.Offset)); }

FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( ((X).Tile) ,  ((Y).Tile) ,  ((Z).Tile) ,  ((W).Tile) ), float4(X.Offset, Y.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCScalar Y, FLWCVector2 ZW) { return MakeLWCVector4(float4( ((X).Tile) ,  ((Y).Tile) ,  ((ZW).Tile) ), float4(X.Offset, Y.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector2 YZ, FLWCScalar W) { return MakeLWCVector4(float4( ((X).Tile) ,  ((YZ).Tile) ,  ((W).Tile) ), float4(X.Offset, YZ.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCScalar Z, FLWCScalar W) { return MakeLWCVector4(float4( ((XY).Tile) ,  ((Z).Tile) ,  ((W).Tile) ), float4(XY.Offset, Z.Offset, W.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector2 XY, FLWCVector2 ZW) { return MakeLWCVector4(float4( ((XY).Tile) ,  ((ZW).Tile) ), float4(XY.Offset, ZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCScalar X, FLWCVector3 YZW) { return MakeLWCVector4(float4( ((X).Tile) ,  ((YZW).Tile) ), float4(X.Offset, YZW.Offset)); }
FLWCVector4 MakeLWCVector(FLWCVector3 XYZ, FLWCScalar W) { return MakeLWCVector4(float4( ((XYZ).Tile) ,  ((W).Tile) ), float4(XYZ.Offset, W.Offset)); }

FLWCMatrix MakeLWCMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	(Result).Tile = (Tile) ;
	Result.M = InMatrix;
	return Result;
}

FLWCMatrix MakeLWCMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCMatrix Result;
	(Result).Tile = (Tile) ;
	Result.M = Make4x3Matrix(InMatrix);
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	(Result).Tile = (-Tile) ;
	Result.M = InMatrix;
	Result.Dummy = 0;
	return Result;
}

FLWCInverseMatrix MakeLWCInverseMatrix4x3(float3 Tile, float4x4 InMatrix)
{
	FLWCInverseMatrix Result;
	(Result).Tile = (-Tile) ;
	Result.M = Make4x3Matrix(InMatrix);
	Result.Dummy = 0;
	return Result;
}



FLWCScalar LWCGetComponent(FLWCScalar V, int C) { return V; }
FLWCScalar LWCGetComponent(FLWCVector2 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector3 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }
FLWCScalar LWCGetComponent(FLWCVector4 V, int C) { return MakeLWCScalar( ((V).Tile) [C], V.Offset[C]); }






float LWCToFloat(FLWCScalar Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float2 LWCToFloat(FLWCVector2 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float3 LWCToFloat(FLWCVector3 Value) { return LWCGetTileOffset(Value) + Value.Offset; }
float4 LWCToFloat(FLWCVector4 Value) { return LWCGetTileOffset(Value) + Value.Offset; }

float4x4 LWCToFloat(FLWCMatrix Value)
{
	float4x4 Result = Value.M;
	Result[3].xyz = LWCGetTileOffset(Value) + Result[3].xyz;
	return Result;
}

float4x4 LWCToFloat(FLWCInverseMatrix Value)
{
	float4x4 TileOffset = MakeTranslationMatrix(LWCGetTileOffset(Value));
	return mul(TileOffset, Value.M);
}

float3x3 LWCToFloat3x3(FLWCMatrix Value)
{
	return (float3x3)Value.M;
}

float3x3 LWCToFloat3x3(FLWCInverseMatrix Value)
{
	return (float3x3)Value.M;
}


float LWCToFloat(float Value) { return Value; }
float2 LWCToFloat(float2 Value) { return Value; }
float3 LWCToFloat(float3 Value) { return Value; }
float4 LWCToFloat(float4 Value) { return Value; }
float4x4 LWCToFloat(float4x4 Value) { return Value; }


FLWCScalar LWCPromote(FLWCScalar Value) { return Value; }
FLWCVector2 LWCPromote(FLWCVector2 Value) { return Value; }
FLWCVector3 LWCPromote(FLWCVector3 Value) { return Value; }
FLWCVector4 LWCPromote(FLWCVector4 Value) { return Value; }
FLWCMatrix LWCPromote(FLWCMatrix Value) { return Value; }
FLWCInverseMatrix LWCPromote(FLWCInverseMatrix Value) { return Value; }

FLWCScalar LWCPromote(float Value) { return MakeLWCScalar(0, Value); }
FLWCVector2 LWCPromote(float2 Value) { return MakeLWCVector2((float2)0, Value); }
FLWCVector3 LWCPromote(float3 Value) { return MakeLWCVector3((float3)0, Value); }
FLWCVector4 LWCPromote(float4 Value) { return MakeLWCVector4((float4)0, Value); }
FLWCMatrix LWCPromote(float4x4 Value) { return MakeLWCMatrix((float3)0, Value); }
FLWCInverseMatrix LWCPromoteInverse(float4x4 Value) { return MakeLWCInverseMatrix((float3)0, Value); }

FLWCVector3 LWCMultiply(float3 Position, FLWCMatrix InMatrix)
{

	float3 Offset = (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
	return MakeLWCVector3( ((InMatrix).Tile) , Offset);
}

FLWCVector3 LWCInvariantMultiply(float3 Position, FLWCMatrix InMatrix)
{

	float3 Offset =  (Position.xxx * InMatrix.M[0].xyz + Position.yyy * InMatrix.M[1].xyz + Position.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz ;
	return MakeLWCVector3( ((InMatrix).Tile) , Offset);
}

FLWCVector4 LWCMultiply(float4 Position, FLWCMatrix InMatrix)
{
	float4 Offset = mul(Position, InMatrix.M);
	return MakeLWCVector4( ((InMatrix).Tile) , Offset);
}

float3 LWCMultiply(FLWCVector3 Position, FLWCInverseMatrix InMatrix)
{
	float3 LocalPosition = LWCToFloat(MakeLWCVector3( ((Position).Tile)  +  ((InMatrix).Tile) , Position.Offset));
	return (LocalPosition.xxx * InMatrix.M[0].xyz + LocalPosition.yyy * InMatrix.M[1].xyz + LocalPosition.zzz * InMatrix.M[2].xyz) + InMatrix.M[3].xyz;
}

float4 LWCMultiply(FLWCVector4 Position, FLWCInverseMatrix InMatrix)
{
	float4 LocalPosition = LWCToFloat(MakeLWCVector4( ((Position).Tile)  + float4( ((InMatrix).Tile) , 0), Position.Offset));
	return mul(LocalPosition, InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

float3 LWCMultiplyVector(float3 Vector, FLWCInverseMatrix InMatrix)
{
	return mul(Vector, (float3x3)InMatrix.M);
}

FLWCMatrix LWCMultiply(float4x4 Lhs, FLWCMatrix Rhs)
{
	float4x4 ResultMatrix = mul(Lhs, Rhs.M);
	return MakeLWCMatrix( ((Rhs).Tile) , ResultMatrix);
}

FLWCInverseMatrix LWCMultiply(FLWCInverseMatrix Lhs, float4x4 Rhs)
{
	float4x4 ResultMatrix = mul(Lhs.M, Rhs);
	return MakeLWCInverseMatrix(- ((Lhs).Tile) , ResultMatrix);
}

float4x4 LWCMultiply(FLWCMatrix Lhs, FLWCInverseMatrix Rhs)
{

	float4x4 Result = Lhs.M;
	Result = mul(Result, MakeTranslationMatrix(( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f ));
	Result = mul(Result, Rhs.M);
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCMatrix Lhs, FLWCVector3 Rhs)
{
	float4x4 Result = Lhs.M;
	Result[3].xyz += ( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f ;
	Result[3].xyz += Rhs.Offset;
	return Result;
}

FLWCMatrix LWCMultiplyTranslation(float4x4 Lhs, FLWCVector3 Rhs)
{
	FLWCMatrix Result = MakeLWCMatrix( ((Rhs).Tile) , Lhs);
	Result.M[3].xyz += Rhs.Offset;
	return Result;
}

float4x4 LWCMultiplyTranslation(FLWCVector3 Lhs, FLWCInverseMatrix Rhs)
{
	float3 Offset = ( ((Lhs).Tile)  +  ((Rhs).Tile) ) *  2097152.00f  + Lhs.Offset;
	return mul(MakeTranslationMatrix(Offset), Rhs.M);
}

FLWCInverseMatrix LWCMultiplyTranslation(FLWCVector3 Lhs, float4x4 Rhs)
{
	FLWCInverseMatrix Result = MakeLWCInverseMatrix(- ((Lhs).Tile) , Rhs);
	Result.M = mul(MakeTranslationMatrix(Lhs.Offset), Result.M);
	return Result;
}

FLWCVector3 LWCGetOrigin(FLWCMatrix InMatrix)
{
	return MakeLWCVector3( ((InMatrix).Tile) , InMatrix.M[3].xyz);
}

void LWCSetOrigin(inout FLWCMatrix InOutMatrix, FLWCVector3 Origin)
{
	(InOutMatrix).Tile = ( ((Origin).Tile) ) ;
	InOutMatrix.M[3].xyz = Origin.Offset;
}
#line 335 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCScalar  LWCNormalizeTile( FLWCScalar  V)
{
	float  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCScalar (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCScalar  LWCMakeIntTile( FLWCScalar  V)
{
	float  IntTile = floor(V.Tile);
	return  MakeLWCScalar (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float  LWCSqrtUnscaled( FLWCScalar  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCRsqrtUnscaled( FLWCScalar  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCRcpUnscaled( FLWCScalar  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float  LWCSqrtScaled( FLWCScalar  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float  LWCRsqrtScaled( FLWCScalar  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float  LWCRcpScaled( FLWCScalar  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float  LWCSqrt( FLWCScalar  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float  LWCRsqrt( FLWCScalar  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float  LWCRcp( FLWCScalar  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool LWCGreater( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool LWCGreater( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool LWCGreater( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool LWCGreaterEqual( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool LWCGreaterEqual( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool LWCGreaterEqual( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool LWCLess( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool LWCLess( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool LWCLess( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool LWCLessEqual( FLWCScalar Lhs, FLWCScalar Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool LWCLessEqual( float Lhs, FLWCScalar Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool LWCLessEqual( FLWCScalar Lhs, float Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float  LWCDdx( FLWCScalar  V) { return ddx( ((V).Tile) ) *  2097152.00f  + ddx(V.Offset); }
float  LWCDdy( FLWCScalar  V) { return ddy( ((V).Tile) ) *  2097152.00f  + ddy(V.Offset); }


FLWCScalar  LWCAdd( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCScalar  LWCAdd( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCScalar  LWCAdd( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCScalar  LWCSubtract( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCScalar  LWCSubtract( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCScalar  LWCSubtract( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool  LWCEquals( FLWCScalar  Lhs,  FLWCScalar  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool  LWCEquals( float  Lhs,  FLWCScalar  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool  LWCEquals( FLWCScalar  Lhs,  float  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool  LWCEqualsApprox( FLWCScalar  Lhs,  FLWCScalar  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float )Threshold;
}
bool  LWCEqualsApprox( float  Lhs,  FLWCScalar  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float )Threshold;
}
bool  LWCEqualsApprox( FLWCScalar  Lhs,  float  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float )Threshold;
}

FLWCScalar  LWCSelect( bool  S,  FLWCScalar  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (S ?  ((Lhs).Tile)  :  ((Rhs).Tile) , S ? Lhs.Offset : Rhs.Offset); }
FLWCScalar  LWCSelect( bool  S,  float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (S ? ( float )0 :  ((Rhs).Tile) , S ? Lhs : Rhs.Offset); }
FLWCScalar  LWCSelect( bool  S,  FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar (S ?  ((Lhs).Tile)  : ( float )0, S ? Lhs.Offset : Rhs); }

FLWCScalar  LWCNegate( FLWCScalar  V) { return  MakeLWCScalar (- ((V).Tile) , -V.Offset); }

float  LWCFrac( FLWCScalar  V)
{
	float  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCScalar  LWCFloor( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , floor(VN.Offset)); }
FLWCScalar  LWCCeil( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCScalar  LWCRound( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , round(VN.Offset)); }
FLWCScalar  LWCTrunc( FLWCScalar  V) {  FLWCScalar  VN = LWCMakeIntTile(V); return  MakeLWCScalar ( ((VN).Tile) , trunc(VN.Offset)); }


float  LWCSign( FLWCScalar  V) { return  float (sign(LWCToFloat(V))); }
float  LWCSaturate( FLWCScalar  V) { return saturate(LWCToFloat(V)); }
float  LWCClampScalar( FLWCScalar  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCScalar  LWCMultiply( FLWCScalar  Lhs,  FLWCScalar  Rhs)
{
	return  MakeLWCScalar ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCScalar  LWCMultiply( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCScalar  LWCMultiply( FLWCScalar  Lhs,  float  Rhs) { return  MakeLWCScalar ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCScalar  LWCDivide( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCScalar  LWCDivide( FLWCScalar  Lhs,  float  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCScalar  LWCDivide( float  Lhs,  FLWCScalar  Rhs) { return  MakeLWCScalar (( float )0, Lhs * LWCRcp(Rhs)); }


FLWCScalar  LWCLerp( FLWCScalar  Lhs,  FLWCScalar  Rhs,  float  S)
{
	return  MakeLWCScalar (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float  LWCFmod( FLWCScalar  Lhs,  float  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float  LWCFmodFloor( FLWCScalar  Lhs,  float  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float  LWCFmodFloorPI( FLWCScalar  V)
{
	return LWCFmodFloor(V, PI);

}
float  LWCFmodFloor2PI( FLWCScalar  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float  LWCSin( FLWCScalar  V) { return sin(LWCFmodFloor2PI(V)); }
float  LWCCos( FLWCScalar  V) { return cos(LWCFmodFloor2PI(V)); }
float  LWCTan( FLWCScalar  V) { return tan(LWCFmodFloorPI(V)); }
float  LWCASin( FLWCScalar  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float  LWCACos( FLWCScalar  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float  LWCATan( FLWCScalar  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float  LWCSmoothStep( FLWCScalar  Lhs,  FLWCScalar  Rhs,  FLWCScalar  S)
{
	float  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCScalar  LWCMin( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMin( float  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMin( FLWCScalar  Lhs,  float  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( float  Lhs,  FLWCScalar  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCScalar  LWCMax( FLWCScalar  Lhs,  float  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCScalar  LWCAbs( FLWCScalar  V) { return LWCSelect(LWCLess(V, ( float )0), LWCNegate(V), V); }

float  LWCStep( FLWCScalar  Lhs,  FLWCScalar  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float )1.0f : ( float )0.0f; }
float  LWCStep( FLWCScalar  Lhs,  float  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float )1.0f : ( float )0.0f; }
float  LWCStep( float  Lhs,  FLWCScalar  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float )1.0f : ( float )0.0f; }


FLWCScalar  LWCSquareScaled( FLWCScalar  V)
{
	float  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCScalar ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 336 "/Engine/Private/LargeWorldCoordinates.ush"
#line 345 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector2  LWCNormalizeTile( FLWCVector2  V)
{
	float2  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector2 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector2  LWCMakeIntTile( FLWCVector2  V)
{
	float2  IntTile = floor(V.Tile);
	return  MakeLWCVector2 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float2  LWCSqrtUnscaled( FLWCVector2  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCRsqrtUnscaled( FLWCVector2  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCRcpUnscaled( FLWCVector2  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float2  LWCSqrtScaled( FLWCVector2  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float2  LWCRsqrtScaled( FLWCVector2  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float2  LWCRcpScaled( FLWCVector2  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float2  LWCSqrt( FLWCVector2  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float2  LWCRsqrt( FLWCVector2  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float2  LWCRcp( FLWCVector2  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool2 LWCGreater( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool2 LWCGreater( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool2 LWCGreater( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool2 LWCGreaterEqual( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool2 LWCGreaterEqual( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool2 LWCGreaterEqual( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool2 LWCLess( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool2 LWCLess( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool2 LWCLess( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool2 LWCLessEqual( FLWCVector2 Lhs, FLWCVector2 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool2 LWCLessEqual( float2 Lhs, FLWCVector2 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool2 LWCLessEqual( FLWCVector2 Lhs, float2 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float2  LWCDdx( FLWCVector2  V) { return ddx( ((V).Tile) ) *  2097152.00f  + ddx(V.Offset); }
float2  LWCDdy( FLWCVector2  V) { return ddy( ((V).Tile) ) *  2097152.00f  + ddy(V.Offset); }


FLWCVector2  LWCAdd( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector2  LWCAdd( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector2  LWCAdd( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector2  LWCSubtract( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector2  LWCSubtract( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector2  LWCSubtract( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool2  LWCEquals( FLWCVector2  Lhs,  FLWCVector2  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool2  LWCEquals( float2  Lhs,  FLWCVector2  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool2  LWCEquals( FLWCVector2  Lhs,  float2  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool2  LWCEqualsApprox( FLWCVector2  Lhs,  FLWCVector2  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float2 )Threshold;
}
bool2  LWCEqualsApprox( float2  Lhs,  FLWCVector2  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float2 )Threshold;
}
bool2  LWCEqualsApprox( FLWCVector2  Lhs,  float2  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float2 )Threshold;
}

FLWCVector2  LWCSelect( bool2  S,  FLWCVector2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (S ?  ((Lhs).Tile)  :  ((Rhs).Tile) , S ? Lhs.Offset : Rhs.Offset); }
FLWCVector2  LWCSelect( bool2  S,  float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (S ? ( float2 )0 :  ((Rhs).Tile) , S ? Lhs : Rhs.Offset); }
FLWCVector2  LWCSelect( bool2  S,  FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 (S ?  ((Lhs).Tile)  : ( float2 )0, S ? Lhs.Offset : Rhs); }

FLWCVector2  LWCNegate( FLWCVector2  V) { return  MakeLWCVector2 (- ((V).Tile) , -V.Offset); }

float2  LWCFrac( FLWCVector2  V)
{
	float2  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector2  LWCFloor( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector2  LWCCeil( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector2  LWCRound( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector2  LWCTrunc( FLWCVector2  V) {  FLWCVector2  VN = LWCMakeIntTile(V); return  MakeLWCVector2 ( ((VN).Tile) , trunc(VN.Offset)); }


float2  LWCSign( FLWCVector2  V) { return  float2 (sign(LWCToFloat(V))); }
float2  LWCSaturate( FLWCVector2  V) { return saturate(LWCToFloat(V)); }
float2  LWCClampScalar( FLWCVector2  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector2  LWCMultiply( FLWCVector2  Lhs,  FLWCVector2  Rhs)
{
	return  MakeLWCVector2 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector2  LWCMultiply( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector2  LWCMultiply( FLWCVector2  Lhs,  float2  Rhs) { return  MakeLWCVector2 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector2  LWCDivide( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector2  LWCDivide( FLWCVector2  Lhs,  float2  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector2  LWCDivide( float2  Lhs,  FLWCVector2  Rhs) { return  MakeLWCVector2 (( float2 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector2  LWCLerp( FLWCVector2  Lhs,  FLWCVector2  Rhs,  float2  S)
{
	return  MakeLWCVector2 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float2  LWCFmod( FLWCVector2  Lhs,  float2  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float2  LWCFmodFloor( FLWCVector2  Lhs,  float2  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float2  LWCFmodFloorPI( FLWCVector2  V)
{
	return LWCFmodFloor(V, PI);

}
float2  LWCFmodFloor2PI( FLWCVector2  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float2  LWCSin( FLWCVector2  V) { return sin(LWCFmodFloor2PI(V)); }
float2  LWCCos( FLWCVector2  V) { return cos(LWCFmodFloor2PI(V)); }
float2  LWCTan( FLWCVector2  V) { return tan(LWCFmodFloorPI(V)); }
float2  LWCASin( FLWCVector2  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float2  LWCACos( FLWCVector2  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float2  LWCATan( FLWCVector2  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float2  LWCSmoothStep( FLWCVector2  Lhs,  FLWCVector2  Rhs,  FLWCVector2  S)
{
	float2  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector2  LWCMin( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMin( float2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMin( FLWCVector2  Lhs,  float2  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( float2  Lhs,  FLWCVector2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector2  LWCMax( FLWCVector2  Lhs,  float2  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector2  LWCAbs( FLWCVector2  V) { return LWCSelect(LWCLess(V, ( float2 )0), LWCNegate(V), V); }

float2  LWCStep( FLWCVector2  Lhs,  FLWCVector2  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float2 )1.0f : ( float2 )0.0f; }
float2  LWCStep( FLWCVector2  Lhs,  float2  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float2 )1.0f : ( float2 )0.0f; }
float2  LWCStep( float2  Lhs,  FLWCVector2  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float2 )1.0f : ( float2 )0.0f; }


FLWCVector2  LWCSquareScaled( FLWCVector2  V)
{
	float2  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector2 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 346 "/Engine/Private/LargeWorldCoordinates.ush"
#line 355 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector3  LWCNormalizeTile( FLWCVector3  V)
{
	float3  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector3 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector3  LWCMakeIntTile( FLWCVector3  V)
{
	float3  IntTile = floor(V.Tile);
	return  MakeLWCVector3 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float3  LWCSqrtUnscaled( FLWCVector3  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCRsqrtUnscaled( FLWCVector3  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCRcpUnscaled( FLWCVector3  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float3  LWCSqrtScaled( FLWCVector3  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float3  LWCRsqrtScaled( FLWCVector3  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float3  LWCRcpScaled( FLWCVector3  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float3  LWCSqrt( FLWCVector3  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float3  LWCRsqrt( FLWCVector3  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float3  LWCRcp( FLWCVector3  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool3 LWCGreater( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool3 LWCGreater( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool3 LWCGreater( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool3 LWCGreaterEqual( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool3 LWCGreaterEqual( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool3 LWCGreaterEqual( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool3 LWCLess( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool3 LWCLess( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool3 LWCLess( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool3 LWCLessEqual( FLWCVector3 Lhs, FLWCVector3 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool3 LWCLessEqual( float3 Lhs, FLWCVector3 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool3 LWCLessEqual( FLWCVector3 Lhs, float3 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float3  LWCDdx( FLWCVector3  V) { return ddx( ((V).Tile) ) *  2097152.00f  + ddx(V.Offset); }
float3  LWCDdy( FLWCVector3  V) { return ddy( ((V).Tile) ) *  2097152.00f  + ddy(V.Offset); }


FLWCVector3  LWCAdd( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector3  LWCAdd( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector3  LWCAdd( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector3  LWCSubtract( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector3  LWCSubtract( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector3  LWCSubtract( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool3  LWCEquals( FLWCVector3  Lhs,  FLWCVector3  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool3  LWCEquals( float3  Lhs,  FLWCVector3  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool3  LWCEquals( FLWCVector3  Lhs,  float3  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool3  LWCEqualsApprox( FLWCVector3  Lhs,  FLWCVector3  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float3 )Threshold;
}
bool3  LWCEqualsApprox( float3  Lhs,  FLWCVector3  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float3 )Threshold;
}
bool3  LWCEqualsApprox( FLWCVector3  Lhs,  float3  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float3 )Threshold;
}

FLWCVector3  LWCSelect( bool3  S,  FLWCVector3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (S ?  ((Lhs).Tile)  :  ((Rhs).Tile) , S ? Lhs.Offset : Rhs.Offset); }
FLWCVector3  LWCSelect( bool3  S,  float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (S ? ( float3 )0 :  ((Rhs).Tile) , S ? Lhs : Rhs.Offset); }
FLWCVector3  LWCSelect( bool3  S,  FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 (S ?  ((Lhs).Tile)  : ( float3 )0, S ? Lhs.Offset : Rhs); }

FLWCVector3  LWCNegate( FLWCVector3  V) { return  MakeLWCVector3 (- ((V).Tile) , -V.Offset); }

float3  LWCFrac( FLWCVector3  V)
{
	float3  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector3  LWCFloor( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector3  LWCCeil( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector3  LWCRound( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector3  LWCTrunc( FLWCVector3  V) {  FLWCVector3  VN = LWCMakeIntTile(V); return  MakeLWCVector3 ( ((VN).Tile) , trunc(VN.Offset)); }


float3  LWCSign( FLWCVector3  V) { return  float3 (sign(LWCToFloat(V))); }
float3  LWCSaturate( FLWCVector3  V) { return saturate(LWCToFloat(V)); }
float3  LWCClampScalar( FLWCVector3  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector3  LWCMultiply( FLWCVector3  Lhs,  FLWCVector3  Rhs)
{
	return  MakeLWCVector3 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector3  LWCMultiply( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector3  LWCMultiply( FLWCVector3  Lhs,  float3  Rhs) { return  MakeLWCVector3 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector3  LWCDivide( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector3  LWCDivide( FLWCVector3  Lhs,  float3  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector3  LWCDivide( float3  Lhs,  FLWCVector3  Rhs) { return  MakeLWCVector3 (( float3 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector3  LWCLerp( FLWCVector3  Lhs,  FLWCVector3  Rhs,  float3  S)
{
	return  MakeLWCVector3 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float3  LWCFmod( FLWCVector3  Lhs,  float3  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float3  LWCFmodFloor( FLWCVector3  Lhs,  float3  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float3  LWCFmodFloorPI( FLWCVector3  V)
{
	return LWCFmodFloor(V, PI);

}
float3  LWCFmodFloor2PI( FLWCVector3  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float3  LWCSin( FLWCVector3  V) { return sin(LWCFmodFloor2PI(V)); }
float3  LWCCos( FLWCVector3  V) { return cos(LWCFmodFloor2PI(V)); }
float3  LWCTan( FLWCVector3  V) { return tan(LWCFmodFloorPI(V)); }
float3  LWCASin( FLWCVector3  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float3  LWCACos( FLWCVector3  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float3  LWCATan( FLWCVector3  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float3  LWCSmoothStep( FLWCVector3  Lhs,  FLWCVector3  Rhs,  FLWCVector3  S)
{
	float3  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector3  LWCMin( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMin( float3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMin( FLWCVector3  Lhs,  float3  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( float3  Lhs,  FLWCVector3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector3  LWCMax( FLWCVector3  Lhs,  float3  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector3  LWCAbs( FLWCVector3  V) { return LWCSelect(LWCLess(V, ( float3 )0), LWCNegate(V), V); }

float3  LWCStep( FLWCVector3  Lhs,  FLWCVector3  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float3 )1.0f : ( float3 )0.0f; }
float3  LWCStep( FLWCVector3  Lhs,  float3  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float3 )1.0f : ( float3 )0.0f; }
float3  LWCStep( float3  Lhs,  FLWCVector3  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float3 )1.0f : ( float3 )0.0f; }


FLWCVector3  LWCSquareScaled( FLWCVector3  V)
{
	float3  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector3 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 356 "/Engine/Private/LargeWorldCoordinates.ush"
#line 365 "/Engine/Private/LargeWorldCoordinates.ush"
#line 1 "LWCOperations.ush"




FLWCVector4  LWCNormalizeTile( FLWCVector4  V)
{
	float4  IntTile = floor(V.Tile + (V.Offset *  4.76837158e-07f  + 0.5f));
	return  MakeLWCVector4 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}


FLWCVector4  LWCMakeIntTile( FLWCVector4  V)
{
	float4  IntTile = floor(V.Tile);
	return  MakeLWCVector4 (IntTile, (V.Tile - IntTile) *  2097152.00f  + V.Offset);
}

float4  LWCSqrtUnscaled( FLWCVector4  V) { return sqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCRsqrtUnscaled( FLWCVector4  V) { return rsqrt(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCRcpUnscaled( FLWCVector4  V) { return rcp(V.Offset *  4.76837158e-07f  +  ((V).Tile) ); }
float4  LWCSqrtScaled( FLWCVector4  V, float Scale) { return LWCSqrtUnscaled(V) * Scale; }
float4  LWCRsqrtScaled( FLWCVector4  V, float Scale) { return LWCRsqrtUnscaled(V) * Scale; }
float4  LWCRcpScaled( FLWCVector4  V, float Scale) { return LWCRcpUnscaled(V) * Scale; }
float4  LWCSqrt( FLWCVector4  V) { return LWCSqrtScaled(V,  1448.15466f ); }
float4  LWCRsqrt( FLWCVector4  V) { return LWCRsqrtScaled(V,  0.000690533954f ); }
float4  LWCRcp( FLWCVector4  V) { return LWCRcpScaled(V,  4.76837158e-07f ); }
#line 36 "/Engine/Private/LWCOperations.ush"
bool4 LWCGreater( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f > Rhs.Offset - Lhs.Offset; } bool4 LWCGreater( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f > Rhs.Offset - Lhs; } bool4 LWCGreater( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f > Rhs - Lhs.Offset; }
bool4 LWCGreaterEqual( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f >= Rhs.Offset - Lhs.Offset; } bool4 LWCGreaterEqual( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f >= Rhs.Offset - Lhs; } bool4 LWCGreaterEqual( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f >= Rhs - Lhs.Offset; }
bool4 LWCLess( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f < Rhs.Offset - Lhs.Offset; } bool4 LWCLess( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f < Rhs.Offset - Lhs; } bool4 LWCLess( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f < Rhs - Lhs.Offset; }
bool4 LWCLessEqual( FLWCVector4 Lhs, FLWCVector4 Rhs) { return ( ((Lhs).Tile) - ((Rhs).Tile) ) * 2097152.00f <= Rhs.Offset - Lhs.Offset; } bool4 LWCLessEqual( float4 Lhs, FLWCVector4 Rhs) { return - ((Rhs).Tile) * 2097152.00f <= Rhs.Offset - Lhs; } bool4 LWCLessEqual( FLWCVector4 Lhs, float4 Rhs) { return ((Lhs).Tile) * 2097152.00f <= Rhs - Lhs.Offset; }








float4  LWCDdx( FLWCVector4  V) { return ddx( ((V).Tile) ) *  2097152.00f  + ddx(V.Offset); }
float4  LWCDdy( FLWCVector4  V) { return ddy( ((V).Tile) ) *  2097152.00f  + ddy(V.Offset); }


FLWCVector4  LWCAdd( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  +  ((Rhs).Tile) , Lhs.Offset + Rhs.Offset); }
FLWCVector4  LWCAdd( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Rhs).Tile) , Lhs + Rhs.Offset); }
FLWCVector4  LWCAdd( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile) , Lhs.Offset + Rhs); }

FLWCVector4  LWCSubtract( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  -  ((Rhs).Tile) , Lhs.Offset - Rhs.Offset); }
FLWCVector4  LWCSubtract( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (- ((Rhs).Tile) , Lhs - Rhs.Offset); }
FLWCVector4  LWCSubtract( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile) , Lhs.Offset - Rhs); }

bool4  LWCEquals( FLWCVector4  Lhs,  FLWCVector4  Rhs)
{
	return ( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  == Rhs.Offset - Lhs.Offset;
}
bool4  LWCEquals( float4  Lhs,  FLWCVector4  Rhs)
{
	return - ((Rhs).Tile)  *  2097152.00f  == Rhs.Offset - Lhs;
}
bool4  LWCEquals( FLWCVector4  Lhs,  float4  Rhs)
{
	return  ((Lhs).Tile)  *  2097152.00f  == Rhs - Lhs.Offset;
}
bool4  LWCEqualsApprox( FLWCVector4  Lhs,  FLWCVector4  Rhs, float Threshold)
{
	return abs(( ((Lhs).Tile)  -  ((Rhs).Tile) ) *  2097152.00f  + (Lhs.Offset - Rhs.Offset)) < ( float4 )Threshold;
}
bool4  LWCEqualsApprox( float4  Lhs,  FLWCVector4  Rhs, float Threshold)
{
	return abs(- ((Rhs).Tile)  *  2097152.00f  + (Lhs - Rhs.Offset)) < ( float4 )Threshold;
}
bool4  LWCEqualsApprox( FLWCVector4  Lhs,  float4  Rhs, float Threshold)
{
	return abs( ((Lhs).Tile)  *  2097152.00f  + (Lhs.Offset - Rhs)) < ( float4 )Threshold;
}

FLWCVector4  LWCSelect( bool4  S,  FLWCVector4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (S ?  ((Lhs).Tile)  :  ((Rhs).Tile) , S ? Lhs.Offset : Rhs.Offset); }
FLWCVector4  LWCSelect( bool4  S,  float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (S ? ( float4 )0 :  ((Rhs).Tile) , S ? Lhs : Rhs.Offset); }
FLWCVector4  LWCSelect( bool4  S,  FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 (S ?  ((Lhs).Tile)  : ( float4 )0, S ? Lhs.Offset : Rhs); }

FLWCVector4  LWCNegate( FLWCVector4  V) { return  MakeLWCVector4 (- ((V).Tile) , -V.Offset); }

float4  LWCFrac( FLWCVector4  V)
{
	float4  FracTile = frac( ((V).Tile)  *  2097152.00f );
	return frac(FracTile + V.Offset);
}

FLWCVector4  LWCFloor( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , floor(VN.Offset)); }
FLWCVector4  LWCCeil( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , ceil(VN.Offset)); }
FLWCVector4  LWCRound( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , round(VN.Offset)); }
FLWCVector4  LWCTrunc( FLWCVector4  V) {  FLWCVector4  VN = LWCMakeIntTile(V); return  MakeLWCVector4 ( ((VN).Tile) , trunc(VN.Offset)); }


float4  LWCSign( FLWCVector4  V) { return  float4 (sign(LWCToFloat(V))); }
float4  LWCSaturate( FLWCVector4  V) { return saturate(LWCToFloat(V)); }
float4  LWCClampScalar( FLWCVector4  V, float Low, float High) { return clamp(LWCToFloat(V), Low, High); }

FLWCVector4  LWCMultiply( FLWCVector4  Lhs,  FLWCVector4  Rhs)
{
	return  MakeLWCVector4 ( ((Lhs).Tile)  * ( ((Rhs).Tile)  *  2097152.00f  + Rhs.Offset) +  ((Rhs).Tile)  * Lhs.Offset, Lhs.Offset * Rhs.Offset);
}
FLWCVector4  LWCMultiply( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 ( ((Rhs).Tile)  * Lhs, Lhs * Rhs.Offset); }
FLWCVector4  LWCMultiply( FLWCVector4  Lhs,  float4  Rhs) { return  MakeLWCVector4 ( ((Lhs).Tile)  * Rhs, Lhs.Offset * Rhs); }

FLWCVector4  LWCDivide( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCMultiply(Lhs, LWCRcp(Rhs)); }
FLWCVector4  LWCDivide( FLWCVector4  Lhs,  float4  Rhs) { return LWCMultiply(Lhs, rcp(Rhs)); }
FLWCVector4  LWCDivide( float4  Lhs,  FLWCVector4  Rhs) { return  MakeLWCVector4 (( float4 )0, Lhs * LWCRcp(Rhs)); }


FLWCVector4  LWCLerp( FLWCVector4  Lhs,  FLWCVector4  Rhs,  float4  S)
{
	return  MakeLWCVector4 (lerp( ((Lhs).Tile) ,  ((Rhs).Tile) , S), lerp(Lhs.Offset, Rhs.Offset, S));
}

float4  LWCFmod( FLWCVector4  Lhs,  float4  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCTrunc(LWCDivide(Lhs, Rhs)), Rhs)));


}
float4  LWCFmodFloor( FLWCVector4  Lhs,  float4  Rhs)
{
	return LWCToFloat(LWCSubtract(Lhs, LWCMultiply(LWCFloor(LWCDivide(Lhs, Rhs)), Rhs)));


}
float4  LWCFmodFloorPI( FLWCVector4  V)
{
	return LWCFmodFloor(V, PI);

}
float4  LWCFmodFloor2PI( FLWCVector4  V)
{
	return LWCFmodFloor(V, 2.0f * PI);

}

float4  LWCSin( FLWCVector4  V) { return sin(LWCFmodFloor2PI(V)); }
float4  LWCCos( FLWCVector4  V) { return cos(LWCFmodFloor2PI(V)); }
float4  LWCTan( FLWCVector4  V) { return tan(LWCFmodFloorPI(V)); }
float4  LWCASin( FLWCVector4  V) { return asin(LWCClampScalar(V, -1.0f, 1.0f)); }
float4  LWCACos( FLWCVector4  V) { return acos(LWCClampScalar(V, -1.0f, 1.0f)); }
float4  LWCATan( FLWCVector4  V) { return atan(LWCClampScalar(V, -0.5f*PI, 0.5f*PI)); }

float4  LWCSmoothStep( FLWCVector4  Lhs,  FLWCVector4  Rhs,  FLWCVector4  S)
{
	float4  t = LWCSaturate(LWCDivide(LWCSubtract(S, Lhs), LWCSubtract(Rhs, Lhs)));
	return t*t*(3.0f - (2.0f*t));
}

FLWCVector4  LWCMin( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMin( float4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMin( FLWCVector4  Lhs,  float4  Rhs) { return LWCSelect(LWCLess(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( float4  Lhs,  FLWCVector4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }
FLWCVector4  LWCMax( FLWCVector4  Lhs,  float4  Rhs) { return LWCSelect(LWCGreater(Lhs, Rhs), Lhs, Rhs); }

FLWCVector4  LWCAbs( FLWCVector4  V) { return LWCSelect(LWCLess(V, ( float4 )0), LWCNegate(V), V); }

float4  LWCStep( FLWCVector4  Lhs,  FLWCVector4  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float4 )1.0f : ( float4 )0.0f; }
float4  LWCStep( FLWCVector4  Lhs,  float4  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float4 )1.0f : ( float4 )0.0f; }
float4  LWCStep( float4  Lhs,  FLWCVector4  Rhs) { return LWCGreaterEqual(Rhs, Lhs) ? ( float4 )1.0f : ( float4 )0.0f; }


FLWCVector4  LWCSquareScaled( FLWCVector4  V)
{
	float4  OffsetScaled = V.Offset *  4.76837158e-07f ;
	return  MakeLWCVector4 ( ((V).Tile)  * ( ((V).Tile)  + OffsetScaled * 2.0f), V.Offset * OffsetScaled);
}
#line 366 "/Engine/Private/LargeWorldCoordinates.ush"





FLWCScalar LWCDot(FLWCScalar Lhs, FLWCScalar Rhs)
{
	return LWCMultiply(Lhs, Rhs);
}
FLWCScalar LWCDot(FLWCScalar Lhs, float Rhs)
{
	return LWCMultiply(Lhs, Rhs);
}

FLWCScalar LWCDot(FLWCVector2 Lhs, FLWCVector2 Rhs)
{
	FLWCScalar X2 = LWCMultiply( LWCGetComponent(Lhs, 0) ,  LWCGetComponent(Rhs, 0) );
	FLWCScalar Y2 = LWCMultiply( LWCGetComponent(Lhs, 1) ,  LWCGetComponent(Rhs, 1) );
	return LWCAdd(X2, Y2);
}
FLWCScalar LWCDot(FLWCVector2 Lhs, float2 Rhs)
{
	FLWCScalar X2 = LWCMultiply( LWCGetComponent(Lhs, 0) , Rhs.x);
	FLWCScalar Y2 = LWCMultiply( LWCGetComponent(Lhs, 1) , Rhs.y);
	return LWCAdd(X2, Y2);
}

FLWCScalar LWCDot(FLWCVector3 Lhs, FLWCVector3 Rhs)
{
	FLWCScalar X2 = LWCMultiply( LWCGetComponent(Lhs, 0) ,  LWCGetComponent(Rhs, 0) );
	FLWCScalar Y2 = LWCMultiply( LWCGetComponent(Lhs, 1) ,  LWCGetComponent(Rhs, 1) );
	FLWCScalar Z2 = LWCMultiply( LWCGetComponent(Lhs, 2) ,  LWCGetComponent(Rhs, 2) );
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}
FLWCScalar LWCDot(FLWCVector3 Lhs, float3 Rhs)
{
	FLWCScalar X2 = LWCMultiply( LWCGetComponent(Lhs, 0) , Rhs.x);
	FLWCScalar Y2 = LWCMultiply( LWCGetComponent(Lhs, 1) , Rhs.y);
	FLWCScalar Z2 = LWCMultiply( LWCGetComponent(Lhs, 2) , Rhs.z);
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

FLWCScalar LWCDot(FLWCVector4 Lhs, FLWCVector4 Rhs)
{
	FLWCScalar X2 = LWCMultiply( LWCGetComponent(Lhs, 0) ,  LWCGetComponent(Rhs, 0) );
	FLWCScalar Y2 = LWCMultiply( LWCGetComponent(Lhs, 1) ,  LWCGetComponent(Rhs, 1) );
	FLWCScalar Z2 = LWCMultiply( LWCGetComponent(Lhs, 2) ,  LWCGetComponent(Rhs, 2) );
	FLWCScalar W2 = LWCMultiply( LWCGetComponent(Lhs, 3) ,  LWCGetComponent(Rhs, 3) );
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}
FLWCScalar LWCDot(FLWCVector4 Lhs, float4 Rhs)
{
	FLWCScalar X2 = LWCMultiply( LWCGetComponent(Lhs, 0) , Rhs.x);
	FLWCScalar Y2 = LWCMultiply( LWCGetComponent(Lhs, 1) , Rhs.y);
	FLWCScalar Z2 = LWCMultiply( LWCGetComponent(Lhs, 2) , Rhs.z);
	FLWCScalar W2 = LWCMultiply( LWCGetComponent(Lhs, 3) , Rhs.w);
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}


FLWCScalar LWCLength2Scaled(FLWCScalar V)
{
	return LWCSquareScaled(V);
}

FLWCScalar LWCLength2Scaled(FLWCVector2 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	return LWCAdd(X2, Y2);
}

FLWCScalar LWCLength2Scaled(FLWCVector3 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent(V, 2) );
	return LWCAdd(LWCAdd(X2, Y2), Z2);
}

FLWCScalar LWCLength2Scaled(FLWCVector4 V)
{
	FLWCScalar X2 = LWCSquareScaled( LWCGetComponent(V, 0) );
	FLWCScalar Y2 = LWCSquareScaled( LWCGetComponent(V, 1) );
	FLWCScalar Z2 = LWCSquareScaled( LWCGetComponent(V, 2) );
	FLWCScalar W2 = LWCSquareScaled( LWCGetComponent(V, 3) );
	return LWCAdd(LWCAdd(LWCAdd(X2, Y2), Z2), W2);
}



FLWCScalar LWCLength(FLWCScalar V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector2 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector3 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }
FLWCScalar LWCLength(FLWCVector4 V) { return MakeLWCScalar(LWCSqrtUnscaled(LWCLength2Scaled(V)), 0.0f); }

float LWCRcpLength(FLWCScalar V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector2 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector3 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }
float LWCRcpLength(FLWCVector4 V) { return LWCRsqrtScaled(LWCLength2Scaled(V),  4.76837158e-07f ); }

float LWCNormalize(FLWCScalar V) { return 1.0f; }
float2 LWCNormalize(FLWCVector2 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float3 LWCNormalize(FLWCVector3 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
float4 LWCNormalize(FLWCVector4 V) { return LWCToFloat(LWCMultiply(V, LWCRcpLength(V))); }
#line 197 "/Engine/Private/Common.ush"
#line 198 "/Engine/Private/Common.ush"
#line 1 "InstancedStereo.ush"
#line 10 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/View.ush"
#line 11 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/UniformBuffers/InstancedView.ush"
#line 12 "/Engine/Private/InstancedStereo.ush"
#line 15 "/Engine/Private/InstancedStereo.ush"
#line 1 "/Engine/Generated/GeneratedInstancedStereo.ush"
struct ViewState
{
	float4x4 TranslatedWorldToClip;
	float4x4 RelativeWorldToClip;
	float4x4 ClipToRelativeWorld;
	float4x4 TranslatedWorldToView;
	float4x4 ViewToTranslatedWorld;
	float4x4 TranslatedWorldToCameraView;
	float4x4 CameraViewToTranslatedWorld;
	float4x4 ViewToClip;
	float4x4 ViewToClipNoAA;
	float4x4 ClipToView;
	float4x4 ClipToTranslatedWorld;
	float4x4 SVPositionToTranslatedWorld;
	float4x4 ScreenToRelativeWorld;
	float4x4 ScreenToTranslatedWorld;
	float4x4 MobileMultiviewShadowTransform;
	float3 ViewTilePosition;
	float3 MatrixTilePosition;
	float3 ViewForward;
	float3 ViewUp;
	float3 ViewRight;
	float3 HMDViewNoRollUp;
	float3 HMDViewNoRollRight;
	float4 InvDeviceZToWorldZTransform;
	float4 ScreenPositionScaleBias;
	float3 RelativeWorldCameraOrigin;
	float3 TranslatedWorldCameraOrigin;
	float3 RelativeWorldViewOrigin;
	float3 RelativePreViewTranslation;
	float4x4 PrevViewToClip;
	float4x4 PrevClipToView;
	float4x4 PrevTranslatedWorldToClip;
	float4x4 PrevTranslatedWorldToView;
	float4x4 PrevViewToTranslatedWorld;
	float4x4 PrevTranslatedWorldToCameraView;
	float4x4 PrevCameraViewToTranslatedWorld;
	float3 PrevTranslatedWorldCameraOrigin;
	float3 PrevRelativeWorldCameraOrigin;
	float3 PrevRelativeWorldViewOrigin;
	float3 RelativePrevPreViewTranslation;
	float4x4 PrevClipToRelativeWorld;
	float4x4 PrevScreenToTranslatedWorld;
	float4x4 ClipToPrevClip;
	float4x4 ClipToPrevClipWithAA;
	float4 TemporalAAJitter;
	float4 GlobalClippingPlane;
	float2 FieldOfViewWideAngles;
	float2 PrevFieldOfViewWideAngles;
	float4 ViewRectMin;
	float4 ViewSizeAndInvSize;
	float4 LightProbeSizeRatioAndInvSizeRatio;
	float4 BufferSizeAndInvSize;
	float4 BufferBilinearUVMinMax;
	float4 ScreenToViewSpace;
	int NumSceneColorMSAASamples;
	float PreExposure;
	float OneOverPreExposure;
	float4 DiffuseOverrideParameter;
	float4 SpecularOverrideParameter;
	float4 NormalOverrideParameter;
	float2 RoughnessOverrideParameter;
	float PrevFrameGameTime;
	float PrevFrameRealTime;
	float OutOfBoundsMask;
	float3 WorldCameraMovementSinceLastFrame;
	float CullingSign;
	float NearPlane;
	float GameTime;
	float RealTime;
	float DeltaTime;
	float MaterialTextureMipBias;
	float MaterialTextureDerivativeMultiply;
	uint Random;
	uint FrameNumber;
	uint StateFrameIndexMod8;
	uint StateFrameIndex;
	uint DebugViewModeMask;
	float CameraCut;
	float UnlitViewmodeMask;
	float4 DirectionalLightColor;
	float3 DirectionalLightDirection;
	float4 TranslucencyLightingVolumeMin[2];
	float4 TranslucencyLightingVolumeInvSize[2];
	float4 TemporalAAParams;
	float4 CircleDOFParams;
	uint ForceDrawAllVelocities;
	float DepthOfFieldSensorWidth;
	float DepthOfFieldFocalDistance;
	float DepthOfFieldScale;
	float DepthOfFieldFocalLength;
	float DepthOfFieldFocalRegion;
	float DepthOfFieldNearTransitionRegion;
	float DepthOfFieldFarTransitionRegion;
	float MotionBlurNormalizedToPixel;
	float GeneralPurposeTweak;
	float GeneralPurposeTweak2;
	float DemosaicVposOffset;
	float DecalDepthBias;
	float3 IndirectLightingColorScale;
	float3 PrecomputedIndirectLightingColorScale;
	float3 PrecomputedIndirectSpecularColorScale;
	float4 AtmosphereLightDirection[2];
	float4 AtmosphereLightIlluminanceOnGroundPostTransmittance[2];
	float4 AtmosphereLightIlluminanceOuterSpace[2];
	float4 AtmosphereLightDiscLuminance[2];
	float4 AtmosphereLightDiscCosHalfApexAngle[2];
	float4 SkyViewLutSizeAndInvSize;
	float3 SkyCameraTranslatedWorldOrigin;
	float4 SkyPlanetTranslatedWorldCenterAndViewHeight;
	float4x4 SkyViewLutReferential;
	float4 SkyAtmosphereSkyLuminanceFactor;
	float SkyAtmospherePresentInScene;
	float SkyAtmosphereHeightFogContribution;
	float SkyAtmosphereBottomRadiusKm;
	float SkyAtmosphereTopRadiusKm;
	float4 SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	float SkyAtmosphereAerialPerspectiveStartDepthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	float SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	float SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	float3 NormalCurvatureToRoughnessScaleBias;
	float RenderingReflectionCaptureMask;
	float RealTimeReflectionCapture;
	float RealTimeReflectionCapturePreExposure;
	float4 AmbientCubemapTint;
	float AmbientCubemapIntensity;
	float SkyLightApplyPrecomputedBentNormalShadowingFlag;
	float SkyLightAffectReflectionFlag;
	float SkyLightAffectGlobalIlluminationFlag;
	float4 SkyLightColor;
	float4 MobileSkyIrradianceEnvironmentMap[7];
	float MobilePreviewMode;
	float HMDEyePaddingOffset;
	float ReflectionCubemapMaxMip;
	float ShowDecalsMask;
	uint DistanceFieldAOSpecularOcclusionMode;
	float IndirectCapsuleSelfShadowingIntensity;
	float3 ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	int StereoPassIndex;
	float4 GlobalVolumeCenterAndExtent[6];
	float4 GlobalVolumeWorldToUVAddAndMul[6];
	float4 GlobalDistanceFieldMipWorldToUVScale[6];
	float4 GlobalDistanceFieldMipWorldToUVBias[6];
	float GlobalDistanceFieldMipFactor;
	float GlobalDistanceFieldMipTransition;
	int GlobalDistanceFieldClipmapSizeInPages;
	float3 GlobalDistanceFieldInvPageAtlasSize;
	float3 GlobalDistanceFieldInvCoverageAtlasSize;
	float GlobalVolumeDimension;
	float GlobalVolumeTexelSize;
	float MaxGlobalDFAOConeDistance;
	uint NumGlobalSDFClipmaps;
	float FullyCoveredExpandSurfaceScale;
	float UncoveredExpandSurfaceScale;
	float UncoveredMinStepScale;
	int2 CursorPosition;
	float bCheckerboardSubsurfaceProfileRendering;
	float3 VolumetricFogInvGridSize;
	float3 VolumetricFogGridZParams;
	float2 VolumetricFogSVPosToVolumeUV;
	float VolumetricFogMaxDistance;
	float3 VolumetricLightmapWorldToUVScale;
	float3 VolumetricLightmapWorldToUVAdd;
	float3 VolumetricLightmapIndirectionTextureSize;
	float VolumetricLightmapBrickSize;
	float3 VolumetricLightmapBrickTexelSize;
	float StereoIPD;
	float IndirectLightingCacheShowFlag;
	float EyeToPixelSpreadAngle;
	float4 XRPassthroughCameraUVs[2];
	float GlobalVirtualTextureMipBias;
	uint VirtualTextureFeedbackShift;
	uint VirtualTextureFeedbackMask;
	uint VirtualTextureFeedbackStride;
	uint VirtualTextureFeedbackJitterOffset;
	uint VirtualTextureFeedbackSampleOffset;
	float4 RuntimeVirtualTextureMipLevel;
	float2 RuntimeVirtualTexturePackHeight;
	float4 RuntimeVirtualTextureDebugParams;
	float OverrideLandscapeLOD;
	int FarShadowStaticMeshLODBias;
	float MinRoughness;
	float4 HairRenderInfo;
	uint EnableSkyLight;
	uint HairRenderInfoBits;
	uint HairComponents;
	float bSubsurfacePostprocessEnabled;
	float4 SSProfilesTextureSizeAndInvSize;
	float4 SSProfilesPreIntegratedTextureSizeAndInvSize;
	float3 PhysicsFieldClipmapCenter;
	float PhysicsFieldClipmapDistance;
	int PhysicsFieldClipmapResolution;
	int PhysicsFieldClipmapExponent;
	int PhysicsFieldClipmapCount;
	int PhysicsFieldTargetCount;
	int4 PhysicsFieldTargets[32];
	uint InstanceSceneDataSOAStride;
	uint GPUSceneViewId;
	FLWCInverseMatrix WorldToClip;
	FLWCMatrix ClipToWorld;
	FLWCMatrix ScreenToWorld;
	FLWCMatrix PrevClipToWorld;
	FLWCVector3 WorldCameraOrigin;
	FLWCVector3 WorldViewOrigin;
	FLWCVector3 PrevWorldCameraOrigin;
	FLWCVector3 PrevWorldViewOrigin;
	FLWCVector3 PreViewTranslation;
	FLWCVector3 PrevPreViewTranslation;
};
	void FinalizeViewState(inout ViewState InOutView);
ViewState GetPrimaryView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = View_TranslatedWorldToClip;
	Result.RelativeWorldToClip = View_RelativeWorldToClip;
	Result.ClipToRelativeWorld = View_ClipToRelativeWorld;
	Result.TranslatedWorldToView = View_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = View_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = View_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = View_CameraViewToTranslatedWorld;
	Result.ViewToClip = View_ViewToClip;
	Result.ViewToClipNoAA = View_ViewToClipNoAA;
	Result.ClipToView = View_ClipToView;
	Result.ClipToTranslatedWorld = View_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = View_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = View_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = View_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = View_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = View_ViewTilePosition;
	Result.MatrixTilePosition = View_MatrixTilePosition;
	Result.ViewForward = View_ViewForward;
	Result.ViewUp = View_ViewUp;
	Result.ViewRight = View_ViewRight;
	Result.HMDViewNoRollUp = View_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = View_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = View_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = View_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = View_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = View_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = View_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = View_RelativePreViewTranslation;
	Result.PrevViewToClip = View_PrevViewToClip;
	Result.PrevClipToView = View_PrevClipToView;
	Result.PrevTranslatedWorldToClip = View_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = View_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = View_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = View_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = View_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = View_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = View_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = View_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = View_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = View_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = View_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = View_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = View_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = View_TemporalAAJitter;
	Result.GlobalClippingPlane = View_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = View_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = View_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = View_ViewRectMin;
	Result.ViewSizeAndInvSize = View_ViewSizeAndInvSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = View_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = View_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = View_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = View_ScreenToViewSpace;
	Result.NumSceneColorMSAASamples = View_NumSceneColorMSAASamples;
	Result.PreExposure = View_PreExposure;
	Result.OneOverPreExposure = View_OneOverPreExposure;
	Result.DiffuseOverrideParameter = View_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = View_SpecularOverrideParameter;
	Result.NormalOverrideParameter = View_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = View_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = View_PrevFrameGameTime;
	Result.PrevFrameRealTime = View_PrevFrameRealTime;
	Result.OutOfBoundsMask = View_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = View_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = View_CullingSign;
	Result.NearPlane = View_NearPlane;
	Result.GameTime = View_GameTime;
	Result.RealTime = View_RealTime;
	Result.DeltaTime = View_DeltaTime;
	Result.MaterialTextureMipBias = View_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = View_MaterialTextureDerivativeMultiply;
	Result.Random = View_Random;
	Result.FrameNumber = View_FrameNumber;
	Result.StateFrameIndexMod8 = View_StateFrameIndexMod8;
	Result.StateFrameIndex = View_StateFrameIndex;
	Result.DebugViewModeMask = View_DebugViewModeMask;
	Result.CameraCut = View_CameraCut;
	Result.UnlitViewmodeMask = View_UnlitViewmodeMask;
	Result.DirectionalLightColor = View_DirectionalLightColor;
	Result.DirectionalLightDirection = View_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = View_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = View_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = View_TemporalAAParams;
	Result.CircleDOFParams = View_CircleDOFParams;
	Result.ForceDrawAllVelocities = View_ForceDrawAllVelocities;
	Result.DepthOfFieldSensorWidth = View_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = View_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = View_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = View_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = View_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = View_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = View_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = View_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = View_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = View_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = View_DemosaicVposOffset;
	Result.DecalDepthBias = View_DecalDepthBias;
	Result.IndirectLightingColorScale = View_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = View_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = View_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = View_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = View_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = View_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = View_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle = View_AtmosphereLightDiscCosHalfApexAngle;
	Result.SkyViewLutSizeAndInvSize = View_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = View_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = View_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = View_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = View_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = View_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = View_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = View_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = View_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = View_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = View_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = View_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = View_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = View_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = View_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = View_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = View_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = View_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = View_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = View_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = View_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = View_MobilePreviewMode;
	Result.HMDEyePaddingOffset = View_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = View_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = View_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = View_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = View_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = View_StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = View_GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = View_GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipWorldToUVScale = View_GlobalDistanceFieldMipWorldToUVScale;
	Result.GlobalDistanceFieldMipWorldToUVBias = View_GlobalDistanceFieldMipWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = View_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = View_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = View_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = View_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = View_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = View_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = View_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = View_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = View_NumGlobalSDFClipmaps;
	Result.FullyCoveredExpandSurfaceScale = View_FullyCoveredExpandSurfaceScale;
	Result.UncoveredExpandSurfaceScale = View_UncoveredExpandSurfaceScale;
	Result.UncoveredMinStepScale = View_UncoveredMinStepScale;
	Result.CursorPosition = View_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = View_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = View_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = View_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = View_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = View_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = View_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = View_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = View_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = View_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = View_VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = View_StereoIPD;
	Result.IndirectLightingCacheShowFlag = View_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = View_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = View_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = View_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = View_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = View_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = View_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = View_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = View_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = View_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = View_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = View_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = View_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = View_FarShadowStaticMeshLODBias;
	Result.MinRoughness = View_MinRoughness;
	Result.HairRenderInfo = View_HairRenderInfo;
	Result.EnableSkyLight = View_EnableSkyLight;
	Result.HairRenderInfoBits = View_HairRenderInfoBits;
	Result.HairComponents = View_HairComponents;
	Result.bSubsurfacePostprocessEnabled = View_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = View_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = View_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = View_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = View_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = View_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = View_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = View_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = View_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = View_PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = View_InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = View_GPUSceneViewId;
	FinalizeViewState(Result);
	return Result;
}
ViewState GetInstancedView()
{
	ViewState Result;
	Result.TranslatedWorldToClip = InstancedView_TranslatedWorldToClip;
	Result.RelativeWorldToClip = InstancedView_RelativeWorldToClip;
	Result.ClipToRelativeWorld = InstancedView_ClipToRelativeWorld;
	Result.TranslatedWorldToView = InstancedView_TranslatedWorldToView;
	Result.ViewToTranslatedWorld = InstancedView_ViewToTranslatedWorld;
	Result.TranslatedWorldToCameraView = InstancedView_TranslatedWorldToCameraView;
	Result.CameraViewToTranslatedWorld = InstancedView_CameraViewToTranslatedWorld;
	Result.ViewToClip = InstancedView_ViewToClip;
	Result.ViewToClipNoAA = InstancedView_ViewToClipNoAA;
	Result.ClipToView = InstancedView_ClipToView;
	Result.ClipToTranslatedWorld = InstancedView_ClipToTranslatedWorld;
	Result.SVPositionToTranslatedWorld = InstancedView_SVPositionToTranslatedWorld;
	Result.ScreenToRelativeWorld = InstancedView_ScreenToRelativeWorld;
	Result.ScreenToTranslatedWorld = InstancedView_ScreenToTranslatedWorld;
	Result.MobileMultiviewShadowTransform = InstancedView_MobileMultiviewShadowTransform;
	Result.ViewTilePosition = InstancedView_ViewTilePosition;
	Result.MatrixTilePosition = InstancedView_MatrixTilePosition;
	Result.ViewForward = InstancedView_ViewForward;
	Result.ViewUp = InstancedView_ViewUp;
	Result.ViewRight = InstancedView_ViewRight;
	Result.HMDViewNoRollUp = InstancedView_HMDViewNoRollUp;
	Result.HMDViewNoRollRight = InstancedView_HMDViewNoRollRight;
	Result.InvDeviceZToWorldZTransform = InstancedView_InvDeviceZToWorldZTransform;
	Result.ScreenPositionScaleBias = InstancedView_ScreenPositionScaleBias;
	Result.RelativeWorldCameraOrigin = InstancedView_RelativeWorldCameraOrigin;
	Result.TranslatedWorldCameraOrigin = InstancedView_TranslatedWorldCameraOrigin;
	Result.RelativeWorldViewOrigin = InstancedView_RelativeWorldViewOrigin;
	Result.RelativePreViewTranslation = InstancedView_RelativePreViewTranslation;
	Result.PrevViewToClip = InstancedView_PrevViewToClip;
	Result.PrevClipToView = InstancedView_PrevClipToView;
	Result.PrevTranslatedWorldToClip = InstancedView_PrevTranslatedWorldToClip;
	Result.PrevTranslatedWorldToView = InstancedView_PrevTranslatedWorldToView;
	Result.PrevViewToTranslatedWorld = InstancedView_PrevViewToTranslatedWorld;
	Result.PrevTranslatedWorldToCameraView = InstancedView_PrevTranslatedWorldToCameraView;
	Result.PrevCameraViewToTranslatedWorld = InstancedView_PrevCameraViewToTranslatedWorld;
	Result.PrevTranslatedWorldCameraOrigin = InstancedView_PrevTranslatedWorldCameraOrigin;
	Result.PrevRelativeWorldCameraOrigin = InstancedView_PrevRelativeWorldCameraOrigin;
	Result.PrevRelativeWorldViewOrigin = InstancedView_PrevRelativeWorldViewOrigin;
	Result.RelativePrevPreViewTranslation = InstancedView_RelativePrevPreViewTranslation;
	Result.PrevClipToRelativeWorld = InstancedView_PrevClipToRelativeWorld;
	Result.PrevScreenToTranslatedWorld = InstancedView_PrevScreenToTranslatedWorld;
	Result.ClipToPrevClip = InstancedView_ClipToPrevClip;
	Result.ClipToPrevClipWithAA = InstancedView_ClipToPrevClipWithAA;
	Result.TemporalAAJitter = InstancedView_TemporalAAJitter;
	Result.GlobalClippingPlane = InstancedView_GlobalClippingPlane;
	Result.FieldOfViewWideAngles = InstancedView_FieldOfViewWideAngles;
	Result.PrevFieldOfViewWideAngles = InstancedView_PrevFieldOfViewWideAngles;
	Result.ViewRectMin = InstancedView_ViewRectMin;
	Result.ViewSizeAndInvSize = InstancedView_ViewSizeAndInvSize;
	Result.LightProbeSizeRatioAndInvSizeRatio = InstancedView_LightProbeSizeRatioAndInvSizeRatio;
	Result.BufferSizeAndInvSize = InstancedView_BufferSizeAndInvSize;
	Result.BufferBilinearUVMinMax = InstancedView_BufferBilinearUVMinMax;
	Result.ScreenToViewSpace = InstancedView_ScreenToViewSpace;
	Result.NumSceneColorMSAASamples = InstancedView_NumSceneColorMSAASamples;
	Result.PreExposure = InstancedView_PreExposure;
	Result.OneOverPreExposure = InstancedView_OneOverPreExposure;
	Result.DiffuseOverrideParameter = InstancedView_DiffuseOverrideParameter;
	Result.SpecularOverrideParameter = InstancedView_SpecularOverrideParameter;
	Result.NormalOverrideParameter = InstancedView_NormalOverrideParameter;
	Result.RoughnessOverrideParameter = InstancedView_RoughnessOverrideParameter;
	Result.PrevFrameGameTime = InstancedView_PrevFrameGameTime;
	Result.PrevFrameRealTime = InstancedView_PrevFrameRealTime;
	Result.OutOfBoundsMask = InstancedView_OutOfBoundsMask;
	Result.WorldCameraMovementSinceLastFrame = InstancedView_WorldCameraMovementSinceLastFrame;
	Result.CullingSign = InstancedView_CullingSign;
	Result.NearPlane = InstancedView_NearPlane;
	Result.GameTime = InstancedView_GameTime;
	Result.RealTime = InstancedView_RealTime;
	Result.DeltaTime = InstancedView_DeltaTime;
	Result.MaterialTextureMipBias = InstancedView_MaterialTextureMipBias;
	Result.MaterialTextureDerivativeMultiply = InstancedView_MaterialTextureDerivativeMultiply;
	Result.Random = InstancedView_Random;
	Result.FrameNumber = InstancedView_FrameNumber;
	Result.StateFrameIndexMod8 = InstancedView_StateFrameIndexMod8;
	Result.StateFrameIndex = InstancedView_StateFrameIndex;
	Result.DebugViewModeMask = InstancedView_DebugViewModeMask;
	Result.CameraCut = InstancedView_CameraCut;
	Result.UnlitViewmodeMask = InstancedView_UnlitViewmodeMask;
	Result.DirectionalLightColor = InstancedView_DirectionalLightColor;
	Result.DirectionalLightDirection = InstancedView_DirectionalLightDirection;
	Result.TranslucencyLightingVolumeMin = InstancedView_TranslucencyLightingVolumeMin;
	Result.TranslucencyLightingVolumeInvSize = InstancedView_TranslucencyLightingVolumeInvSize;
	Result.TemporalAAParams = InstancedView_TemporalAAParams;
	Result.CircleDOFParams = InstancedView_CircleDOFParams;
	Result.ForceDrawAllVelocities = InstancedView_ForceDrawAllVelocities;
	Result.DepthOfFieldSensorWidth = InstancedView_DepthOfFieldSensorWidth;
	Result.DepthOfFieldFocalDistance = InstancedView_DepthOfFieldFocalDistance;
	Result.DepthOfFieldScale = InstancedView_DepthOfFieldScale;
	Result.DepthOfFieldFocalLength = InstancedView_DepthOfFieldFocalLength;
	Result.DepthOfFieldFocalRegion = InstancedView_DepthOfFieldFocalRegion;
	Result.DepthOfFieldNearTransitionRegion = InstancedView_DepthOfFieldNearTransitionRegion;
	Result.DepthOfFieldFarTransitionRegion = InstancedView_DepthOfFieldFarTransitionRegion;
	Result.MotionBlurNormalizedToPixel = InstancedView_MotionBlurNormalizedToPixel;
	Result.GeneralPurposeTweak = InstancedView_GeneralPurposeTweak;
	Result.GeneralPurposeTweak2 = InstancedView_GeneralPurposeTweak2;
	Result.DemosaicVposOffset = InstancedView_DemosaicVposOffset;
	Result.DecalDepthBias = InstancedView_DecalDepthBias;
	Result.IndirectLightingColorScale = InstancedView_IndirectLightingColorScale;
	Result.PrecomputedIndirectLightingColorScale = InstancedView_PrecomputedIndirectLightingColorScale;
	Result.PrecomputedIndirectSpecularColorScale = InstancedView_PrecomputedIndirectSpecularColorScale;
	Result.AtmosphereLightDirection = InstancedView_AtmosphereLightDirection;
	Result.AtmosphereLightIlluminanceOnGroundPostTransmittance = InstancedView_AtmosphereLightIlluminanceOnGroundPostTransmittance;
	Result.AtmosphereLightIlluminanceOuterSpace = InstancedView_AtmosphereLightIlluminanceOuterSpace;
	Result.AtmosphereLightDiscLuminance = InstancedView_AtmosphereLightDiscLuminance;
	Result.AtmosphereLightDiscCosHalfApexAngle = InstancedView_AtmosphereLightDiscCosHalfApexAngle;
	Result.SkyViewLutSizeAndInvSize = InstancedView_SkyViewLutSizeAndInvSize;
	Result.SkyCameraTranslatedWorldOrigin = InstancedView_SkyCameraTranslatedWorldOrigin;
	Result.SkyPlanetTranslatedWorldCenterAndViewHeight = InstancedView_SkyPlanetTranslatedWorldCenterAndViewHeight;
	Result.SkyViewLutReferential = InstancedView_SkyViewLutReferential;
	Result.SkyAtmosphereSkyLuminanceFactor = InstancedView_SkyAtmosphereSkyLuminanceFactor;
	Result.SkyAtmospherePresentInScene = InstancedView_SkyAtmospherePresentInScene;
	Result.SkyAtmosphereHeightFogContribution = InstancedView_SkyAtmosphereHeightFogContribution;
	Result.SkyAtmosphereBottomRadiusKm = InstancedView_SkyAtmosphereBottomRadiusKm;
	Result.SkyAtmosphereTopRadiusKm = InstancedView_SkyAtmosphereTopRadiusKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;
	Result.SkyAtmosphereAerialPerspectiveStartDepthKm = InstancedView_SkyAtmosphereAerialPerspectiveStartDepthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;
	Result.SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv = InstancedView_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;
	Result.SkyAtmosphereApplyCameraAerialPerspectiveVolume = InstancedView_SkyAtmosphereApplyCameraAerialPerspectiveVolume;
	Result.NormalCurvatureToRoughnessScaleBias = InstancedView_NormalCurvatureToRoughnessScaleBias;
	Result.RenderingReflectionCaptureMask = InstancedView_RenderingReflectionCaptureMask;
	Result.RealTimeReflectionCapture = InstancedView_RealTimeReflectionCapture;
	Result.RealTimeReflectionCapturePreExposure = InstancedView_RealTimeReflectionCapturePreExposure;
	Result.AmbientCubemapTint = InstancedView_AmbientCubemapTint;
	Result.AmbientCubemapIntensity = InstancedView_AmbientCubemapIntensity;
	Result.SkyLightApplyPrecomputedBentNormalShadowingFlag = InstancedView_SkyLightApplyPrecomputedBentNormalShadowingFlag;
	Result.SkyLightAffectReflectionFlag = InstancedView_SkyLightAffectReflectionFlag;
	Result.SkyLightAffectGlobalIlluminationFlag = InstancedView_SkyLightAffectGlobalIlluminationFlag;
	Result.SkyLightColor = InstancedView_SkyLightColor;
	Result.MobileSkyIrradianceEnvironmentMap = InstancedView_MobileSkyIrradianceEnvironmentMap;
	Result.MobilePreviewMode = InstancedView_MobilePreviewMode;
	Result.HMDEyePaddingOffset = InstancedView_HMDEyePaddingOffset;
	Result.ReflectionCubemapMaxMip = InstancedView_ReflectionCubemapMaxMip;
	Result.ShowDecalsMask = InstancedView_ShowDecalsMask;
	Result.DistanceFieldAOSpecularOcclusionMode = InstancedView_DistanceFieldAOSpecularOcclusionMode;
	Result.IndirectCapsuleSelfShadowingIntensity = InstancedView_IndirectCapsuleSelfShadowingIntensity;
	Result.ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight = InstancedView_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;
	Result.StereoPassIndex = InstancedView_StereoPassIndex;
	Result.GlobalVolumeCenterAndExtent = InstancedView_GlobalVolumeCenterAndExtent;
	Result.GlobalVolumeWorldToUVAddAndMul = InstancedView_GlobalVolumeWorldToUVAddAndMul;
	Result.GlobalDistanceFieldMipWorldToUVScale = InstancedView_GlobalDistanceFieldMipWorldToUVScale;
	Result.GlobalDistanceFieldMipWorldToUVBias = InstancedView_GlobalDistanceFieldMipWorldToUVBias;
	Result.GlobalDistanceFieldMipFactor = InstancedView_GlobalDistanceFieldMipFactor;
	Result.GlobalDistanceFieldMipTransition = InstancedView_GlobalDistanceFieldMipTransition;
	Result.GlobalDistanceFieldClipmapSizeInPages = InstancedView_GlobalDistanceFieldClipmapSizeInPages;
	Result.GlobalDistanceFieldInvPageAtlasSize = InstancedView_GlobalDistanceFieldInvPageAtlasSize;
	Result.GlobalDistanceFieldInvCoverageAtlasSize = InstancedView_GlobalDistanceFieldInvCoverageAtlasSize;
	Result.GlobalVolumeDimension = InstancedView_GlobalVolumeDimension;
	Result.GlobalVolumeTexelSize = InstancedView_GlobalVolumeTexelSize;
	Result.MaxGlobalDFAOConeDistance = InstancedView_MaxGlobalDFAOConeDistance;
	Result.NumGlobalSDFClipmaps = InstancedView_NumGlobalSDFClipmaps;
	Result.FullyCoveredExpandSurfaceScale = InstancedView_FullyCoveredExpandSurfaceScale;
	Result.UncoveredExpandSurfaceScale = InstancedView_UncoveredExpandSurfaceScale;
	Result.UncoveredMinStepScale = InstancedView_UncoveredMinStepScale;
	Result.CursorPosition = InstancedView_CursorPosition;
	Result.bCheckerboardSubsurfaceProfileRendering = InstancedView_bCheckerboardSubsurfaceProfileRendering;
	Result.VolumetricFogInvGridSize = InstancedView_VolumetricFogInvGridSize;
	Result.VolumetricFogGridZParams = InstancedView_VolumetricFogGridZParams;
	Result.VolumetricFogSVPosToVolumeUV = InstancedView_VolumetricFogSVPosToVolumeUV;
	Result.VolumetricFogMaxDistance = InstancedView_VolumetricFogMaxDistance;
	Result.VolumetricLightmapWorldToUVScale = InstancedView_VolumetricLightmapWorldToUVScale;
	Result.VolumetricLightmapWorldToUVAdd = InstancedView_VolumetricLightmapWorldToUVAdd;
	Result.VolumetricLightmapIndirectionTextureSize = InstancedView_VolumetricLightmapIndirectionTextureSize;
	Result.VolumetricLightmapBrickSize = InstancedView_VolumetricLightmapBrickSize;
	Result.VolumetricLightmapBrickTexelSize = InstancedView_VolumetricLightmapBrickTexelSize;
	Result.StereoIPD = InstancedView_StereoIPD;
	Result.IndirectLightingCacheShowFlag = InstancedView_IndirectLightingCacheShowFlag;
	Result.EyeToPixelSpreadAngle = InstancedView_EyeToPixelSpreadAngle;
	Result.XRPassthroughCameraUVs = InstancedView_XRPassthroughCameraUVs;
	Result.GlobalVirtualTextureMipBias = InstancedView_GlobalVirtualTextureMipBias;
	Result.VirtualTextureFeedbackShift = InstancedView_VirtualTextureFeedbackShift;
	Result.VirtualTextureFeedbackMask = InstancedView_VirtualTextureFeedbackMask;
	Result.VirtualTextureFeedbackStride = InstancedView_VirtualTextureFeedbackStride;
	Result.VirtualTextureFeedbackJitterOffset = InstancedView_VirtualTextureFeedbackJitterOffset;
	Result.VirtualTextureFeedbackSampleOffset = InstancedView_VirtualTextureFeedbackSampleOffset;
	Result.RuntimeVirtualTextureMipLevel = InstancedView_RuntimeVirtualTextureMipLevel;
	Result.RuntimeVirtualTexturePackHeight = InstancedView_RuntimeVirtualTexturePackHeight;
	Result.RuntimeVirtualTextureDebugParams = InstancedView_RuntimeVirtualTextureDebugParams;
	Result.OverrideLandscapeLOD = InstancedView_OverrideLandscapeLOD;
	Result.FarShadowStaticMeshLODBias = InstancedView_FarShadowStaticMeshLODBias;
	Result.MinRoughness = InstancedView_MinRoughness;
	Result.HairRenderInfo = InstancedView_HairRenderInfo;
	Result.EnableSkyLight = InstancedView_EnableSkyLight;
	Result.HairRenderInfoBits = InstancedView_HairRenderInfoBits;
	Result.HairComponents = InstancedView_HairComponents;
	Result.bSubsurfacePostprocessEnabled = InstancedView_bSubsurfacePostprocessEnabled;
	Result.SSProfilesTextureSizeAndInvSize = InstancedView_SSProfilesTextureSizeAndInvSize;
	Result.SSProfilesPreIntegratedTextureSizeAndInvSize = InstancedView_SSProfilesPreIntegratedTextureSizeAndInvSize;
	Result.PhysicsFieldClipmapCenter = InstancedView_PhysicsFieldClipmapCenter;
	Result.PhysicsFieldClipmapDistance = InstancedView_PhysicsFieldClipmapDistance;
	Result.PhysicsFieldClipmapResolution = InstancedView_PhysicsFieldClipmapResolution;
	Result.PhysicsFieldClipmapExponent = InstancedView_PhysicsFieldClipmapExponent;
	Result.PhysicsFieldClipmapCount = InstancedView_PhysicsFieldClipmapCount;
	Result.PhysicsFieldTargetCount = InstancedView_PhysicsFieldTargetCount;
	Result.PhysicsFieldTargets = InstancedView_PhysicsFieldTargets;
	Result.InstanceSceneDataSOAStride = InstancedView_InstanceSceneDataSOAStride;
	Result.GPUSceneViewId = InstancedView_GPUSceneViewId;
	FinalizeViewState(Result);
	return Result;
}
#line 16 "/Engine/Private/InstancedStereo.ush"

void FinalizeViewState(inout ViewState InOutView)
{
	InOutView.WorldToClip = MakeLWCInverseMatrix(InOutView.MatrixTilePosition, InOutView.RelativeWorldToClip);
	InOutView.ClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ClipToRelativeWorld);
	InOutView.ScreenToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.ScreenToRelativeWorld);
	InOutView.PrevClipToWorld = MakeLWCMatrix(InOutView.MatrixTilePosition, InOutView.PrevClipToRelativeWorld);

	InOutView.WorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldCameraOrigin);
	InOutView.WorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.RelativeWorldViewOrigin);
	InOutView.PrevWorldCameraOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldCameraOrigin);
	InOutView.PrevWorldViewOrigin = MakeLWCVector3(InOutView.ViewTilePosition, InOutView.PrevRelativeWorldViewOrigin);
	InOutView.PreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePreViewTranslation);
	InOutView.PrevPreViewTranslation = MakeLWCVector3(-InOutView.ViewTilePosition, InOutView.RelativePrevPreViewTranslation);
}



static ViewState ResolvedView = (ViewState)0.0f;

ViewState ResolveView()
{
	return GetPrimaryView();
}


static const float EyeOffsetScale[2] = { -1.0, 1.0 };
static const float4 EyeClipEdge[2] = { float4(-1.0, 0.0, 0.0, 1.0), float4(1.0, 0.0, 0.0, 1.0) };




ViewState ResolveView(uint ViewIndex)
{
	if (ViewIndex == 0)
	{
		return GetPrimaryView();
	}
	else
	{
		return GetInstancedView();
	}
}


bool IsInstancedStereo()
{

	return InstancedView_StereoPassIndex > 0;
#line 68 "/Engine/Private/InstancedStereo.ush"
}

uint GetEyeIndex(uint InstanceId)
{

	return IsInstancedStereo() ? InstanceId & 1 : 0;
#line 77 "/Engine/Private/InstancedStereo.ush"
}

uint GetInstanceId(uint InstanceId)
{

	return IsInstancedStereo() ? InstanceId / 2 : InstanceId;
#line 86 "/Engine/Private/InstancedStereo.ush"
}
#line 199 "/Engine/Private/Common.ush"
#line 200 "/Engine/Private/Common.ush"
#line 1 "Definitions.usf"
#line 201 "/Engine/Private/Common.ush"
#line 202 "/Engine/Private/Common.ush"
#line 1 "AssertionMacros.ush"
#line 203 "/Engine/Private/Common.ush"
#line 235 "/Engine/Private/Common.ush"
static float GlobalTextureMipBias = 0;
static float GlobalRayCone_TexArea = 0;
float ComputeRayConeLod(Texture2D Tex)
{






    return  0.0f ;

}

float ClampToHalfFloatRange(float X) { return clamp(X, float(0), MaxHalfFloat); }
float2 ClampToHalfFloatRange(float2 X) { return clamp(X, float(0).xx, MaxHalfFloat.xx); }
float3 ClampToHalfFloatRange(float3 X) { return clamp(X, float(0).xxx, MaxHalfFloat.xxx); }
float4 ClampToHalfFloatRange(float4 X) { return clamp(X, float(0).xxxx, MaxHalfFloat.xxxx); }



float4  Texture1DSample(Texture1D Tex, SamplerState Sampler, float UV)
{



	return Tex.Sample(Sampler, UV);

}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Tex.Sample(Sampler, UV);

}
float4  Texture2DSample(Texture2D Tex, SamplerState Sampler, FloatDeriv2 UV)
{



	return Tex.SampleGrad(Sampler, UV.Value, UV.Ddx, UV.Ddy);

}
float  Texture2DSample_A8(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Tex.Sample(Sampler, UV)  .a ;

}
float4  Texture3DSample(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Tex.Sample(Sampler, UV);

}
float4  TextureCubeSample(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return Tex.Sample(Sampler, UV);

}
float4  Texture2DArraySample(Texture2DArray Tex, SamplerState Sampler, float3 UV)
{



	return Tex.Sample(Sampler, UV);

}
float4  Texture1DSampleLevel(Texture1D Tex, SamplerState Sampler, float UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleLevel(Texture2D Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DSampleBias(Texture2D Tex, SamplerState Sampler, float2 UV,  float  MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
float4  Texture2DSampleGrad(Texture2D Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  Texture3DSampleLevel(Texture3D Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture3DSampleBias(Texture3D Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
float4  Texture3DSampleGrad(Texture3D Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureCubeSampleLevel(TextureCube Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float  TextureCubeSampleDepthLevel(TextureCube TexDepth, SamplerState Sampler, float3 UV,  float  Mip)
{
	return TexDepth.SampleLevel(Sampler, UV, Mip).x;
}
float4  TextureCubeSampleBias(TextureCube Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
float4  TextureCubeSampleGrad(TextureCube Tex, SamplerState Sampler, float3 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSample( Texture2D  Tex, SamplerState Sampler, float2 UV)
{







	return Tex.Sample(Sampler, UV);

}
float4  TextureExternalSampleGrad( Texture2D  Tex, SamplerState Sampler, float2 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}
float4  TextureExternalSampleLevel( Texture2D  Tex, SamplerState Sampler, float2 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}




float4  Texture1DSample_Decal(Texture1D Tex, SamplerState Sampler, float UV)
{



	return Texture1DSample(Tex, Sampler, UV);

}
float4  Texture2DSample_Decal(Texture2D Tex, SamplerState Sampler, float2 UV)
{



	return Texture2DSample(Tex, Sampler, UV);

}
float4  Texture3DSample_Decal(Texture3D Tex, SamplerState Sampler, float3 UV)
{



	return Texture3DSample(Tex, Sampler, UV);

}
float4  TextureCubeSample_Decal(TextureCube Tex, SamplerState Sampler, float3 UV)
{



	return TextureCubeSample(Tex, Sampler, UV);

}
float4  TextureExternalSample_Decal( Texture2D  Tex, SamplerState Sampler, float2 UV)
{



	return TextureExternalSample(Tex, Sampler, UV);

}

float4  Texture2DArraySampleLevel(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}
float4  Texture2DArraySampleBias(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float  MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}
float4  Texture2DArraySampleGrad(Texture2DArray Tex, SamplerState Sampler, float3 UV,  float2  DDX,  float2  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float2 Tile1Dto2D(float xsize, float idx)
{
	float2 xyidx = 0;
	xyidx.y = floor(idx / xsize);
	xyidx.x = idx - xsize * xyidx.y;

	return xyidx;
}
#line 471 "/Engine/Private/Common.ush"
float4 PseudoVolumeTexture(Texture2D Tex, SamplerState TexSampler, float3 inPos, float2 xysize, float numframes,
	uint mipmode = 0, float miplevel = 0, float2 InDDX = 0, float2 InDDY = 0)
{
	float z = inPos.z - 0.5f / numframes;
	float zframe = floor(z * numframes);
	float zphase = frac(z * numframes);

	float2 uv = frac(inPos.xy) / xysize;

	float2 curframe = Tile1Dto2D(xysize.x, zframe) / xysize;
	float2 nextframe = Tile1Dto2D(xysize.x, zframe + 1) / xysize;

	float2 uvCurFrame = uv + curframe;
	float2 uvNextFrame = uv + nextframe;
#line 491 "/Engine/Private/Common.ush"
	float4 sampleA = 0, sampleB = 0;
	switch (mipmode)
	{
	case 0:
		sampleA = Tex.SampleLevel(TexSampler, uvCurFrame, miplevel);
		sampleB = Tex.SampleLevel(TexSampler, uvNextFrame, miplevel);
		break;
	case 1:
		sampleA = Texture2DSample(Tex, TexSampler, uvCurFrame);
		sampleB = Texture2DSample(Tex, TexSampler, uvNextFrame);
		break;
	case 2:
		sampleA = Tex.SampleGrad(TexSampler, uvCurFrame, InDDX, InDDY);
		sampleB = Tex.SampleGrad(TexSampler, uvNextFrame, InDDX, InDDY);
		break;
	default:
		break;
	}

	return lerp(sampleA, sampleB, zphase);
}


float4  TextureCubeArraySample(TextureCubeArray Tex, SamplerState Sampler, float4 UV)
{
	return Tex.Sample(Sampler, UV);
}

float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float  Mip)
{
	return Tex.SampleLevel(Sampler, UV, Mip);
}

float4  TextureCubeArraySampleBias(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float  MipBias)
{



	return Tex.SampleBias(Sampler, UV, MipBias);

}

float4  TextureCubeArraySampleGrad(TextureCubeArray Tex, SamplerState Sampler, float4 UV,  float3  DDX,  float3  DDY)
{
	return Tex.SampleGrad(Sampler, UV, DDX, DDY);
}


float4  TextureCubeArraySampleLevel(TextureCubeArray Tex, SamplerState Sampler, float3 UV, float ArrayIndex,  float  Mip)
{
	return TextureCubeArraySampleLevel(Tex, Sampler, float4(UV, ArrayIndex), Mip);
}
#line 582 "/Engine/Private/Common.ush"
float  Luminance(  float3  LinearColor )
{
	return dot( LinearColor,  float3 ( 0.3, 0.59, 0.11 ) );
}

float  length2( float2  v)
{
	return dot(v, v);
}
float  length2( float3  v)
{
	return dot(v, v);
}
float  length2( float4  v)
{
	return dot(v, v);
}

uint Mod(uint a, uint b)
{

	return a % b;
#line 607 "/Engine/Private/Common.ush"
}

uint2 Mod(uint2 a, uint2 b)
{

	return a % b;
#line 616 "/Engine/Private/Common.ush"
}

uint3 Mod(uint3 a, uint3 b)
{

	return a % b;
#line 625 "/Engine/Private/Common.ush"
}

float  UnClampedPow( float  X,  float  Y)
{
	return pow(X,  Y );
}
float2  UnClampedPow( float2  X,  float2  Y)
{
	return pow(X,  Y );
}
float3  UnClampedPow( float3  X,  float3  Y)
{
	return pow(X,  Y );
}
float4  UnClampedPow( float4  X,  float4  Y)
{
	return pow(X,  Y );
}




float  ClampedPow( float  X, float  Y)
{
	return pow(max(abs(X), 0.000001f ),Y);
}
float2  ClampedPow( float2  X, float2  Y)
{
	return pow(max(abs(X), float2 ( 0.000001f , 0.000001f )),Y);
}
float3  ClampedPow( float3  X, float3  Y)
{
	return pow(max(abs(X), float3 ( 0.000001f , 0.000001f , 0.000001f )),Y);
}
float4  ClampedPow( float4  X, float4  Y)
{
	return pow(max(abs(X), float4 ( 0.000001f , 0.000001f , 0.000001f , 0.000001f )),Y);
}


float  PositiveClampedPow( float  Base,  float  Exponent)
{
	return (Base <= 0.0f) ? 0.0f : pow(Base, Exponent);
}
float2  PositiveClampedPow( float2  Base,  float2  Exponent)
{
	return  float2 (PositiveClampedPow(Base.x, Exponent.x), PositiveClampedPow(Base.y, Exponent.y));
}
float3  PositiveClampedPow( float3  Base,  float3  Exponent)
{
	return  float3 (PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.z, Exponent.z));
}
float4  PositiveClampedPow( float4  Base,  float4  Exponent)
{
	return  float4 (PositiveClampedPow(Base.xy, Exponent.xy), PositiveClampedPow(Base.zw, Exponent.zw));
}

float DDX(float Input)
{



	return ddx(Input);

}

float2 DDX(float2 Input)
{



	return ddx(Input);

}

float3 DDX(float3 Input)
{



	return ddx(Input);

}

float4 DDX(float4 Input)
{



	return ddx(Input);

}

float DDY(float Input)
{



	return ddy(Input);

}

float2 DDY(float2 Input)
{



	return ddy(Input);

}

float3 DDY(float3 Input)
{



	return ddy(Input);

}

float4 DDY(float4 Input)
{



	return ddy(Input);

}
#line 754 "/Engine/Private/Common.ush"
#line 1 "FastMath.ush"
#line 46 "/Engine/Private/FastMath.ush"
float rsqrtFast( float x )
{
	int i = asint(x);
	i = 0x5f3759df - (i >> 1);
	return asfloat(i);
}




float sqrtFast( float x )
{
	int i = asint(x);
	i = 0x1FBD1DF5 + (i >> 1);
	return asfloat(i);
}




float rcpFast( float x )
{
	int i = asint(x);
	i = 0x7EF311C2 - i;
	return asfloat(i);
}





float rcpFastNR1( float x )
{
	int i = asint(x);
	i = 0x7EF311C3 - i;
	float xRcp = asfloat(i);
	xRcp = xRcp * (-xRcp * x + 2.0f);
	return xRcp;
}

float lengthFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return sqrtFast( LengthSqr );
}

float3 normalizeFast( float3 v )
{
	float LengthSqr = dot(v,v);
	return v * rsqrtFast( LengthSqr );
}

float4 fastClamp(float4 x, float4 Min, float4 Max)
{




	return clamp(x, Min, Max);

}

float3 fastClamp(float3 x, float3 Min, float3 Max)
{




	return clamp(x, Min, Max);

}

float2 fastClamp(float2 x, float2 Min, float2 Max)
{




	return clamp(x, Min, Max);

}

float fastClamp(float x, float Min, float Max)
{




	return clamp(x, Min, Max);

}

int4 fastClamp(int4 x, int4 Min, int4 Max)
{




	return clamp(x, Min, Max);

}

int3 fastClamp(int3 x, int3 Min, int3 Max)
{




	return clamp(x, Min, Max);

}

int2 fastClamp(int2 x, int2 Min, int2 Max)
{




	return clamp(x, Min, Max);

}

int fastClamp(int x, int Min, int Max)
{




	return clamp(x, Min, Max);

}









float acosFast(float inX)
{
    float x = abs(inX);
    float res = -0.156583f * x + (0.5 * PI);
    res *= sqrt(1.0f - x);
    return (inX >= 0) ? res : PI - res;
}

float2 acosFast( float2 x )
{
	return float2( acosFast(x.x), acosFast(x.y) );
}

float3 acosFast( float3 x )
{
	return float3( acosFast(x.x), acosFast(x.y), acosFast(x.z) );
}

float4 acosFast( float4 x )
{
	return float4( acosFast(x.x), acosFast(x.y), acosFast(x.z), acosFast(x.w) );
}




float asinFast( float x )
{
    return (0.5 * PI) - acosFast(x);
}

float2 asinFast( float2 x)
{
	return float2( asinFast(x.x), asinFast(x.y) );
}

float3 asinFast( float3 x)
{
	return float3( asinFast(x.x), asinFast(x.y), asinFast(x.z) );
}

float4 asinFast( float4 x )
{
	return float4( asinFast(x.x), asinFast(x.y), asinFast(x.z), asinFast(x.w) );
}





float atanFastPos( float x )
{
    float t0 = (x < 1.0f) ? x : 1.0f / x;
    float t1 = t0 * t0;
    float poly = 0.0872929f;
    poly = -0.301895f + poly * t1;
    poly = 1.0f + poly * t1;
    poly = poly * t0;
    return (x < 1.0f) ? poly : (0.5 * PI) - poly;
}



float atanFast( float x )
{
    float t0 = atanFastPos( abs(x) );
    return (x < 0) ? -t0: t0;
}

float2 atanFast( float2 x )
{
	return float2( atanFast(x.x), atanFast(x.y) );
}

float3 atanFast( float3 x )
{
	return float3( atanFast(x.x), atanFast(x.y), atanFast(x.z) );
}

float4 atanFast( float4 x )
{
	return float4( atanFast(x.x), atanFast(x.y), atanFast(x.z), atanFast(x.w) );
}

float atan2Fast( float y, float x )
{
	float t0 = max( abs(x), abs(y) );
	float t1 = min( abs(x), abs(y) );
	float t3 = t1 / t0;
	float t4 = t3 * t3;


	t0 = + 0.0872929;
	t0 = t0 * t4 - 0.301895;
	t0 = t0 * t4 + 1.0;
	t3 = t0 * t3;

	t3 = abs(y) > abs(x) ? (0.5 * PI) - t3 : t3;
	t3 = x < 0 ? PI - t3 : t3;
	t3 = y < 0 ? -t3 : t3;

	return t3;
}

float2 atan2Fast( float2 y, float2 x )
{
	return float2( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y) );
}

float3 atan2Fast( float3 y, float3 x )
{
	return float3( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z) );
}

float4 atan2Fast( float4 y, float4 x )
{
	return float4( atan2Fast(y.x, x.x), atan2Fast(y.y, x.y), atan2Fast(y.z, x.z), atan2Fast(y.w, x.w) );
}





float acosFast4(float inX)
{
	float x1 = abs(inX);
	float x2 = x1 * x1;
	float x3 = x2 * x1;
	float s;

	s = -0.2121144f * x1 + 1.5707288f;
	s = 0.0742610f * x2 + s;
	s = -0.0187293f * x3 + s;
	s = sqrt(1.0f - x1) * s;



	return inX >= 0.0f ? s : PI - s;
}




float asinFast4( float x )
{
	return (0.5 * PI) - acosFast4(x);
}




float CosBetweenVectors(float3 A, float3 B)
{

	return dot(A, B) * rsqrt(length2(A) * length2(B));
}



float AngleBetweenVectors(float3 A, float3 B)
{
	return acos(CosBetweenVectors(A, B));
}


float AngleBetweenVectorsFast(float3 A, float3 B)
{
	return acosFast(CosBetweenVectors(A, B));
}


int SignFastInt(float v)
{
	return 1 - int((asuint(v) & 0x80000000) >> 30);
}

int2 SignFastInt(float2 v)
{
	return int2(SignFastInt(v.x), SignFastInt(v.y));
}
#line 755 "/Engine/Private/Common.ush"
#line 1 "Random.ush"
#line 12 "/Engine/Private/Random.ush"
float PseudoRandom(float2 xy)
{
	float2 pos = frac(xy / 128.0f) * 128.0f + float2(-64.340622f, -72.465622f);


	return frac(dot(pos.xyx * pos.xyy, float3(20.390625f, 60.703125f, 2.4281209f)));
}







float InterleavedGradientNoise( float2 uv, float FrameId )
{

	uv += FrameId * (float2(47, 17) * 0.695f);

    const float3 magic = float3( 0.06711056f, 0.00583715f, 52.9829189f );
    return frac(magic.z * frac(dot(uv, magic.xy)));
}



float RandFast( uint2 PixelPos, float Magic = 3571.0 )
{
	float2 Random2 = ( 1.0 / 4320.0 ) * PixelPos + float2( 0.25, 0.0 );
	float Random = frac( dot( Random2 * Random2, Magic ) );
	Random = frac( Random * Random * (2 * Magic) );
	return Random;
}
#line 56 "/Engine/Private/Random.ush"
float RandBBSfloat(float seed)
{
	float s = frac(seed /  4093 );
	s = frac(s * s *  4093 );
	s = frac(s * s *  4093 );
	return s;
}








uint3 Rand3DPCG16(int3 p)
{

	uint3 v = uint3(p);




	v = v * 1664525u + 1013904223u;
#line 94 "/Engine/Private/Random.ush"
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	return v >> 16u;
}






uint3 Rand3DPCG32(int3 p)
{

	uint3 v = uint3(p);


	v = v * 1664525u + 1013904223u;


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;


	v ^= v >> 16u;


	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return v;
}








uint4 Rand4DPCG32(int4 p)
{

	uint4 v = uint4(p);


	v = v * 1664525u + 1013904223u;


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;


	v ^= (v >> 16u);


	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;

	return v;
}
#line 174 "/Engine/Private/Random.ush"
void FindBestAxisVectors(float3 In, out float3 Axis1, out float3 Axis2 )
{
	const float3 N = abs(In);


	if( N.z > N.x && N.z > N.y )
	{
		Axis1 = float3(1, 0, 0);
	}
	else
	{
		Axis1 = float3(0, 0, 1);
	}

	Axis1 = normalize(Axis1 - In * dot(Axis1, In));
	Axis2 = cross(Axis1, In);
}
#line 215 "/Engine/Private/Random.ush"
uint2 ScrambleTEA(uint2 v, uint IterationCount = 3)
{

	uint k[4] ={ 0xA341316Cu , 0xC8013EA4u , 0xAD90777Du , 0x7E95761Eu };

	uint y = v[0];
	uint z = v[1];
	uint sum = 0;

	[unroll]  for(uint i = 0; i < IterationCount; ++i)
	{
		sum += 0x9e3779b9;
		y += ((z << 4u) + k[0]) ^ (z + sum) ^ ((z >> 5u) + k[1]);
		z += ((y << 4u) + k[2]) ^ (y + sum) ^ ((y >> 5u) + k[3]);
	}

	return uint2(y, z);
}






float3 NoiseTileWrap(float3 v, bool bTiling, float RepeatSize)
{
	return bTiling ? (frac(v / RepeatSize) * RepeatSize) : v;
}




float4 PerlinRamp(float4 t)
{
	return t * t * t * (t * (t * 6 - 15) + 10);
}




float4 PerlinRampDerivative(float4 t)
{
	return t * t * (t * (t * 30 - 60) + 30);
}







float4 MGradient(int seed, float3 offset)
{
	uint rand = Rand3DPCG16(int3(seed,0,0)).x;
	float3 direction = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	return float4(direction, dot(direction, offset));
}







float3 NoiseSeeds(float3 v, bool bTiling, float RepeatSize,
	out float seed000, out float seed001, out float seed010, out float seed011,
	out float seed100, out float seed101, out float seed110, out float seed111)
{
	float3 fv = frac(v);
	float3 iv = floor(v);

	const float3 primes = float3(19, 47, 101);

	if (bTiling)
	{
		seed000 = dot(primes, NoiseTileWrap(iv, true, RepeatSize));
		seed100 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 0), true, RepeatSize));
		seed010 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 0), true, RepeatSize));
		seed110 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 0), true, RepeatSize));
		seed001 = dot(primes, NoiseTileWrap(iv + float3(0, 0, 1), true, RepeatSize));
		seed101 = dot(primes, NoiseTileWrap(iv + float3(1, 0, 1), true, RepeatSize));
		seed011 = dot(primes, NoiseTileWrap(iv + float3(0, 1, 1), true, RepeatSize));
		seed111 = dot(primes, NoiseTileWrap(iv + float3(1, 1, 1), true, RepeatSize));
	}
	else
	{
		seed000 = dot(iv, primes);
		seed100 = seed000 + primes.x;
		seed010 = seed000 + primes.y;
		seed110 = seed100 + primes.y;
		seed001 = seed000 + primes.z;
		seed101 = seed100 + primes.z;
		seed011 = seed010 + primes.z;
		seed111 = seed110 + primes.z;
	}

	return fv;
}







float GradientNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = MGradient(int(seed000), fv - float3(0, 0, 0)).w;
	float rand100 = MGradient(int(seed100), fv - float3(1, 0, 0)).w;
	float rand010 = MGradient(int(seed010), fv - float3(0, 1, 0)).w;
	float rand110 = MGradient(int(seed110), fv - float3(1, 1, 0)).w;
	float rand001 = MGradient(int(seed001), fv - float3(0, 0, 1)).w;
	float rand101 = MGradient(int(seed101), fv - float3(1, 0, 1)).w;
	float rand011 = MGradient(int(seed011), fv - float3(0, 1, 1)).w;
	float rand111 = MGradient(int(seed111), fv - float3(1, 1, 1)).w;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}





float4x3 SimplexCorners(float3 v)
{

	float3 tet = floor(v + v.x/3 + v.y/3 + v.z/3);
	float3 base = tet - tet.x/6 - tet.y/6 - tet.z/6;
	float3 f = v - base;



	float3 g = step(f.yzx, f.xyz), h = 1 - g.zxy;
	float3 a1 = min(g, h) - 1. / 6., a2 = max(g, h) - 1. / 3.;


	return float4x3(base, base + a1, base + a2, base + 0.5);
}




float4 SimplexSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	return (1 * scale + s*(-3 * scale + s*(3 * scale - s*scale)));
}




float3x4 SimplexDSmooth(float4x3 f)
{
	const float scale = 1024. / 375.;
	float4 d = float4(dot(f[0], f[0]), dot(f[1], f[1]), dot(f[2], f[2]), dot(f[3], f[3]));
	float4 s = saturate(2 * d);
	s = -12 * scale + s*(24 * scale - s * 12 * scale);

	return float3x4(
		s * float4(f[0][0], f[1][0], f[2][0], f[3][0]),
		s * float4(f[0][1], f[1][1], f[2][1], f[3][1]),
		s * float4(f[0][2], f[1][2], f[2][2], f[3][2]));
}
#line 403 "/Engine/Private/Random.ush"
float3x4 JacobianSimplex_ALU(float3 v, bool bTiling, float RepeatSize)
{

	float4x3 T = SimplexCorners(v);
	uint3 rand;
	float4x3 gvec[3], fv;
	float3x4 grad;



	fv[0] = v - T[0];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[0] + 0.5, bTiling, RepeatSize))));
	gvec[0][0] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][0] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][0] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][0] = dot(gvec[0][0], fv[0]);
	grad[1][0] = dot(gvec[1][0], fv[0]);
	grad[2][0] = dot(gvec[2][0], fv[0]);

	fv[1] = v - T[1];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[1] + 0.5, bTiling, RepeatSize))));
	gvec[0][1] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][1] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][1] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][1] = dot(gvec[0][1], fv[1]);
	grad[1][1] = dot(gvec[1][1], fv[1]);
	grad[2][1] = dot(gvec[2][1], fv[1]);

	fv[2] = v - T[2];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[2] + 0.5, bTiling, RepeatSize))));
	gvec[0][2] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][2] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][2] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][2] = dot(gvec[0][2], fv[2]);
	grad[1][2] = dot(gvec[1][2], fv[2]);
	grad[2][2] = dot(gvec[2][2], fv[2]);

	fv[3] = v - T[3];
	rand = Rand3DPCG16(int3(floor(NoiseTileWrap(6 * T[3] + 0.5, bTiling, RepeatSize))));
	gvec[0][3] = float3(rand.xxx &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[1][3] = float3(rand.yyy &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	gvec[2][3] = float3(rand.zzz &  int3(0x8000, 0x4000, 0x2000) ) *  float3(1. / 0x4000, 1. / 0x2000, 1. / 0x1000)  - 1;
	grad[0][3] = dot(gvec[0][3], fv[3]);
	grad[1][3] = dot(gvec[1][3], fv[3]);
	grad[2][3] = dot(gvec[2][3], fv[3]);


	float4 sv = SimplexSmooth(fv);
	float3x4 ds = SimplexDSmooth(fv);

	float3x4 jacobian;
	jacobian[0] = float4(mul(sv, gvec[0]) + mul(ds, grad[0]), dot(sv, grad[0]));
	jacobian[1] = float4(mul(sv, gvec[1]) + mul(ds, grad[1]), dot(sv, grad[1]));
	jacobian[2] = float4(mul(sv, gvec[2]) + mul(ds, grad[2]), dot(sv, grad[2]));

	return jacobian;
}






float ValueNoise3D_ALU(float3 v, bool bTiling, float RepeatSize)
{
	float seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111;
	float3 fv = NoiseSeeds(v, bTiling, RepeatSize, seed000, seed001, seed010, seed011, seed100, seed101, seed110, seed111);

	float rand000 = RandBBSfloat(seed000) * 2 - 1;
	float rand100 = RandBBSfloat(seed100) * 2 - 1;
	float rand010 = RandBBSfloat(seed010) * 2 - 1;
	float rand110 = RandBBSfloat(seed110) * 2 - 1;
	float rand001 = RandBBSfloat(seed001) * 2 - 1;
	float rand101 = RandBBSfloat(seed101) * 2 - 1;
	float rand011 = RandBBSfloat(seed011) * 2 - 1;
	float rand111 = RandBBSfloat(seed111) * 2 - 1;

	float3 Weights = PerlinRamp(float4(fv, 0)).xyz;

	float i = lerp(lerp(rand000, rand100, Weights.x), lerp(rand010, rand110, Weights.x), Weights.y);
	float j = lerp(lerp(rand001, rand101, Weights.x), lerp(rand011, rand111, Weights.x), Weights.y);
	return lerp(i, j, Weights.z).x;
}









float GradientNoise3D_TEX(float3 v, bool bTiling, float RepeatSize)
{
	bTiling = true;
	float3 fv = frac(v);
	float3 iv0 = NoiseTileWrap(floor(v), bTiling, RepeatSize);
	float3 iv1 = NoiseTileWrap(iv0 + 1, bTiling, RepeatSize);

	const int2 ZShear = int2(17, 89);

	float2 OffsetA = iv0.z * ZShear;
	float2 OffsetB = OffsetA + ZShear;
	if (bTiling)
	{
		OffsetB = iv1.z * ZShear;
	}


	float ts = 1 / 128.0f;


	float2 TexA0 = (iv0.xy + OffsetA + 0.5f) * ts;
	float2 TexB0 = (iv0.xy + OffsetB + 0.5f) * ts;


	float2 TexA1 = TexA0 + ts;
	float2 TexB1 = TexB0 + ts;
	if (bTiling)
	{
		TexA1 = (iv1.xy + OffsetA + 0.5f) * ts;
		TexB1 = (iv1.xy + OffsetB + 0.5f) * ts;
	}



	float3 A = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA0.y), 0).xyz * 2 - 1;
	float3 B = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA0.y), 0).xyz * 2 - 1;
	float3 C = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA0.x, TexA1.y), 0).xyz * 2 - 1;
	float3 D = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexA1.x, TexA1.y), 0).xyz * 2 - 1;
	float3 E = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB0.y), 0).xyz * 2 - 1;
	float3 F = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB0.y), 0).xyz * 2 - 1;
	float3 G = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB0.x, TexB1.y), 0).xyz * 2 - 1;
	float3 H = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, float2(TexB1.x, TexB1.y), 0).xyz * 2 - 1;

	float a = dot(A, fv - float3(0, 0, 0));
	float b = dot(B, fv - float3(1, 0, 0));
	float c = dot(C, fv - float3(0, 1, 0));
	float d = dot(D, fv - float3(1, 1, 0));
	float e = dot(E, fv - float3(0, 0, 1));
	float f = dot(F, fv - float3(1, 0, 1));
	float g = dot(G, fv - float3(0, 1, 1));
	float h = dot(H, fv - float3(1, 1, 1));

	float3 Weights = PerlinRamp(frac(float4(fv, 0))).xyz;

	float i = lerp(lerp(a, b, Weights.x), lerp(c, d, Weights.x), Weights.y);
	float j = lerp(lerp(e, f, Weights.x), lerp(g, h, Weights.x), Weights.y);

	return lerp(i, j, Weights.z);
}



float FastGradientPerlinNoise3D_TEX(float3 xyz)
{

	float Extent = 16;



	xyz = frac(xyz / (Extent - 1)) * (Extent - 1);


	float3 uvw = frac(xyz);


	float3 p0 = xyz - uvw;


	float3 f = PerlinRamp(float4(uvw, 0)).xyz;

	float3 p = p0 + f;

	float4 NoiseSample = Texture3DSampleLevel(View_PerlinNoise3DTexture, View_PerlinNoise3DTextureSampler, p / Extent + 0.5f / Extent, 0);



	float3 n = NoiseSample.xyz * 255.0f / 127.0f - 1.0f;
	float d = NoiseSample.w * 255.f - 127;
	return dot(xyz, n) - d;
}





float3 VoronoiCornerSample(float3 pos, int Quality)
{

	float3 noise = float3(Rand3DPCG16(int3(pos))) / 0xffff - 0.5;



	if (Quality <= 2)
	{
		return normalize(noise) * 0.2588;
	}



	if (Quality == 3)
	{
		return normalize(noise) * 0.3090;
	}


	return noise;
}








float4 VoronoiCompare(float4 minval, float3 candidate, float3 offset, bool bDistanceOnly)
{
	if (bDistanceOnly)
	{
		return float4(0, 0, 0, min(minval.w, dot(offset, offset)));
	}
	else
	{
		float newdist = dot(offset, offset);
		return newdist > minval.w ? minval : float4(candidate, newdist);
	}
}


float4 VoronoiNoise3D_ALU(float3 v, int Quality, bool bTiling, float RepeatSize, bool bDistanceOnly)
{
	float3 fv = frac(v), fv2 = frac(v + 0.5);
	float3 iv = floor(v), iv2 = floor(v + 0.5);


	float4 mindist = float4(0,0,0,100);
	float3 p, offset;


	if (Quality == 3)
	{
		[unroll(3)]  for (offset.x = -1; offset.x <= 1; ++offset.x)
		{
			[unroll(3)]  for (offset.y = -1; offset.y <= 1; ++offset.y)
			{
				[unroll(3)]  for (offset.z = -1; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
				}
			}
		}
	}


	else
	{
		[unroll(2)]  for (offset.x = 0; offset.x <= 1; ++offset.x)
		{
			[unroll(2)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(2)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{
					p = offset + VoronoiCornerSample(NoiseTileWrap(iv + offset, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					if (Quality == 2)
					{

						p = offset + VoronoiCornerSample(NoiseTileWrap(iv2 + offset, bTiling, RepeatSize) + 467, Quality);
						mindist = VoronoiCompare(mindist, iv2 + p, fv2 - p, bDistanceOnly);
					}
				}
			}
		}
	}


	if (Quality >= 4)
	{
		[unroll(2)]  for (offset.x = -1; offset.x <= 2; offset.x += 3)
		{
			[unroll(2)]  for (offset.y = 0; offset.y <= 1; ++offset.y)
			{
				[unroll(2)]  for (offset.z = 0; offset.z <= 1; ++offset.z)
				{

					p = offset.xyz + VoronoiCornerSample(NoiseTileWrap(iv + offset.xyz, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.yzx + VoronoiCornerSample(NoiseTileWrap(iv + offset.yzx, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);


					p = offset.zxy + VoronoiCornerSample(NoiseTileWrap(iv + offset.zxy, bTiling, RepeatSize), Quality);
					mindist = VoronoiCompare(mindist, iv + p, fv - p, bDistanceOnly);
				}
			}
		}
	}


	return float4(mindist.xyz, sqrt(mindist.w));
}







float3 ComputeSimplexWeights2D(float2 OrthogonalPos, out float2 PosA, out float2 PosB, out float2 PosC)
{
	float2 OrthogonalPosFloor = floor(OrthogonalPos);
	PosA = OrthogonalPosFloor;
	PosB = PosA + float2(1, 1);

	float2 LocalPos = OrthogonalPos - OrthogonalPosFloor;

	PosC = PosA + ((LocalPos.x > LocalPos.y) ? float2(1,0) : float2(0,1));

	float b = min(LocalPos.x, LocalPos.y);
	float c = abs(LocalPos.y - LocalPos.x);
	float a = 1.0f - b - c;

	return float3(a, b, c);
}



float4 ComputeSimplexWeights3D(float3 OrthogonalPos, out float3 PosA, out float3 PosB, out float3 PosC, out float3 PosD)
{
	float3 OrthogonalPosFloor = floor(OrthogonalPos);

	PosA = OrthogonalPosFloor;
	PosB = PosA + float3(1, 1, 1);

	OrthogonalPos -= OrthogonalPosFloor;

	float Largest = max(OrthogonalPos.x, max(OrthogonalPos.y, OrthogonalPos.z));
	float Smallest = min(OrthogonalPos.x, min(OrthogonalPos.y, OrthogonalPos.z));

	PosC = PosA + float3(Largest == OrthogonalPos.x, Largest == OrthogonalPos.y, Largest == OrthogonalPos.z);
	PosD = PosA + float3(Smallest != OrthogonalPos.x, Smallest != OrthogonalPos.y, Smallest != OrthogonalPos.z);

	float4 ret;

	float RG = OrthogonalPos.x - OrthogonalPos.y;
	float RB = OrthogonalPos.x - OrthogonalPos.z;
	float GB = OrthogonalPos.y - OrthogonalPos.z;

	ret.b =
		  min(max(0, RG), max(0, RB))
		+ min(max(0, -RG), max(0, GB))
		+ min(max(0, -RB), max(0, -GB));

	ret.a =
		  min(max(0, -RG), max(0, -RB))
		+ min(max(0, RG), max(0, -GB))
		+ min(max(0, RB), max(0, GB));

	ret.g = Smallest;
	ret.r = 1.0f - ret.g - ret.b - ret.a;

	return ret;
}

float2 GetPerlinNoiseGradientTextureAt(float2 v)
{
	float2 TexA = (v.xy + 0.5f) / 128.0f;


	float3 p = Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA, 0).xyz * 2 - 1;
	return normalize(p.xy + p.z * 0.33f);
}

float3 GetPerlinNoiseGradientTextureAt(float3 v)
{
	const float2 ZShear = float2(17.0f, 89.0f);

	float2 OffsetA = v.z * ZShear;
	float2 TexA = (v.xy + OffsetA + 0.5f) / 128.0f;

	return Texture2DSampleLevel(View_PerlinNoiseGradientTexture, View_PerlinNoiseGradientTextureSampler, TexA , 0).xyz * 2 - 1;
}

float2 SkewSimplex(float2 In)
{
	return In + dot(In, (sqrt(3.0f) - 1.0f) * 0.5f );
}
float2 UnSkewSimplex(float2 In)
{
	return In - dot(In, (3.0f - sqrt(3.0f)) / 6.0f );
}
float3 SkewSimplex(float3 In)
{
	return In + dot(In, 1.0 / 3.0f );
}
float3 UnSkewSimplex(float3 In)
{
	return In - dot(In, 1.0 / 6.0f );
}




float GradientSimplexNoise2D_TEX(float2 EvalPos)
{
	float2 OrthogonalPos = SkewSimplex(EvalPos);

	float2 PosA, PosB, PosC, PosD;
	float3 Weights = ComputeSimplexWeights2D(OrthogonalPos, PosA, PosB, PosC);


	float2 A = GetPerlinNoiseGradientTextureAt(PosA);
	float2 B = GetPerlinNoiseGradientTextureAt(PosB);
	float2 C = GetPerlinNoiseGradientTextureAt(PosC);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);

	float DistanceWeight;

	DistanceWeight = saturate(0.5f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.5f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;

	return 70 * (a + b + c);
}






float SimplexNoise3D_TEX(float3 EvalPos)
{
	float3 OrthogonalPos = SkewSimplex(EvalPos);

	float3 PosA, PosB, PosC, PosD;
	float4 Weights = ComputeSimplexWeights3D(OrthogonalPos, PosA, PosB, PosC, PosD);


	float3 A = GetPerlinNoiseGradientTextureAt(PosA);
	float3 B = GetPerlinNoiseGradientTextureAt(PosB);
	float3 C = GetPerlinNoiseGradientTextureAt(PosC);
	float3 D = GetPerlinNoiseGradientTextureAt(PosD);

	PosA = UnSkewSimplex(PosA);
	PosB = UnSkewSimplex(PosB);
	PosC = UnSkewSimplex(PosC);
	PosD = UnSkewSimplex(PosD);

	float DistanceWeight;

	DistanceWeight = saturate(0.6f - length2(EvalPos - PosA)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float a = dot(A, EvalPos - PosA) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosB)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float b = dot(B, EvalPos - PosB) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosC)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float c = dot(C, EvalPos - PosC) * DistanceWeight;
	DistanceWeight = saturate(0.6f - length2(EvalPos - PosD)); DistanceWeight *= DistanceWeight; DistanceWeight *= DistanceWeight;
	float d = dot(D, EvalPos - PosD) * DistanceWeight;

	return 32 * (a + b + c + d);
}


float VolumeRaymarch(float3 posPixelWS, float3 posCameraWS)
{
	float ret = 0;
	int cnt = 60;

	[loop]  for(int i=0; i < cnt; ++i)
	{
		ret += saturate(FastGradientPerlinNoise3D_TEX(lerp(posPixelWS, posCameraWS, i/(float)cnt) * 0.01) - 0.2f);
	}

	return ret / cnt * (length(posPixelWS - posCameraWS) * 0.001f );
}
#line 756 "/Engine/Private/Common.ush"
#line 761 "/Engine/Private/Common.ush"
float  PhongShadingPow( float  X,  float  Y)
{
#line 779 "/Engine/Private/Common.ush"
	return ClampedPow(X, Y);
}
#line 801 "/Engine/Private/Common.ush"
Texture2D LightAttenuationTexture;
SamplerState LightAttenuationTextureSampler;





float ConvertTangentUnormToSnorm8(float Input)
{
	int IntVal = int(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float2 ConvertTangentUnormToSnorm8(float2 Input)
{
	int2 IntVal = int2(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float3 ConvertTangentUnormToSnorm8(float3 Input)
{
	int3 IntVal = int3(round(Input * 255.0f));
	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float4 ConvertTangentUnormToSnorm8(float4 Input)
{
	int4 IntVal = int4(round(Input * 255.0f));

	IntVal = (IntVal > 127) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 127.0f, -1, 1);
}

float ConvertTangentUnormToSnorm16(float Input)
{
	int IntVal = int(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFF8000) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float2 ConvertTangentUnormToSnorm16(float2 Input)
{
	int2 IntVal = int2(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float3 ConvertTangentUnormToSnorm16(float3 Input)
{
	int3 IntVal = int3(round(Input * 65535.0f));
	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float4 ConvertTangentUnormToSnorm16(float4 Input)
{
	int4 IntVal = int4(round(Input * 65535.0f));

	IntVal = (IntVal > 32767) ? (IntVal | 0xFFFFFF80) : IntVal;
	return clamp(IntVal / 32767.0f, -1, 1);
}

float ConvertTangentSnormToUnorm8(float Input)
{
	float Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float2 ConvertTangentSnormToUnorm8(float2 Input)
{
	float2 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float3 ConvertTangentSnormToUnorm8(float3 Input)
{
	float3 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float4 ConvertTangentSnormToUnorm8(float4 Input)
{
	float4 Res = Input >= 0.0f ? Input * 127 : ((Input + 1.0) * 127) + 128;
	return clamp(Res / 255, 0.0f, 0.99f);
}

float ConvertTangentSnormToUnorm16(float Input)
{
	float Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float2 ConvertTangentSnormToUnorm16(float2 Input)
{
	float2 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float3 ConvertTangentSnormToUnorm16(float3 Input)
{
	float3 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}

float4 ConvertTangentSnormToUnorm16(float4 Input)
{
	float4 Res = Input >= 0.0f ? Input * 32767 : ((Input + 1.0) * 32767) + 32768;
	return clamp(Res / 65535, 0.0f, 0.99f);
}






uint PackUnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, 0.0, 1.0) * 65535.0));
	return (sv.x | (sv.y << 16u));
}

uint PackSnorm2x16(float2 v)
{
	uint2 sv = uint2(round(clamp(v, -1.0, 1.0) * 32767.0) + 32767.0);
	return (sv.x | (sv.y << 16u));
}

float2 UnpackUnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = (p & 0xffff) * rcp(65535.0f);
	Ret.y = (p >> 16u) * rcp(65535.0f);
	return Ret;
}

float2 UnpackSnorm2x16(uint p)
{
	float2 Ret;
	Ret.x = clamp((float(p & 0xffff) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	Ret.y = clamp((float(p >> 16u) - 32767.0f) * rcp(32767.0f), -1.0, 1.0);
	return Ret;
}

float Square( float x )
{
	return x*x;
}

float2 Square( float2 x )
{
	return x*x;
}

float3 Square( float3 x )
{
	return x*x;
}

float4 Square( float4 x )
{
	return x*x;
}

float Pow2( float x )
{
	return x*x;
}

float2 Pow2( float2 x )
{
	return x*x;
}

float3 Pow2( float3 x )
{
	return x*x;
}

float4 Pow2( float4 x )
{
	return x*x;
}

float Pow3( float x )
{
	return x*x*x;
}

float2 Pow3( float2 x )
{
	return x*x*x;
}

float3 Pow3( float3 x )
{
	return x*x*x;
}

float4 Pow3( float4 x )
{
	return x*x*x;
}

float Pow4( float x )
{
	float xx = x*x;
	return xx * xx;
}

float2 Pow4( float2 x )
{
	float2 xx = x*x;
	return xx * xx;
}

float3 Pow4( float3 x )
{
	float3 xx = x*x;
	return xx * xx;
}

float4 Pow4( float4 x )
{
	float4 xx = x*x;
	return xx * xx;
}

float Pow5( float x )
{
	float xx = x*x;
	return xx * xx * x;
}

float2 Pow5( float2 x )
{
	float2 xx = x*x;
	return xx * xx * x;
}

float3 Pow5( float3 x )
{
	float3 xx = x*x;
	return xx * xx * x;
}

float4 Pow5( float4 x )
{
	float4 xx = x*x;
	return xx * xx * x;
}

float Pow6( float x )
{
	float xx = x*x;
	return xx * xx * xx;
}

float2 Pow6( float2 x )
{
	float2 xx = x*x;
	return xx * xx * xx;
}

float3 Pow6( float3 x )
{
	float3 xx = x*x;
	return xx * xx * xx;
}

float4 Pow6( float4 x )
{
	float4 xx = x*x;
	return xx * xx * xx;
}


float  AtanFast(  float  x )
{

	float3  A = x < 1 ?  float3 ( x, 0, 1 ) :  float3 ( 1/x, 0.5 * PI, -1 );
	return A.y + A.z * ( ( ( -0.130234 * A.x - 0.0954105 ) * A.x + 1.00712 ) * A.x - 0.00001203333 );
}


float  EncodeLightAttenuation( float  InColor)
{


	return sqrt(InColor);
}


float4  EncodeLightAttenuation( float4  InColor)
{
	return sqrt(InColor);
}


float  DecodeLightAttenuation( float  InColor)
{
	return Square(InColor);
}


float4  DecodeLightAttenuation( float4  InColor)
{
	return Square(InColor);
}


float4  RGBTEncode( float3  Color)
{
	float4  RGBT;
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	RGBT.a = Max * rcp(1.0 + Max);
	return RGBT;
}

float3  RGBTDecode( float4  RGBT)
{
	RGBT.a = RGBT.a * rcp(1.0 - RGBT.a);
	return RGBT.rgb * RGBT.a;
}



float4  RGBMEncode(  float3  Color )
{
	Color *= 1.0 / 64.0;

	float4 rgbm;
	rgbm.a = saturate( max( max( Color.r, Color.g ), max( Color.b, 1e-6 ) ) );
	rgbm.a = ceil( rgbm.a * 255.0 ) / 255.0;
	rgbm.rgb = Color / rgbm.a;
	return rgbm;
}

float4  RGBMEncodeFast(  float3  Color )
{

	float4  rgbm;
	rgbm.a = dot( Color, 255.0 / 64.0 );
	rgbm.a = ceil( rgbm.a );
	rgbm.rgb = Color / rgbm.a;
	rgbm *=  float4 ( 255.0 / 64.0, 255.0 / 64.0, 255.0 / 64.0, 1.0 / 255.0 );
	return rgbm;
}

float3  RGBMDecode(  float4  rgbm,  float  MaxValue )
{
	return rgbm.rgb * (rgbm.a * MaxValue);
}

float3  RGBMDecode(  float4  rgbm )
{
	return rgbm.rgb * (rgbm.a * 64.0f);
}

float4  RGBTEncode8BPC( float3  Color,  float  Range)
{
	float  Max = max(max(Color.r, Color.g), max(Color.b, 1e-6));
	Max = min(Max, Range);

	float4  RGBT;
	RGBT.a = (Range + 1) / Range * Max / (1 + Max);


	RGBT.a = ceil(RGBT.a*255.0) / 255.0;
	Max = RGBT.a / (1 + 1 / Range - RGBT.a);

	float  RcpMax = rcp(Max);
	RGBT.rgb = Color.rgb * RcpMax;
	return RGBT;
}

float3  RGBTDecode8BPC( float4  RGBT,  float  Range)
{
	RGBT.a = RGBT.a / (1 + 1 / Range - RGBT.a);
	return RGBT.rgb * RGBT.a;
}
#line 1208 "/Engine/Private/Common.ush"
float2 CalcScreenUVFromOffsetFraction(float4 ScreenPosition, float2 OffsetFraction)
{
	float2 NDC = ScreenPosition.xy / ScreenPosition.w;



	float2 OffsetNDC = clamp(NDC + OffsetFraction * float2(2, -2), -.999f, .999f);
	return float2(OffsetNDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float4 GetPerPixelLightAttenuation(float2 UV)
{
	return DecodeLightAttenuation(Texture2DSampleLevel(LightAttenuationTexture, LightAttenuationTextureSampler, UV, 0));
}




float ConvertFromDeviceZ(float DeviceZ)
{

	return DeviceZ * View_InvDeviceZToWorldZTransform[0] + View_InvDeviceZToWorldZTransform[1] + 1.0f / (DeviceZ * View_InvDeviceZToWorldZTransform[2] - View_InvDeviceZToWorldZTransform[3]);
}




float ConvertToDeviceZ(float SceneDepth)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{

		return 1.0f / ((SceneDepth + View_InvDeviceZToWorldZTransform[3]) * View_InvDeviceZToWorldZTransform[2]);
	}
	else
	{

		return SceneDepth * View_ViewToClip[2][2] + View_ViewToClip[3][2];
	}
}

float2 ScreenPositionToBufferUV(float4 ScreenPosition)
{
	return float2(ScreenPosition.xy / ScreenPosition.w * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz);
}

float2 SvPositionToBufferUV(float4 SvPosition)
{
	return SvPosition.xy * View_BufferSizeAndInvSize.zw;
}


float3 SvPositionToTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), View_SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


float3 SvPositionToResolvedTranslatedWorld(float4 SvPosition)
{
	float4 HomWorldPos = mul(float4(SvPosition.xyz, 1), ResolvedView.SVPositionToTranslatedWorld);

	return HomWorldPos.xyz / HomWorldPos.w;
}


FLWCVector3 SvPositionToWorld(float4 SvPosition)
{
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);
	return LWCSubtract(TranslatedWorldPosition,  GetPrimaryView() .PreViewTranslation);
}


float4 SvPositionToScreenPosition(float4 SvPosition)
{



	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * View_ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}


float4 SvPositionToResolvedScreenPosition(float4 SvPosition)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float3 NDCPos = float3( (PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z);


	return float4(NDCPos.xyz, 1) * SvPosition.w;
}

void SvPositionToResolvedScreenPositionDeriv(float4 SvPosition, float2 PPZ_DDX_DDY, float2 W_DDX_DDY, inout float4 ScreenPosition, inout float4 ScreenPositionDDX, inout float4 ScreenPositionDDY)
{
	float2 PixelPos = SvPosition.xy - ResolvedView.ViewRectMin.xy;


	float4 NDCPos = float4((PixelPos * ResolvedView.ViewSizeAndInvSize.zw - 0.5f) * float2(2, -2), SvPosition.z, 1.0f);
	float4 NDCPosDDX = float4(ResolvedView.ViewSizeAndInvSize.z * 2.0f, 0.0f, PPZ_DDX_DDY.x, 0.0f);
	float4 NDCPosDDY = float4(ResolvedView.ViewSizeAndInvSize.w * 2.0f, 0.0f, PPZ_DDX_DDY.y, 0.0f);

	ScreenPosition = NDCPos * SvPosition.w;
	ScreenPositionDDX = NDCPos * W_DDX_DDY.x + NDCPosDDX * SvPosition.w;
	ScreenPositionDDY = NDCPos * W_DDX_DDY.y + NDCPosDDY * SvPosition.w;
}

float2 SvPositionToViewportUV(float4 SvPosition)
{

	float2 PixelPos = SvPosition.xy - View_ViewRectMin.xy;

	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 BufferUVToViewportUV(float2 BufferUV)
{
	float2 PixelPos = BufferUV.xy * View_BufferSizeAndInvSize.xy - View_ViewRectMin.xy;
	return PixelPos.xy * View_ViewSizeAndInvSize.zw;
}

float2 ViewportUVToBufferUV(float2 ViewportUV)
{
	float2 PixelPos = ViewportUV * View_ViewSizeAndInvSize.xy;
	return (PixelPos + View_ViewRectMin.xy) * View_BufferSizeAndInvSize.zw;
}


float2 ViewportUVToScreenPos(float2 ViewportUV)
{
	return float2(2 * ViewportUV.x - 1, 1 - 2 * ViewportUV.y);
}

float2 ScreenPosToViewportUV(float2 ScreenPos)
{
	return float2(0.5 + 0.5 * ScreenPos.x, 0.5 - 0.5 * ScreenPos.y);
}



float3 ScreenToViewPos(float2 ViewportUV, float SceneDepth)
{
	float2 ProjViewPos;

	ProjViewPos.x = ViewportUV.x * View_ScreenToViewSpace.x + View_ScreenToViewSpace.z;
	ProjViewPos.y = ViewportUV.y * View_ScreenToViewSpace.y + View_ScreenToViewSpace.w;
	return float3(ProjViewPos * SceneDepth, SceneDepth);
}
#line 1372 "/Engine/Private/Common.ush"
float2  ScreenAlignedPosition( float4 ScreenPosition )
{
	return  float2 (ScreenPositionToBufferUV(ScreenPosition));
}
#line 1380 "/Engine/Private/Common.ush"
float2  ScreenAlignedUV(  float2  UV )
{
	return (UV* float2 (2,-2) +  float2 (-1,1))*View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;
}
#line 1388 "/Engine/Private/Common.ush"
float2  GetViewportCoordinates( float2  InFragmentCoordinates)
{
	return InFragmentCoordinates;
}
#line 1396 "/Engine/Private/Common.ush"
float4  UnpackNormalMap(  float4  TextureSample )
{



		float2  NormalXY = TextureSample.rg;


	NormalXY = NormalXY *  float2 (2.0f,2.0f) -  float2 (1.0f,1.0f);
	float  NormalZ = sqrt( saturate( 1.0f - dot( NormalXY, NormalXY ) ) );
	return  float4 ( NormalXY.xy, NormalZ, 1.0f );
}


float AntialiasedTextureMask( Texture2D Tex, SamplerState Sampler, float2 UV, float ThresholdConst, int Channel )
{

	float4  MaskConst =  float4 (Channel == 0, Channel == 1, Channel == 2, Channel == 3);


	const float WidthConst = 1.0f;
	float InvWidthConst = 1 / WidthConst;
#line 1440 "/Engine/Private/Common.ush"
	float Result;
	{

		float Sample1 = dot(MaskConst, Texture2DSample(Tex, Sampler, UV));


		float2 TexDD = float2(DDX(Sample1), DDY(Sample1));

		float TexDDLength = max(abs(TexDD.x), abs(TexDD.y));
		float Top = InvWidthConst * (Sample1 - ThresholdConst);
		Result = Top / TexDDLength + ThresholdConst;
	}

	Result = saturate(Result);

	return Result;
}



float Noise3D_Multiplexer(int Function, float3 Position, int Quality, bool bTiling, float RepeatSize)
{

	switch(Function)
	{
		case 0:
			return SimplexNoise3D_TEX(Position);
		case 1:
			return GradientNoise3D_TEX(Position, bTiling, RepeatSize);
		case 2:
			return FastGradientPerlinNoise3D_TEX(Position);
		case 3:
			return GradientNoise3D_ALU(Position, bTiling, RepeatSize);
		case 4:
			return ValueNoise3D_ALU(Position, bTiling, RepeatSize);
		default:
			return VoronoiNoise3D_ALU(Position, Quality, bTiling, RepeatSize, true).w * 2. - 1.;
	}
	return 0;
}



float  MaterialExpressionNoise(float3 Position, float Scale, int Quality, int Function, bool bTurbulence, uint Levels, float OutputMin, float OutputMax, float LevelScale, float FilterWidth, bool bTiling, float RepeatSize)
{
	Position *= Scale;
	FilterWidth *= Scale;

	float Out = 0.0f;
	float OutScale = 1.0f;
	float InvLevelScale = 1.0f / LevelScale;

	[loop]  for(uint i = 0; i < Levels; ++i)
	{

		OutScale *= saturate(1.0 - FilterWidth);

		if(bTurbulence)
		{
			Out += abs(Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize)) * OutScale;
		}
		else
		{
			Out += Noise3D_Multiplexer(Function, Position, Quality, bTiling, RepeatSize) * OutScale;
		}

		Position *= LevelScale;
		RepeatSize *= LevelScale;
		OutScale *= InvLevelScale;
		FilterWidth *= LevelScale;
	}

	if(!bTurbulence)
	{

		Out = Out * 0.5f + 0.5f;
	}


	return lerp(OutputMin, OutputMax, Out);
}





float4  MaterialExpressionVectorNoise( float3  Position, int Quality, int Function, bool bTiling, float TileSize)
{
	float4 result = float4(0,0,0,1);
	float3x4 Jacobian = JacobianSimplex_ALU(Position, bTiling, TileSize);


	switch (Function)
	{
	case 0:
		result.xyz = float3(Rand3DPCG16(int3(floor(NoiseTileWrap(Position, bTiling, TileSize))))) / 0xffff;
		break;
	case 1:
		result.xyz = float3(Jacobian[0].w, Jacobian[1].w, Jacobian[2].w);
		break;
	case 2:
		result = Jacobian[0];
		break;
	case 3:
		result.xyz = float3(Jacobian[2][1] - Jacobian[1][2], Jacobian[0][2] - Jacobian[2][0], Jacobian[1][0] - Jacobian[0][1]);
		break;
	default:
		result = VoronoiNoise3D_ALU(Position, Quality, bTiling, TileSize, false);
		break;
	}
	return result;
}
#line 1567 "/Engine/Private/Common.ush"
float2 LineBoxIntersect(float3 RayOrigin, float3 RayEnd, float3 BoxMin, float3 BoxMax)
{
	float3 InvRayDir = 1.0f / (RayEnd - RayOrigin);


	float3 FirstPlaneIntersections = (BoxMin - RayOrigin) * InvRayDir;

	float3 SecondPlaneIntersections = (BoxMax - RayOrigin) * InvRayDir;

	float3 ClosestPlaneIntersections = min(FirstPlaneIntersections, SecondPlaneIntersections);

	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);

	float2 BoxIntersections;

	BoxIntersections.x = max(ClosestPlaneIntersections.x, max(ClosestPlaneIntersections.y, ClosestPlaneIntersections.z));

	BoxIntersections.y = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));

	return saturate(BoxIntersections);
}


float  ComputeDistanceFromBoxToPoint( float3  Mins,  float3  Maxs,  float3  InPoint)
{
	float3  DistancesToMin = InPoint < Mins ? abs(InPoint - Mins) : 0;
	float3  DistancesToMax = InPoint > Maxs ? abs(InPoint - Maxs) : 0;


	float  Distance = dot(DistancesToMin, 1);
	Distance += dot(DistancesToMax, 1);
	return Distance;
}


float  ComputeSquaredDistanceFromBoxToPoint( float3  BoxCenter,  float3  BoxExtent,  float3  InPoint)
{
	float3  AxisDistances = max(abs(InPoint - BoxCenter) - BoxExtent, 0);
	return dot(AxisDistances, AxisDistances);
}


float ComputeDistanceFromBoxToPointInside(float3 BoxCenter, float3 BoxExtent, float3 InPoint)
{
	float3 DistancesToMin = max(InPoint - BoxCenter + BoxExtent, 0);
	float3 DistancesToMax = max(BoxCenter + BoxExtent - InPoint, 0);
	float3 ClosestDistances = min(DistancesToMin, DistancesToMax);
	return min(ClosestDistances.x, min(ClosestDistances.y, ClosestDistances.z));
}

bool RayHitSphere(float3 RayOrigin, float3 UnitRayDirection, float3 SphereCenter, float SphereRadius)
{
	float3 ClosestPointOnRay = max(0, dot(SphereCenter - RayOrigin, UnitRayDirection)) * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius);
}

bool RaySegmentHitSphere(float3 RayOrigin, float3 UnitRayDirection, float RayLength, float3 SphereCenter, float SphereRadius)
{
	float DistanceAlongRay = dot(SphereCenter - RayOrigin, UnitRayDirection);
	float3 ClosestPointOnRay = DistanceAlongRay * UnitRayDirection;
	float3 CenterToRay = RayOrigin + ClosestPointOnRay - SphereCenter;
	return dot(CenterToRay, CenterToRay) <= Square(SphereRadius) && DistanceAlongRay > -SphereRadius && DistanceAlongRay - SphereRadius < RayLength;
}
#line 1636 "/Engine/Private/Common.ush"
float2 RayIntersectSphere(float3 RayOrigin, float3 RayDirection, float4 Sphere)
{
	float3 LocalPosition = RayOrigin - Sphere.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);

	float3 QuadraticCoef;
	QuadraticCoef.x = dot(RayDirection, RayDirection);
	QuadraticCoef.y = 2 * dot(RayDirection, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - Sphere.w * Sphere.w;

	float Discriminant = QuadraticCoef.y * QuadraticCoef.y - 4 * QuadraticCoef.x * QuadraticCoef.z;

	float2 Intersections = -1;


	[flatten]
	if (Discriminant >= 0)
	{
		float SqrtDiscriminant = sqrt(Discriminant);
		Intersections = (-QuadraticCoef.y + float2(-1, 1) * SqrtDiscriminant) / (2 * QuadraticCoef.x);
	}

	return Intersections;
}


float3  TransformTangentVectorToWorld( float3x3  TangentToWorld,  float3  InTangentVector)
{


	return mul(InTangentVector, TangentToWorld);
}


float3  TransformWorldVectorToTangent( float3x3  TangentToWorld,  float3  InWorldVector)
{


	return mul(TangentToWorld, InWorldVector);
}

float3 TransformWorldVectorToView(float3 InTangentVector)
{

	return mul(InTangentVector, (float3x3)ResolvedView.TranslatedWorldToView);
}


float  GetBoxPushout( float3  Normal, float3  Extent)
{
	return dot(abs(Normal * Extent),  float3 (1.0f, 1.0f, 1.0f));
}


void GenerateCoordinateSystem(float3 ZAxis, out float3 XAxis, out float3 YAxis)
{
	if (abs(ZAxis.x) > abs(ZAxis.y))
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.xz, ZAxis.xz));
		XAxis = float3(-ZAxis.z * InverseLength, 0.0f, ZAxis.x * InverseLength);
	}
	else
	{
		float InverseLength = 1.0f / sqrt(dot(ZAxis.yz, ZAxis.yz));
		XAxis = float3(0.0f, ZAxis.z * InverseLength, -ZAxis.y * InverseLength);
	}

	YAxis = cross(ZAxis, XAxis);
}
#line 1715 "/Engine/Private/Common.ush"
struct FScreenVertexOutput
{




	noperspective  float2  UV : TEXCOORD0;

	float4 Position : SV_POSITION;
};




float4 EncodeVelocityToTexture(float3 V)
{

		V.xy = sign(V.xy) * sqrt(abs(V.xy)) * (2.0 / sqrt(2.0));




	float4 EncodedV;
	EncodedV.xy = V.xy * (0.499f * 0.5f) + 32767.0f / 65535.0f;


		uint Vz = asuint(V.z);

		EncodedV.z = saturate(float((Vz >> 16) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
		EncodedV.w = saturate(float((Vz >> 0) & 0xFFFF) * rcp(65535.0f) + (0.1 / 65535.0f));
#line 1749 "/Engine/Private/Common.ush"
	return EncodedV;
}

float3 DecodeVelocityFromTexture(float4 EncodedV)
{
	const float InvDiv = 1.0f / (0.499f * 0.5f);

	float3 V;
	V.xy = EncodedV.xy * InvDiv - 32767.0f / 65535.0f * InvDiv;


		V.z = asfloat((uint(round(EncodedV.z * 65535.0f)) << 16) | uint(round(EncodedV.w * 65535.0f)));
#line 1766 "/Engine/Private/Common.ush"
		V.xy = (V.xy * abs(V.xy)) * 0.5;


	return V;
}


bool GetGIReplaceState()
{



	return false;

}

bool GetRayTracingQualitySwitch()
{



	return false;

}

bool GetPathTracingQualitySwitch()
{



	return false;

}



bool GetRuntimeVirtualTextureOutputSwitch()
{



	return false;

}


struct FWriteToSliceGeometryOutput
{
	FScreenVertexOutput Vertex;
	uint LayerIndex : SV_RenderTargetArrayIndex;
};







void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float2 OutTexCoord)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
	OutTexCoord.xy = (DrawRectangleParameters_UVScaleBias.zw + (InTexCoord.xy * DrawRectangleParameters_UVScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.zw;
}


void DrawRectangle(
	in float4 InPosition,
	in float2 InTexCoord,
	out float4 OutPosition,
	out float4 OutUVAndScreenPos)
{
	DrawRectangle(InPosition, InTexCoord, OutPosition, OutUVAndScreenPos.xy);
	OutUVAndScreenPos.zw = OutPosition.xy;
}


void DrawRectangle(in float4 InPosition, out float4 OutPosition)
{
	OutPosition = InPosition;
	OutPosition.xy = -1.0f + 2.0f * (DrawRectangleParameters_PosScaleBias.zw + (InPosition.xy * DrawRectangleParameters_PosScaleBias.xy)) * DrawRectangleParameters_InvTargetSizeAndTextureSize.xy;
	OutPosition.xy *= float2( 1, -1 );
}
#line 1866 "/Engine/Private/Common.ush"
float SafeSaturate(float In) { return saturate(In);}
float2 SafeSaturate(float2 In) { return saturate(In);}
float3 SafeSaturate(float3 In) { return saturate(In);}
float4 SafeSaturate(float4 In) { return saturate(In);}
#line 1895 "/Engine/Private/Common.ush"
bool IsFinite(float In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool IsPositiveFinite(float In) { return asuint(In) < 0x7F800000; }float MakeFinite(float In) { return !IsFinite(In)? 0 : In; }float MakePositiveFinite(float In) { return !IsPositiveFinite(In)? 0 : In; }
bool2 IsFinite(float2 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool2 IsPositiveFinite(float2 In) { return asuint(In) < 0x7F800000; }float2 MakeFinite(float2 In) { return !IsFinite(In)? 0 : In; }float2 MakePositiveFinite(float2 In) { return !IsPositiveFinite(In)? 0 : In; }
bool3 IsFinite(float3 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool3 IsPositiveFinite(float3 In) { return asuint(In) < 0x7F800000; }float3 MakeFinite(float3 In) { return !IsFinite(In)? 0 : In; }float3 MakePositiveFinite(float3 In) { return !IsPositiveFinite(In)? 0 : In; }
bool4 IsFinite(float4 In) { return (asuint(In) & 0x7F800000) != 0x7F800000; }bool4 IsPositiveFinite(float4 In) { return asuint(In) < 0x7F800000; }float4 MakeFinite(float4 In) { return !IsFinite(In)? 0 : In; }float4 MakePositiveFinite(float4 In) { return !IsPositiveFinite(In)? 0 : In; }





bool GetShadowReplaceState()
{



	return false;

}

bool GetReflectionCapturePassSwitchState()
{
	return View_RenderingReflectionCaptureMask > 0.0f;
}

float IsShadowDepthShader()
{
	return GetShadowReplaceState() ? 1.0f : 0.0f;
}




float DecodePackedTwoChannelValue(float2 PackedHeight)
{
	return PackedHeight.x * 255.0 * 256.0 + PackedHeight.y * 255.0;
}

float DecodeHeightValue(float InValue)
{
	return (InValue - 32768.0) *  (1.0f/128.0f) ;
}

float DecodePackedHeight(float2 PackedHeight)
{
	return DecodeHeightValue(DecodePackedTwoChannelValue(PackedHeight));
}


uint ReverseBitsN(uint Bitfield, const uint BitCount)
{
	return reversebits(Bitfield) >> (32 - BitCount);
}


uint2 ZOrder2D(uint Index, const uint SizeLog2)
{
	uint2 Coord = 0;

	[unroll]
	for (uint i = 0; i < SizeLog2; i++)
	{
		Coord.x |= ((Index >> (2 * i + 0)) & 0x1) << i;
		Coord.y |= ((Index >> (2 * i + 1)) & 0x1) << i;
	}

	return Coord;
}

uint3 ZOrder3D(uint Index, const uint SizeLog2)
{
    uint3 Coord = 0;

    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Coord.x |= ((Index >> (3 * i + 0)) & 0x1) << i;
        Coord.y |= ((Index >> (3 * i + 1)) & 0x1) << i;
        Coord.z |= ((Index >> (3 * i + 2)) & 0x1) << i;
    }

    return Coord;
}

uint ZOrder3DEncode(uint3 Coord, const uint SizeLog2)
{
    uint Index = 0;

    [unroll]
    for (uint i = 0; i < SizeLog2; i++)
    {
        Index |= ((Coord.x >> i) & 0x1) << (3 * i + 0);
        Index |= ((Coord.y >> i) & 0x1) << (3 * i + 1);
        Index |= ((Coord.z >> i) & 0x1) << (3 * i + 2);
    }

    return Index;
}



struct FPixelShaderIn
{

	float4 SvPosition;


	uint Coverage;


	bool bIsFrontFace;
};

struct FPixelShaderOut
{

	float4 MRT[8];


	uint StrataOutput[3];


	uint Coverage;


	float Depth;
};
#line 2049 "/Engine/Private/Common.ush"
float4 GatherDepth(Texture2D Texture, float2 UV)
{

	float4 DeviceZ = Texture.GatherRed( View_SharedBilinearClampedSampler , UV);

	return float4(
		ConvertFromDeviceZ(DeviceZ.x),
		ConvertFromDeviceZ(DeviceZ.y),
		ConvertFromDeviceZ(DeviceZ.z),
		ConvertFromDeviceZ(DeviceZ.w));
}
#line 8 "/Engine/Private/BasePassPixelShader.usf"
#line 41 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "SHCommon.ush"
#line 10 "/Engine/Private/SHCommon.ush"
struct FOneBandSHVector
{
	float  V;
};


struct FOneBandSHVectorRGB
{
	FOneBandSHVector R;
	FOneBandSHVector G;
	FOneBandSHVector B;
};


struct FTwoBandSHVector
{
	float4  V;
};


struct FTwoBandSHVectorRGB
{
	FTwoBandSHVector R;
	FTwoBandSHVector G;
	FTwoBandSHVector B;
};


struct FThreeBandSHVector
{
	float4  V0;
	float4  V1;
	float  V2;
};

struct FThreeBandSHVectorRGB
{
	FThreeBandSHVector R;
	FThreeBandSHVector G;
	FThreeBandSHVector B;
};

FTwoBandSHVectorRGB MulSH(FTwoBandSHVectorRGB A,  float  Scalar)
{
	FTwoBandSHVectorRGB Result;
	Result.R.V = A.R.V * Scalar;
	Result.G.V = A.G.V * Scalar;
	Result.B.V = A.B.V * Scalar;
	return Result;
}

FTwoBandSHVectorRGB MulSH(FTwoBandSHVector A,  float3  Color)
{
	FTwoBandSHVectorRGB Result;
	Result.R.V = A.V * Color.r;
	Result.G.V = A.V * Color.g;
	Result.B.V = A.V * Color.b;
	return Result;
}

FTwoBandSHVector MulSH(FTwoBandSHVector A,  float  Scalar)
{
	FTwoBandSHVector Result;
	Result.V = A.V * Scalar;
	return Result;
}

FThreeBandSHVectorRGB MulSH3(FThreeBandSHVector A,  float3  Color)
{
	FThreeBandSHVectorRGB Result;
	Result.R.V0 = A.V0 * Color.r;
	Result.R.V1 = A.V1 * Color.r;
	Result.R.V2 = A.V2 * Color.r;
	Result.G.V0 = A.V0 * Color.g;
	Result.G.V1 = A.V1 * Color.g;
	Result.G.V2 = A.V2 * Color.g;
	Result.B.V0 = A.V0 * Color.b;
	Result.B.V1 = A.V1 * Color.b;
	Result.B.V2 = A.V2 * Color.b;
	return Result;
}

FThreeBandSHVector MulSH3(FThreeBandSHVector A,  float  Scalar)
{
	FThreeBandSHVector Result;
	Result.V0 = A.V0 * Scalar;
	Result.V1 = A.V1 * Scalar;
	Result.V2 = A.V2 * Scalar;
	return Result;
}

FTwoBandSHVector AddSH(FTwoBandSHVector A, FTwoBandSHVector B)
{
	FTwoBandSHVector Result = A;
	Result.V += B.V;
	return Result;
}

FTwoBandSHVectorRGB AddSH(FTwoBandSHVectorRGB A, FTwoBandSHVectorRGB B)
{
	FTwoBandSHVectorRGB Result;
	Result.R = AddSH(A.R, B.R);
	Result.G = AddSH(A.G, B.G);
	Result.B = AddSH(A.B, B.B);
	return Result;
}

FThreeBandSHVector AddSH(FThreeBandSHVector A, FThreeBandSHVector B)
{
	FThreeBandSHVector Result = A;
	Result.V0 += B.V0;
	Result.V1 += B.V1;
	Result.V2 += B.V2;
	return Result;
}

FThreeBandSHVectorRGB AddSH(FThreeBandSHVectorRGB A, FThreeBandSHVectorRGB B)
{
	FThreeBandSHVectorRGB Result;
	Result.R = AddSH(A.R, B.R);
	Result.G = AddSH(A.G, B.G);
	Result.B = AddSH(A.B, B.B);
	return Result;
}
#line 139 "/Engine/Private/SHCommon.ush"
float  DotSH(FTwoBandSHVector A,FTwoBandSHVector B)
{
	float  Result = dot(A.V, B.V);
	return Result;
}
#line 149 "/Engine/Private/SHCommon.ush"
float3  DotSH(FTwoBandSHVectorRGB A,FTwoBandSHVector B)
{
	float3  Result = 0;
	Result.r = DotSH(A.R,B);
	Result.g = DotSH(A.G,B);
	Result.b = DotSH(A.B,B);
	return Result;
}

float  DotSH1(FOneBandSHVector A,FOneBandSHVector B)
{
	float  Result = A.V * B.V;
	return Result;
}

float3  DotSH1(FOneBandSHVectorRGB A,FOneBandSHVector B)
{
	float3  Result = 0;
	Result.r = DotSH1(A.R,B);
	Result.g = DotSH1(A.G,B);
	Result.b = DotSH1(A.B,B);
	return Result;
}

float  DotSH3(FThreeBandSHVector A,FThreeBandSHVector B)
{
	float  Result = dot(A.V0, B.V0);
	Result += dot(A.V1, B.V1);
	Result += A.V2 * B.V2;
	return Result;
}

float3  DotSH3(FThreeBandSHVectorRGB A,FThreeBandSHVector B)
{
	float3  Result = 0;
	Result.r = DotSH3(A.R,B);
	Result.g = DotSH3(A.G,B);
	Result.b = DotSH3(A.B,B);
	return Result;
}

FTwoBandSHVector GetLuminance(FTwoBandSHVectorRGB InRGBVector)
{
	FTwoBandSHVector Out;
	Out.V = InRGBVector.R.V * 0.3f + InRGBVector.G.V * 0.59f + InRGBVector.B.V * 0.11f;
	return Out;
}


float3 GetMaximumDirection(FTwoBandSHVector SHVector)
{

	float3 MaxDirection = float3(-SHVector.V.w, -SHVector.V.y, SHVector.V.z);
	float Length = length(MaxDirection);
	return MaxDirection / max(Length, .0001f);
}


FOneBandSHVector SHBasisFunction1()
{
	FOneBandSHVector Result;

	Result.V = 0.282095f;
	return Result;
}

FTwoBandSHVector SHBasisFunction( float3  InputVector)
{
	FTwoBandSHVector Result;

	Result.V.x = 0.282095f;
	Result.V.y = -0.488603f * InputVector.y;
	Result.V.z = 0.488603f * InputVector.z;
	Result.V.w = -0.488603f * InputVector.x;
	return Result;
}

FThreeBandSHVector SHBasisFunction3( float3  InputVector)
{
	FThreeBandSHVector Result;

	Result.V0.x = 0.282095f;
	Result.V0.y = -0.488603f * InputVector.y;
	Result.V0.z = 0.488603f * InputVector.z;
	Result.V0.w = -0.488603f * InputVector.x;

	float3  VectorSquared = InputVector * InputVector;
	Result.V1.x = 1.092548f * InputVector.x * InputVector.y;
	Result.V1.y = -1.092548f * InputVector.y * InputVector.z;
	Result.V1.z = 0.315392f * (3.0f * VectorSquared.z - 1.0f);
	Result.V1.w = -1.092548f * InputVector.x * InputVector.z;
	Result.V2 = 0.546274f * (VectorSquared.x - VectorSquared.y);

	return Result;
}


float  SHAmbientFunction()
{
	return 1 / (2 * sqrt(PI));
}
#line 255 "/Engine/Private/SHCommon.ush"
FOneBandSHVector CalcDiffuseTransferSH1( float  Exponent)
{
	FOneBandSHVector Result = SHBasisFunction1();



	float  L0 = 2 * PI / (1 + 1 * Exponent );


	Result.V *= L0;

	return Result;
}

FTwoBandSHVector CalcDiffuseTransferSH( float3  Normal, float  Exponent)
{
	FTwoBandSHVector Result = SHBasisFunction(Normal);



	float  L0 = 2 * PI / (1 + 1 * Exponent );
	float  L1 = 2 * PI / (2 + 1 * Exponent );


	Result.V.x *= L0;
	Result.V.yzw *= L1;

	return Result;
}

FThreeBandSHVector CalcDiffuseTransferSH3( float3  Normal, float  Exponent)
{
	FThreeBandSHVector Result = SHBasisFunction3(Normal);



	float  L0 = 2 * PI / (1 + 1 * Exponent );
	float  L1 = 2 * PI / (2 + 1 * Exponent );
	float  L2 = Exponent * 2 * PI / (3 + 4 * Exponent + Exponent * Exponent );
	float  L3 = (Exponent - 1) * 2 * PI / (8 + 6 * Exponent + Exponent * Exponent );


	Result.V0.x *= L0;
	Result.V0.yzw *= L1;
	Result.V1.xyzw *= L2;
	Result.V2 *= L2;

	return Result;
}




float3 EvaluateSHIrradiance(float3 Direction, float CosThetaAO, FThreeBandSHVectorRGB SH)
{
	float t2 = CosThetaAO * CosThetaAO;
	float t3 = t2 * CosThetaAO;
	float t4 = t2 * t2;

	float c0 = .5f * sqrt(PI) * (1 - t2);
	float c1 = sqrt(PI / 3.0f) * (1 - t3);
	float c2 = sqrt(5.0f * PI) / 16.0f * (3.0f * (1.0f - t4) - 2.0f * (1.0f - t2));

	return max(0.0f, c0 * float3(SH.R.V0.x, SH.G.V0.x, SH.B.V0.x)
		+ c1 * (-float3(SH.R.V0.y, SH.G.V0.y, SH.B.V0.y) * Direction.y + float3(SH.R.V0.z, SH.G.V0.z, SH.B.V0.z) * Direction.z - float3(SH.R.V0.w, SH.G.V0.w, SH.B.V0.w) * Direction.x)
		+ c2 * (float3(SH.R.V1.z, SH.G.V1.z, SH.B.V1.z) * (3.0f * Direction.z * Direction.z - 1.0f)
			+ sqrt(3.0f) * (float3(SH.R.V2, SH.G.V2, SH.B.V2) * (Direction.x * Direction.x - Direction.y * Direction.y)
				+ 2.0f * (float3(SH.R.V1.x, SH.G.V1.x, SH.B.V1.x) * Direction.x * Direction.y - float3(SH.R.V1.y, SH.G.V1.y, SH.B.V1.y) * Direction.y * Direction.z - float3(SH.R.V1.w, SH.G.V1.w, SH.B.V1.w) * Direction.z * Direction.x))));
}
#line 42 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "/Engine/Generated/Material.ush"
#line 7 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/SceneTexturesCommon.ush"
#line 41 "/Engine/Private/SceneTexturesCommon.ush"
float3 CalcSceneColor(float2 ScreenUV)
{



	return Texture2DSampleLevel(SceneTexturesStruct_SceneColorTexture,  SceneTexturesStruct_PointClampSampler , ScreenUV, 0).rgb;

}

float4 CalcFullSceneColor(float2 ScreenUV)
{



	return Texture2DSample(SceneTexturesStruct_SceneColorTexture,  SceneTexturesStruct_PointClampSampler ,ScreenUV);

}


float CalcSceneDepth(float2 ScreenUV)
{



	return ConvertFromDeviceZ(Texture2DSampleLevel(SceneTexturesStruct_SceneDepthTexture,  SceneTexturesStruct_PointClampSampler , ScreenUV, 0).r);

}


float4 CalcSceneColorAndDepth( float2 ScreenUV )
{
	return float4(CalcSceneColor(ScreenUV), CalcSceneDepth(ScreenUV));
}


float LookupDeviceZ( float2 ScreenUV )
{




	return Texture2DSampleLevel(SceneTexturesStruct_SceneDepthTexture,  SceneTexturesStruct_PointClampSampler , ScreenUV, 0).r;

}


float LookupDeviceZ(uint2 PixelPos)
{



	return SceneTexturesStruct_SceneDepthTexture.Load(int3(PixelPos, 0)).r;

}


float CalcSceneDepth(uint2 PixelPos)
{



	float DeviceZ = SceneTexturesStruct_SceneDepthTexture.Load(int3(PixelPos, 0)).r;


	return ConvertFromDeviceZ(DeviceZ);

}


float4 GatherSceneDepth(float2 UV, float2 InvBufferSize)
{



	return GatherDepth(SceneTexturesStruct_SceneDepthTexture, UV);

}
#line 8 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/EyeAdaptationCommon.ush"
#line 9 "/Engine/Private/EyeAdaptationCommon.ush"
Texture2D EyeAdaptationTexture;
Buffer<float4> EyeAdaptationBuffer;


float EyeAdaptationLookupTexture2D(Texture2D InEyeAdaptation)
{
	return InEyeAdaptation.Load(int3(0, 0, 0)).x;
}
#line 41 "/Engine/Private/EyeAdaptationCommon.ush"
float EyeAdaptationLookup()
{




		return EyeAdaptationLookupTexture2D( OpaqueBasePass_EyeAdaptationTexture );
#line 64 "/Engine/Private/EyeAdaptationCommon.ush"
}

float3 EyeAdaptationInverseLookup(float3 LightValue, float Alpha)
{
	float Adaptation = EyeAdaptationLookup();








	float LerpLogScale = -Alpha * log(Adaptation);
	float Scale = exp(LerpLogScale);
	return LightValue * Scale;
}
#line 9 "/Engine/Generated/Material.ush"
#line 10 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/SobolRandom.ush"
#line 24 "/Engine/Private/SobolRandom.ush"
uint2 SobolPixel(uint2 Pixel)
{

	int3 SobolLo = int3(Pixel & 0xfu, 0);
	int3 SobolHi = int3((Pixel >> 4u) & 0xfu, 0) + int3(16, 0, 0);
	uint Packed = View_SobolSamplingTexture.Load(SobolLo) ^ View_SobolSamplingTexture.Load(SobolHi);
	return uint2(Packed, Packed << 8u) & 0xff00u;
}






uint2 SobolIndex(uint2 Base, int Index, int Bits = 10)
{
	uint2 SobolNumbers[10] = {
		uint2(0x8680u, 0x4c80u), uint2(0xf240u, 0x9240u), uint2(0x8220u, 0x0e20u), uint2(0x4110u, 0x1610u), uint2(0xa608u, 0x7608u),
		uint2(0x8a02u, 0x280au), uint2(0xe204u, 0x9e04u), uint2(0xa400u, 0x4682u), uint2(0xe300u, 0xa74du), uint2(0xb700u, 0x9817u),
	};

	uint2 Result = Base;
	[unroll]  for (int b = 0; b < 10 && b < Bits; ++b)
	{
		Result ^= (Index & (1u << b)) ? SobolNumbers[b] : 0;
	}
	return Result;
}


uint2 ComputePixelUniqueSobolRandSample(uint2 PixelCoord)
{
	const uint TemporalBits = 10;
	uint FrameIndexMod1024 = ReverseBitsN(GetPowerOfTwoModulatedFrameIndex(1u << TemporalBits), TemporalBits);

	uint2 SobolBase = SobolPixel(PixelCoord);
	return SobolIndex(SobolBase, FrameIndexMod1024, TemporalBits);
}


float2 SobolIndexToUniformUnitSquare(uint2 SobolRand)
{
	return float2(SobolRand) * rcp(65536.0) + rcp(65536.0 * 2.0);
}
#line 11 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/MonteCarlo.ush"
#line 13 "/Engine/Private/MonteCarlo.ush"
float3x3 GetTangentBasis( float3 TangentZ )
{
	const float Sign = TangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp( Sign + TangentZ.z );
	const float b = TangentZ.x * TangentZ.y * a;

	float3 TangentX = { 1 + Sign * a * Pow2( TangentZ.x ), Sign * b, -Sign * TangentZ.x };
	float3 TangentY = { b, Sign + a * Pow2( TangentZ.y ), -TangentZ.y };

	return float3x3( TangentX, TangentY, TangentZ );
}



float3x3 GetTangentBasisFrisvad(float3 TangentZ)
{
	float3 TangentX;
	float3 TangentY;

	if (TangentZ.z < -0.9999999f)
	{
		TangentX = float3(0, -1, 0);
		TangentY = float3(-1, 0, 0);
	}
	else
	{
		float A = 1.0f / (1.0f + TangentZ.z);
		float B = -TangentZ.x * TangentZ.y * A;
		TangentX = float3(1.0f - TangentZ.x * TangentZ.x * A, B, -TangentZ.x);
		TangentY = float3(B, 1.0f - TangentZ.y * TangentZ.y * A, -TangentZ.y);
	}

	return float3x3( TangentX, TangentY, TangentZ );
}

float3 TangentToWorld( float3 Vec, float3 TangentZ )
{
	return mul( Vec, GetTangentBasis( TangentZ ) );
}

float3 WorldToTangent(float3 Vec, float3 TangentZ)
{
	return mul(GetTangentBasis(TangentZ), Vec);
}

float2 Hammersley( uint Index, uint NumSamples, uint2 Random )
{
	float E1 = frac( (float)Index / NumSamples + float( Random.x & 0xffff ) / (1<<16) );
	float E2 = float( reversebits(Index) ^ Random.y ) * 2.3283064365386963e-10;
	return float2( E1, E2 );
}

float2 Hammersley16( uint Index, uint NumSamples, uint2 Random )
{
	float E1 = frac( (float)Index / NumSamples + float( Random.x ) * (1.0 / 65536.0) );
	float E2 = float( ( reversebits(Index) >> 16 ) ^ Random.y ) * (1.0 / 65536.0);
	return float2( E1, E2 );
}


float2 R2Sequence( uint Index )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	return frac( a * Index );
}



float2 JitteredR2( uint Index, uint NumSamples, float2 Jitter, float JitterAmount = 0.5 )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	const float d0 = 0.76;
	const float i0 = 0.7;

	return frac( a * float(Index) + ( JitterAmount * 0.5 * d0 * sqrt(PI) * rsqrt( float(NumSamples) ) ) * Jitter );
}


float2 JitteredR2( uint Index, float2 Jitter, float JitterAmount = 0.5 )
{
	const float Phi = 1.324717957244746;
	const float2 a = float2( 1.0 / Phi, 1.0 / Pow2(Phi) );
	const float d0 = 0.76;
	const float i0 = 0.7;

	return frac( a * Index + ( JitterAmount * 0.25 * d0 * sqrt(PI) * rsqrt( Index - i0 ) ) * Jitter );
}




float2 UniformSampleDisk( float2 E )
{
	float Theta = 2 * PI * E.x;
	float Radius = sqrt( E.y );
	return Radius * float2( cos( Theta ), sin( Theta ) );
}


float3 ConcentricDiskSamplingHelper(float2 E)
{
	float2 p = 2 * E - 1;
	float2 a = abs(p);
	float Lo = min(a.x, a.y);
	float Hi = max(a.x, a.y);
	float Epsilon = 5.42101086243e-20;
	float Phi = (PI / 4) * (Lo / (Hi + Epsilon) + 2 * float(a.y >= a.x));
	float Radius = Hi;

	const uint SignMask = 0x80000000;
	float2 Disk = asfloat((asuint(float2(cos(Phi), sin(Phi))) & ~SignMask) | (asuint(p) & SignMask));

	return float3(Disk, Radius);
}

float2 UniformSampleDiskConcentric( float2 E )
{
	float3 Result = ConcentricDiskSamplingHelper(E);
	return Result.xy * Result.z;
}



float2 UniformSampleDiskConcentricApprox( float2 E )
{
	float2 sf = E * sqrt(2.0) - sqrt(0.5);
	float2 sq = sf*sf;
	float root = sqrt(2.0*max(sq.x, sq.y) - min(sq.x, sq.y));
	if (sq.x > sq.y)
	{
		sf.x = sf.x > 0 ? root : -root;
	}
	else
	{
		sf.y = sf.y > 0 ? root : -root;
	}
	return sf;
}





float3 EquiAreaSphericalMapping(float2 UV)
{
	UV = 2 * UV - 1;
	float D = 1 - (abs(UV.x) + abs(UV.y));
	float R = 1 - abs(D);
	float Epsilon = 5.42101086243e-20;
	float Phi = (PI / 4) * ((abs(UV.y) - abs(UV.x)) / (R + Epsilon) + 1);
	float F = R * sqrt(2 - R * R);
	return float3(
		F * sign(UV.x) * abs(cos(Phi)),
		F * sign(UV.y) * abs(sin(Phi)),
		sign(D) * (1 - R * R)
	);
}




float2 InverseEquiAreaSphericalMapping(float3 Direction)
{
	float3 AbsDir = abs(Direction);
	float R = sqrt(1 - AbsDir.z);
	float Epsilon = 5.42101086243e-20;
	float x = min(AbsDir.x, AbsDir.y) / (max(AbsDir.x, AbsDir.y) + Epsilon);


	const float t1 = 0.406758566246788489601959989e-5f;
	const float t2 = 0.636226545274016134946890922156f;
	const float t3 = 0.61572017898280213493197203466e-2f;
	const float t4 = -0.247333733281268944196501420480f;
	const float t5 = 0.881770664775316294736387951347e-1f;
	const float t6 = 0.419038818029165735901852432784e-1f;
	const float t7 = -0.251390972343483509333252996350e-1f;


	float Phi = t6 + t7 * x;
	Phi = t5 + Phi * x;
	Phi = t4 + Phi * x;
	Phi = t3 + Phi * x;
	Phi = t2 + Phi * x;
	Phi = t1 + Phi * x;

	Phi = (AbsDir.x < AbsDir.y) ? 1 - Phi : Phi;
	float2 UV = float2(R - Phi * R, Phi * R);
	UV = (Direction.z < 0) ? 1 - UV.yx : UV;
	UV = asfloat(asuint(UV) ^ (asuint(Direction.xy) & 0x80000000u));
	return UV * 0.5 + 0.5;
}



float4 UniformSampleSphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = 1 - 2 * E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (4 * PI);

	return float4( H, PDF );
}


float4 UniformSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = E.y;
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float PDF = 1.0 / (2 * PI);

	return float4( H, PDF );
}


float4 CosineSampleHemisphere( float2 E )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt(E.y);
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 H;
	H.x = SinTheta * cos(Phi);
	H.y = SinTheta * sin(Phi);
	H.z = CosTheta;

	float PDF = CosTheta * (1.0 / PI);

	return float4(H, PDF);
}


float4 CosineSampleHemisphereConcentric(float2 E)
{
	float3 Result = ConcentricDiskSamplingHelper(E);
	float SinTheta = Result.z;
	float CosTheta = sqrt(1 - SinTheta * SinTheta);
	return float4(Result.xy * SinTheta, CosTheta, CosTheta * (1.0 / PI));
}


float4 CosineSampleHemisphere( float2 E, float3 N )
{
	float3 H = UniformSampleSphere( E ).xyz;
	H = normalize( N + H );

	float PDF = dot(H, N) * (1.0 / PI);

	return float4( H, PDF );
}

float4 UniformSampleCone( float2 E, float CosThetaMax )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = lerp( CosThetaMax, 1, E.y );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 L;
	L.x = SinTheta * cos( Phi );
	L.y = SinTheta * sin( Phi );
	L.z = CosTheta;

	float PDF = 1.0 / ( 2 * PI * (1 - CosThetaMax) );

	return float4( L, PDF );
}




float4 UniformSampleConeRobust(float2 E, float SinThetaMax2)
{
	float Phi = 2 * PI * E.x;



	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);

	float CosTheta = 1 - OneMinusCosThetaMax * E.y;
	float SinTheta = sqrt(1 - CosTheta * CosTheta);

	float3 L;
	L.x = SinTheta * cos(Phi);
	L.y = SinTheta * sin(Phi);
	L.z = CosTheta;
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}

float UniformConeSolidAngle(float SinThetaMax2)
{
	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	return 2 * PI * OneMinusCosThetaMax;
}


float4 UniformSampleConeConcentricRobust(float2 E, float SinThetaMax2)
{



	float OneMinusCosThetaMax = SinThetaMax2 < 0.01 ? SinThetaMax2 * (0.5 + 0.125 * SinThetaMax2) : 1 - sqrt(1 - SinThetaMax2);
	float3 Result = ConcentricDiskSamplingHelper(E);
	float SinTheta = Result.z * sqrt(SinThetaMax2);
	float CosTheta = sqrt(1 - SinTheta * SinTheta);

	float3 L = float3(Result.xy * SinTheta, CosTheta);
	float PDF = 1.0 / (2 * PI * OneMinusCosThetaMax);

	return float4(L, PDF);
}


float4 ImportanceSampleGGX( float2 E, float a2 )
{
	float Phi = 2 * PI * E.x;
	float CosTheta = sqrt( (1 - E.y) / ( 1 + (a2 - 1) * E.y ) );
	float SinTheta = sqrt( 1 - CosTheta * CosTheta );

	float3 H;
	H.x = SinTheta * cos( Phi );
	H.y = SinTheta * sin( Phi );
	H.z = CosTheta;

	float d = ( CosTheta * a2 - CosTheta ) * CosTheta + 1;
	float D = a2 / ( PI*d*d );
	float PDF = D * CosTheta;

	return float4( H, PDF );
}

float VisibleGGXPDF(float3 V, float3 H, float a2)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);

	float d = (NoH * a2 - NoH) * NoH + 1;
	float D = a2 / (PI*d*d);

	float PDF = 2 * VoH * D / (NoV + sqrt(NoV * (NoV - NoV * a2) + a2));
	return PDF;
}

float VisibleGGXPDF_aniso(float3 V, float3 H, float2 Alpha)
{
	float NoV = V.z;
	float NoH = H.z;
	float VoH = dot(V, H);
	float a2 = Alpha.x * Alpha.y;
	float3 Hs = float3(Alpha.y * H.x, Alpha.x * H.y, a2 * NoH);
	float S = dot(Hs, Hs);
	float D = (1.0f / PI) * a2 * Square(a2 / S);
	float LenV = length(float3(V.x * Alpha.x, V.y * Alpha.y, NoV));
	float Pdf = (2 * D * VoH) / (NoV + LenV);
	return Pdf;
}





float4 ImportanceSampleVisibleGGX( float2 DiskE, float a2, float3 V )
{

	float a = sqrt(a2);


	float3 Vh = normalize( float3( a * V.xy, V.z ) );



	float LenSq = Vh.x * Vh.x + Vh.y * Vh.y;
	float3 Tangent0 = LenSq > 0 ? float3(-Vh.y, Vh.x, 0) * rsqrt(LenSq) : float3(1, 0, 0);
	float3 Tangent1 = cross(Vh, Tangent0);

	float2 p = DiskE;
	float s = 0.5 + 0.5 * Vh.z;
	p.y = (1 - s) * sqrt( 1 - p.x * p.x ) + s * p.y;

	float3 H;
	H = p.x * Tangent0;
	H += p.y * Tangent1;
	H += sqrt( saturate( 1 - dot( p, p ) ) ) * Vh;


	H = normalize( float3( a * H.xy, max(0.0, H.z) ) );

	return float4(H, VisibleGGXPDF(V, H, a2));
}





float4 ImportanceSampleVisibleGGX_aniso(float2 DiskE, float2 Alpha, float3 V)
{

	float3 Vh = normalize(float3(Alpha * V.xy, V.z));


	float LenSq = Vh.x * Vh.x + Vh.y * Vh.y;
	float3 Tx = LenSq > 0 ? float3(-Vh.y, Vh.x, 0) * rsqrt(LenSq) : float3(1, 0, 0);
	float3 Ty = cross(Vh, Tx);

	float2 p = DiskE;
	float s = 0.5 + 0.5 * Vh.z;
	p.y = lerp(sqrt(1 - p.x * p.x), p.y, s);

	float3 H = p.x * Tx + p.y * Ty + sqrt(saturate(1 - dot(p, p))) * Vh;


	H = normalize(float3(Alpha * H.xy, max(0.0, H.z)));

	return float4(H, VisibleGGXPDF_aniso(V, H, Alpha));
}



float MISWeight( uint Num, float PDF, uint OtherNum, float OtherPDF )
{
	float Weight = Num * PDF;
	float OtherWeight = OtherNum * OtherPDF;
	return Weight * Weight / (Weight * Weight + OtherWeight * OtherWeight);
}


float MISWeightRobust(float Pdf, float OtherPdf) {










	if (Pdf == OtherPdf)
	{

		return 0.5f;
	}






	if (OtherPdf < Pdf)
	{
		float x = OtherPdf / Pdf;
		return 1.0 / (1.0 + x * x);
	}
	else
	{

		float x = Pdf / OtherPdf;
		return 1.0 - 1.0 / (1.0 + x * x);
	}
}



float RayPDFToReflectionRayPDF(float VoH, float RayPDF)
{
	float ReflectPDF = RayPDF / (4.0 * saturate(VoH));

	return ReflectPDF;
}
#line 12 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Generated/UniformBuffers/Material.ush"
#line 13 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/DepthOfFieldCommon.ush"
#line 10 "/Engine/Private/DepthOfFieldCommon.ush"
float4 DepthOfFieldParams;






float ComputeCircleOfConfusion(float SceneDepth)
{

	[flatten]  if(SceneDepth > View_DepthOfFieldFocalDistance)
	{
		SceneDepth = View_DepthOfFieldFocalDistance + max(0, SceneDepth - View_DepthOfFieldFocalDistance - View_DepthOfFieldFocalRegion);
	}


	float D = SceneDepth;

	float F = View_DepthOfFieldFocalLength;

	float P = View_DepthOfFieldFocalDistance;

	float Aperture = View_DepthOfFieldScale;



	P *= 0.001f / 100.0f;
	D *= 0.001f / 100.0f;
#line 46 "/Engine/Private/DepthOfFieldCommon.ush"
	float CoCRadius = Aperture * F * (P - D) / (D * (P - F));

	return saturate(abs(CoCRadius));
}




float ComputeCircleOfConfusionNorm(float SceneDepth)
{

	[flatten]  if(SceneDepth > View_DepthOfFieldFocalDistance)
	{
		SceneDepth = View_DepthOfFieldFocalDistance + max(0, SceneDepth - View_DepthOfFieldFocalDistance - View_DepthOfFieldFocalRegion);
	}


	float  TransitionRegion = (SceneDepth < View_DepthOfFieldFocalDistance) ? View_DepthOfFieldNearTransitionRegion : View_DepthOfFieldFarTransitionRegion;

	return saturate(abs(SceneDepth - View_DepthOfFieldFocalDistance) / TransitionRegion);
}
#line 73 "/Engine/Private/DepthOfFieldCommon.ush"
float  CalcUnfocusedPercentCustomBound(float SceneDepth, float MaxBlurNear, float MaxBlurFar)
{
	float  MaxUnfocusedPercent = (SceneDepth < View_DepthOfFieldFocalDistance) ? MaxBlurNear : MaxBlurFar;

	float  Unbound = ComputeCircleOfConfusionNorm(SceneDepth);

	return min(MaxUnfocusedPercent, Unbound);
}
#line 14 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/CircleDOFCommon.ush"
#line 10 "/Engine/Private/CircleDOFCommon.ush"
float DepthToCoc(float SceneDepth)
{

	float4 CircleDofParams = View_CircleDOFParams;



	float Focus = View_DepthOfFieldFocalDistance;
	float Radius = CircleDofParams.x;
	float CocRadius = ((SceneDepth - Focus) / SceneDepth) * Radius;
	float DepthBlurRadius = (1.0 - exp2(-SceneDepth * CircleDofParams.y)) * CircleDofParams.z;
	float ReturnCoc = max(abs(CocRadius), DepthBlurRadius);
	if(CocRadius < 0.0)
	{

		ReturnCoc = -ReturnCoc;
	}
	return ReturnCoc;
}
#line 15 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/GlobalDistanceFieldShared.ush"
#line 84 "/Engine/Private/GlobalDistanceFieldShared.ush"
uint3 GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(uint PageLinearIndex)
{
	uint3 PageAtlasOffset;





	PageAtlasOffset.x = PageLinearIndex & 0x1F;
	PageAtlasOffset.y = (PageLinearIndex >> 5) & 0x1F;
	PageAtlasOffset.z = PageLinearIndex >> 10;

	return PageAtlasOffset;
}

uint GetGlobalDistanceFieldPage(float3 VolumeUV, uint ClipmapIndex)
{
	int4 PageTableCoord = int4(saturate(VolumeUV) *  View_GlobalDistanceFieldClipmapSizeInPages  + int3(0, 0, ClipmapIndex *  View_GlobalDistanceFieldClipmapSizeInPages ), 0);

	uint PageIndex =  View_GlobalDistanceFieldPageTableTexture .Load(PageTableCoord);
	return PageIndex;
}

void ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, uint PageIndex, out float3 OutPageUV, out float3 OutCoveragePageUV)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(PageIndex);
	float3 VolumePageUV = frac(VolumeUV *  View_GlobalDistanceFieldClipmapSizeInPages );

	float3 PageAtlasCoord = PageAtlasOffset *  16  + VolumePageUV *  ( 16 - 2)  + 1.0f;
	OutPageUV = PageAtlasCoord *  View_GlobalDistanceFieldInvPageAtlasSize ;

	float3 CoveragePageAtlasCoord = PageAtlasOffset *  8  + VolumePageUV *  ( 8 - 2)  + 1.0f;
	OutCoveragePageUV = CoveragePageAtlasCoord *  View_GlobalDistanceFieldInvCoverageAtlasSize ;
}

float3 ComputeGlobalDistanceFieldPageUV(float3 VolumeUV, uint PageIndex)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(PageIndex);
	float3 VolumePageUV = frac(VolumeUV *  View_GlobalDistanceFieldClipmapSizeInPages );
	float3 PageAtlasCoord = PageAtlasOffset *  16  + VolumePageUV *  ( 16 - 2)  + 1.0f;
	float3 PageUV = PageAtlasCoord *  View_GlobalDistanceFieldInvPageAtlasSize ;
	return PageUV;
}

float3 ComputeGlobalDistanceFieldCoveragePageUV(float3 VolumeUV, uint PageIndex)
{
	uint3 PageAtlasOffset = GlobalDistanceFieldPageLinearIndexToPageAtlasOffset(PageIndex);
	float3 VolumePageUV = frac(VolumeUV *  View_GlobalDistanceFieldClipmapSizeInPages );
	float3 CoveragePageAtlasCoord = PageAtlasOffset *  8  + VolumePageUV *  ( 8 - 2)  + 1.0f;
	float3 CoveragePageUV = CoveragePageAtlasCoord *  View_GlobalDistanceFieldInvCoverageAtlasSize ;
	return CoveragePageUV;
}

float EncodeGlobalDistanceFieldPageDistance(float Distance, float ClipmapInfluenceRange)
{
	return saturate(Distance / (2.0f * ClipmapInfluenceRange) + 0.5f);
}

float DecodeGlobalDistanceFieldPageDistance(float EncodedDistance, float ClipmapInfluenceRange)
{
	return (EncodedDistance * 2.0f - 1.0f) * ClipmapInfluenceRange;
}

float3 ComputeGlobalUV(float3 WorldPosition, uint ClipmapIndex)
{

	float4 WorldToUVAddAndMul =  View_GlobalVolumeWorldToUVAddAndMul [ClipmapIndex];
	float3 UV = frac(WorldPosition * WorldToUVAddAndMul.www + WorldToUVAddAndMul.xyz);
	UV = frac(UV);
	return UV;
}

float3 ComputeGlobalMipUV(float3 WorldPosition, uint ClipmapIndex)
{
	float3 MipUV = saturate(WorldPosition *  View_GlobalDistanceFieldMipWorldToUVScale [ClipmapIndex].xyz +  View_GlobalDistanceFieldMipWorldToUVBias [ClipmapIndex].xyz);


	float MipUVMinZ =  View_GlobalDistanceFieldMipWorldToUVScale [ClipmapIndex].w;
	float MipUVMaxZ =  View_GlobalDistanceFieldMipWorldToUVBias [ClipmapIndex].w;
	MipUV.z = clamp(MipUV.z, MipUVMinZ, MipUVMaxZ);

	return MipUV;
}

float GetDistanceToNearestSurfaceGlobal(float3 WorldPosition)
{
	float Distance = 0.0f;

	for (uint ClipmapIndex = 0; ClipmapIndex <  View_NumGlobalSDFClipmaps ; ClipmapIndex++)
	{
		float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside( View_GlobalVolumeCenterAndExtent [ClipmapIndex].xyz,  View_GlobalVolumeCenterAndExtent [ClipmapIndex].www, WorldPosition);
		const float ClipmapVoxelExtent =  View_GlobalVolumeCenterAndExtent [ClipmapIndex].w *  View_GlobalVolumeTexelSize ;
		const float ClipmapInfluenceRange = 2.0f *  4  * ClipmapVoxelExtent;

		Distance = ClipmapInfluenceRange;

		if (DistanceFromClipmap > ClipmapVoxelExtent)
		{
			float3 ClipmapVolumeUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);

			uint PageIndex = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (PageIndex <  0xFFFF )
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, PageIndex);

				float DistanceFieldValue = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , PageUV, 0).x;

				if (DistanceFieldValue < 1.0f)
				{
					Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
					break;
				}
			}
		}
	}

	return Distance;
}

float SampleGlobalDistanceField(float3 WorldPosition, float MaxDistance, int MinClipmapIndex)
{
	float Distance = MaxDistance;

	for (uint ClipmapIndex = MinClipmapIndex; Distance <= MaxDistance && ClipmapIndex <  View_NumGlobalSDFClipmaps ; ++ClipmapIndex)
	{
		const float ClipmapInfluenceRange =  4  * 2.0f *  View_GlobalVolumeCenterAndExtent [ClipmapIndex].w *  View_GlobalVolumeTexelSize ;

		float3 ClipmapVolumeUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);
		uint PageIndex = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

		if (PageIndex <  0xFFFF )
		{
			float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, PageIndex);

			float DistanceFieldValue = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , PageUV, 0).x;

			if (DistanceFieldValue < 1.0f)
			{
				Distance = DecodeGlobalDistanceFieldPageDistance(DistanceFieldValue, ClipmapInfluenceRange);
				break;
			}
		}
	}

	return Distance;
}

float3 GlobalDistanceFieldPageCentralDiff(float3 PageUV)
{

	float3 TexelOffset = 0.5f *  View_GlobalDistanceFieldInvPageAtlasSize ;

	float R = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , float3(PageUV.x + TexelOffset.x, PageUV.y, PageUV.z), 0).x;
	float L = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , float3(PageUV.x - TexelOffset.x, PageUV.y, PageUV.z), 0).x;
	float F = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , float3(PageUV.x, PageUV.y + TexelOffset.y, PageUV.z), 0).x;
	float B = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , float3(PageUV.x, PageUV.y - TexelOffset.y, PageUV.z), 0).x;
	float U = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , float3(PageUV.x, PageUV.y, PageUV.z + TexelOffset.z), 0).x;
	float D = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , float3(PageUV.x, PageUV.y, PageUV.z - TexelOffset.z), 0).x;

	return float3(R - L, F - B, U - D);
}



float3 GetDistanceFieldGradientGlobal(float3 WorldPosition)
{
	float3 Gradient = float3(0, 0, 0.001f);

	for (uint ClipmapIndex = 0; ClipmapIndex <  View_NumGlobalSDFClipmaps ; ClipmapIndex++)
	{
		const float ClipmapVoxelExtent =  View_GlobalVolumeCenterAndExtent [ClipmapIndex].w *  View_GlobalVolumeTexelSize ;
		const float DistanceFromClipmap = ComputeDistanceFromBoxToPointInside( View_GlobalVolumeCenterAndExtent [ClipmapIndex].xyz,  View_GlobalVolumeCenterAndExtent [ClipmapIndex].www, WorldPosition);

		if (DistanceFromClipmap >= ClipmapVoxelExtent)
		{
			const float3 ClipmapVolumeUV = ComputeGlobalUV(WorldPosition, ClipmapIndex);

			uint PageIndex = GetGlobalDistanceFieldPage(ClipmapVolumeUV, ClipmapIndex);

			if (PageIndex <  0xFFFF )
			{
				float3 PageUV = ComputeGlobalDistanceFieldPageUV(ClipmapVolumeUV, PageIndex);

				float DistanceFieldValue = Texture3DSampleLevel( View_GlobalDistanceFieldPageAtlasTexture ,  View_SharedTrilinearWrappedSampler , PageUV, 0).x;


				if (DistanceFieldValue < 0.9f)
				{
					float3 PageCentralDiff = GlobalDistanceFieldPageCentralDiff(PageUV);

					const float ClipmapInfluenceRange =  4  * 2.0f * ClipmapVoxelExtent;
					const float PageDistanceDecodeFactor = 2.0f * ClipmapInfluenceRange;
					float ClipmapExtent =  View_GlobalVolumeCenterAndExtent [ClipmapIndex].w;


					const float BackwardsCompatibilityFactor = 128.0f *  View_GlobalVolumeTexelSize ;
					Gradient = PageDistanceDecodeFactor * PageCentralDiff / (ClipmapExtent * BackwardsCompatibilityFactor);

					break;
				}
			}
		}
	}

	return Gradient;
}
#line 16 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/PhysicsFieldSampler.ush"
#line 9 "/Engine/Private/PhysicsFieldSampler.ush"
#line 1 "PhysicsFieldShared.ush"
#line 13 "/Engine/Private/PhysicsFieldShared.ush"
float3 PhysicsField_ComputeSampleUV(in float3 LocalPosition, in int ClipmapIndex, in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount)
{
	const float ClipmapExtent = 2.0 * ClipmapDistance * pow((float) ClipmapExponent, (float) (ClipmapIndex + 1 - ClipmapCount));
	return LocalPosition / ClipmapExtent + 0.5;
}

int PhysicsField_GetClipmapIndex(in float3 LocalPosition, in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount)
{
	const int3 ClipmapIndices = floor(log(abs(LocalPosition) / ClipmapDistance) / log((float) (ClipmapExponent)) + int3(ClipmapCount, ClipmapCount, ClipmapCount));
	const int ClipmapIndex = max(max(ClipmapIndices[0], ClipmapIndices[1]), ClipmapIndices[2]);

	return clamp(ClipmapIndex, 0, ClipmapCount - 1);
}

void PhysicsField_ComputeVoxelIndices(in int3 PrevCell, in int ClipmapResolution,
				out int I000, out int I100, out int I010, out int I110,
				out int I001, out int I101, out int I011, out int I111)
{
	const int3 NextCell = PrevCell + int3(1, 1, 1);
	const int ResolutionSquare = ClipmapResolution * ClipmapResolution;

	const int PrevOffsetX = PrevCell.x;
	const int NextOffsetX = NextCell.x;

	const int PrevOffsetY = ClipmapResolution * PrevCell.y;
	const int NextOffsetY = ClipmapResolution * NextCell.y;

	const int PrevOffsetZ = ResolutionSquare * PrevCell.z;
	const int NextOffsetZ = ResolutionSquare * NextCell.z;

	I000 = (PrevOffsetX + PrevOffsetY + PrevOffsetZ);
	I100 = (NextOffsetX + PrevOffsetY + PrevOffsetZ);
	I010 = (PrevOffsetX + NextOffsetY + PrevOffsetZ);
	I110 = (NextOffsetX + NextOffsetY + PrevOffsetZ);
	I001 = (PrevOffsetX + PrevOffsetY + NextOffsetZ);
	I101 = (NextOffsetX + PrevOffsetY + NextOffsetZ);
	I011 = (PrevOffsetX + NextOffsetY + NextOffsetZ);
	I111 = (NextOffsetX + NextOffsetY + NextOffsetZ);
}

float3 PhysicsField_InterpolateVector(in int3 SampleIndex, in float3 SampleFraction, in int ClipmapResolution, in Buffer<float> ClipmapBuffer, in int ClipmapCount)
{
	int I000 = 0, I100 = 0, I010 = 0, I110 = 0, I001 = 0, I101 = 0, I011 = 0, I111 = 0;
	PhysicsField_ComputeVoxelIndices(SampleIndex, ClipmapResolution, I000, I100, I010, I110, I001, I101, I011, I111);

	const int AttributeOffsetY = ClipmapResolution * ClipmapResolution * ClipmapResolution * ClipmapCount;
	const int AttributeOffsetZ = 2 * AttributeOffsetY;


	const float3 V000 = float3(ClipmapBuffer[I000], ClipmapBuffer[I000 + AttributeOffsetY], ClipmapBuffer[I000 + AttributeOffsetZ]);
	const float3 V100 = float3(ClipmapBuffer[I100], ClipmapBuffer[I100 + AttributeOffsetY], ClipmapBuffer[I100 + AttributeOffsetZ]);
	const float3 V010 = float3(ClipmapBuffer[I010], ClipmapBuffer[I010 + AttributeOffsetY], ClipmapBuffer[I010 + AttributeOffsetZ]);
	const float3 V110 = float3(ClipmapBuffer[I110], ClipmapBuffer[I110 + AttributeOffsetY], ClipmapBuffer[I110 + AttributeOffsetZ]);
	const float3 V001 = float3(ClipmapBuffer[I001], ClipmapBuffer[I001 + AttributeOffsetY], ClipmapBuffer[I001 + AttributeOffsetZ]);
	const float3 V101 = float3(ClipmapBuffer[I101], ClipmapBuffer[I101 + AttributeOffsetY], ClipmapBuffer[I101 + AttributeOffsetZ]);
	const float3 V011 = float3(ClipmapBuffer[I011], ClipmapBuffer[I011 + AttributeOffsetY], ClipmapBuffer[I011 + AttributeOffsetZ]);
	const float3 V111 = float3(ClipmapBuffer[I111], ClipmapBuffer[I111 + AttributeOffsetY], ClipmapBuffer[I111 + AttributeOffsetZ]);


	const float3 V00 = lerp(V000, V100, SampleFraction.x);
	const float3 V01 = lerp(V001, V101, SampleFraction.x);
	const float3 V10 = lerp(V010, V110, SampleFraction.x);
	const float3 V11 = lerp(V011, V111, SampleFraction.x);


	const float3 V0 = lerp(V00, V10, SampleFraction.y);
	const float3 V1 = lerp(V01, V11, SampleFraction.y);


	return lerp(V0, V1, SampleFraction.z);
}

float PhysicsField_InterpolateScalar(in int3 SampleIndex, in float3 SampleFraction, in int ClipmapResolution, in Buffer<float> ClipmapBuffer)
{
	int I000 = 0, I100 = 0, I010 = 0, I110 = 0, I001 = 0, I101 = 0, I011 = 0, I111 = 0;
	PhysicsField_ComputeVoxelIndices(SampleIndex, ClipmapResolution, I000, I100, I010, I110, I001, I101, I011, I111);


	const float V000 = ClipmapBuffer[I000];
	const float V100 = ClipmapBuffer[I100];
	const float V010 = ClipmapBuffer[I010];
	const float V110 = ClipmapBuffer[I110];
	const float V001 = ClipmapBuffer[I001];
	const float V101 = ClipmapBuffer[I101];
	const float V011 = ClipmapBuffer[I011];
	const float V111 = ClipmapBuffer[I111];


	const float V00 = lerp(V000, V100, SampleFraction.x);
	const float V01 = lerp(V001, V101, SampleFraction.x);
	const float V10 = lerp(V010, V110, SampleFraction.x);
	const float V11 = lerp(V011, V111, SampleFraction.x);


	const float V0 = lerp(V00, V10, SampleFraction.y);
	const float V1 = lerp(V01, V11, SampleFraction.y);


	return lerp(V0, V1, SampleFraction.z);
}

void PhysicsField_GetSamplingInfos(in float3 LocalPosition, in int TargetIndex,
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, out int3 SampleIndex, out float3 SampleFraction)
{
	const int ClipmapIndex = PhysicsField_GetClipmapIndex(LocalPosition, ClipmapDistance, ClipmapExponent, ClipmapCount);
	const float3 SampleUV = PhysicsField_ComputeSampleUV(LocalPosition, ClipmapIndex, ClipmapDistance, ClipmapExponent, ClipmapCount);

	float3 SampleVoxel = SampleUV * float3(ClipmapResolution - 1, ClipmapResolution - 1, ClipmapResolution - 1);
	SampleVoxel.z += (ClipmapCount * TargetIndex + ClipmapIndex) * ClipmapResolution;

	SampleIndex = floor(SampleVoxel);
	SampleFraction = SampleVoxel - SampleIndex;
}

float3 PhysicsField_SamplePhysicsVectorField(in float3 WorldPosition, in int VectorTarget, in int4 VectorTargets[ 32 ], in int TargetCount, in float3 ClipmapCenter,
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, in Buffer<float> ClipmapBuffer)
{
	const float3 LocalPosition = WorldPosition - ClipmapCenter;

	float3 FieldValue = float3(0, 0, 0);
	if (VectorTarget != -1 && VectorTarget <  32  && all(abs(LocalPosition) < float3(ClipmapDistance, ClipmapDistance, ClipmapDistance)))
	{
		const int TargetIndex = VectorTargets[VectorTarget].x;
		if (TargetIndex != -1)
		{
			int3 SampleIndex = int3(0, 0, 0);
			float3 SampleFraction = float3(0, 0, 0);
			PhysicsField_GetSamplingInfos(LocalPosition, TargetIndex, ClipmapDistance, ClipmapExponent, ClipmapCount, ClipmapResolution, SampleIndex, SampleFraction);

			FieldValue = PhysicsField_InterpolateVector(SampleIndex, SampleFraction, ClipmapResolution, ClipmapBuffer, ClipmapCount);
		}
	}
	return FieldValue;
}

float PhysicsField_SamplePhysicsScalarField(in float3 WorldPosition, in int ScalarTarget, in int4 ScalarTargets[ 32 ], in int TargetCount, in float3 ClipmapCenter,
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, in Buffer<float> ClipmapBuffer)
{
	const float3 LocalPosition = WorldPosition - ClipmapCenter;

	float FieldValue = 0.0;
	if (ScalarTarget != -1 && ScalarTarget <  32  && all(abs(LocalPosition) < float3(ClipmapDistance, ClipmapDistance, ClipmapDistance)))
	{
		const int TargetIndex = ScalarTargets[ScalarTarget].y;
		if (TargetIndex != -1)
		{
			int3 SampleIndex = int3(0, 0, 0);
			float3 SampleFraction = float3(0, 0, 0);
			PhysicsField_GetSamplingInfos(LocalPosition, TargetIndex, ClipmapDistance, ClipmapExponent, ClipmapCount, ClipmapResolution, SampleIndex, SampleFraction);

			FieldValue = PhysicsField_InterpolateScalar(SampleIndex, SampleFraction, ClipmapResolution, ClipmapBuffer);
		}
	}
	return FieldValue;
}

int PhysicsField_SamplePhysicsIntegerField(in float3 WorldPosition, in int IntegerTarget, in int4 IntegerTargets[ 32 ], in int TargetCount, in float3 ClipmapCenter,
			in float ClipmapDistance, in int ClipmapExponent, in int ClipmapCount, in int ClipmapResolution, in Buffer<float> ClipmapBuffer)
{
	const float3 LocalPosition = WorldPosition - ClipmapCenter;

	int FieldValue = 0.0;
	if (IntegerTarget != -1 && IntegerTarget <  32  && all(abs(LocalPosition) < float3(ClipmapDistance, ClipmapDistance, ClipmapDistance)))
	{
		const int TargetIndex = IntegerTargets[IntegerTarget].z;
		if (TargetIndex != -1)
		{
			int3 SampleIndex = int3(0, 0, 0);
			float3 SampleFraction = float3(0, 0, 0);
			PhysicsField_GetSamplingInfos(LocalPosition, TargetIndex, ClipmapDistance, ClipmapExponent, ClipmapCount, ClipmapResolution, SampleIndex, SampleFraction);

			FieldValue = PhysicsField_InterpolateScalar(SampleIndex, SampleFraction, ClipmapResolution, ClipmapBuffer);
		}
	}
	return FieldValue;
}
#line 10 "/Engine/Private/PhysicsFieldSampler.ush"
#line 34 "/Engine/Private/PhysicsFieldSampler.ush"
float3 MatPhysicsField_SamplePhysicsVectorField(float3 WorldPosition, int VectorTarget)
{
	return PhysicsField_SamplePhysicsVectorField(WorldPosition, VectorTarget,  View_PhysicsFieldTargets ,  View_PhysicsFieldTargetCount ,  View_PhysicsFieldClipmapCenter ,  View_PhysicsFieldClipmapDistance ,
				View_PhysicsFieldClipmapExponent ,  View_PhysicsFieldClipmapCount ,  View_PhysicsFieldClipmapResolution ,  View_PhysicsFieldClipmapBuffer );
}

float MatPhysicsField_SamplePhysicsScalarField(float3 WorldPosition, int ScalarTarget)
{
	return PhysicsField_SamplePhysicsScalarField(WorldPosition, ScalarTarget,  View_PhysicsFieldTargets ,  View_PhysicsFieldTargetCount ,  View_PhysicsFieldClipmapCenter ,  View_PhysicsFieldClipmapDistance ,
				View_PhysicsFieldClipmapExponent ,  View_PhysicsFieldClipmapCount ,  View_PhysicsFieldClipmapResolution ,  View_PhysicsFieldClipmapBuffer );
}

int MatPhysicsField_SamplePhysicsIntegerField(float3 WorldPosition, int IntegerTarget)
{
	return PhysicsField_SamplePhysicsIntegerField(WorldPosition, IntegerTarget,  View_PhysicsFieldTargets ,  View_PhysicsFieldTargetCount ,  View_PhysicsFieldClipmapCenter ,  View_PhysicsFieldClipmapDistance ,
				View_PhysicsFieldClipmapExponent ,  View_PhysicsFieldClipmapCount ,  View_PhysicsFieldClipmapResolution ,  View_PhysicsFieldClipmapBuffer );

}
#line 17 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/SceneData.ush"
#line 6 "/Engine/Private/SceneData.ush"
#line 1 "OctahedralCommon.ush"
#line 18 "/Engine/Private/OctahedralCommon.ush"
float2 UnitVectorToOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctahedronToUnitVector( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	float t = max( -N.z, 0 );
	N.xy += N.xy >= 0 ? float2(-t, -t) : float2(t, t);
	return normalize(N);
}

float2 UnitVectorToHemiOctahedron( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	return float2( N.x + N.y, N.x - N.y );
}

float3 HemiOctahedronToUnitVector( float2 Oct )
{
	Oct = float2( Oct.x + Oct.y, Oct.x - Oct.y );
	float3 N = float3( Oct, 2.0 - dot( 1, abs(Oct) ) );
	return normalize(N);
}


uint2 OctahedralMapWrapBorder(uint2 TexelCoord, uint Resolution, uint BorderSize)
{
	if (TexelCoord.x < BorderSize)
	{
		TexelCoord.x = BorderSize - 1 + BorderSize - TexelCoord.x;
		TexelCoord.y = Resolution - 1 - TexelCoord.y;
	}
	if (TexelCoord.x >= Resolution - BorderSize)
	{
		TexelCoord.x = (Resolution - BorderSize) - (TexelCoord.x - (Resolution - BorderSize - 1));
		TexelCoord.y = Resolution - 1 - TexelCoord.y;
	}
	if (TexelCoord.y < BorderSize)
	{
		TexelCoord.y = BorderSize - 1 + BorderSize - TexelCoord.y;
		TexelCoord.x = Resolution - 1 - TexelCoord.x;
	}
	if (TexelCoord.y >= Resolution - BorderSize)
	{
		TexelCoord.y = (Resolution - BorderSize) - (TexelCoord.y - (Resolution - BorderSize - 1));
		TexelCoord.x = Resolution - 1 - TexelCoord.x;
	}

	return TexelCoord - BorderSize;
}



float ComputeSphericalExcess(float3 A, float3 B, float3 C) {
    float CosAB = dot(A, B);
    float SinAB = 1.0f - CosAB * CosAB;
    float CosBC = dot(B, C);
    float SinBC = 1.0f - CosBC * CosBC;
    float CosCA = dot(C, A);
    float CosC = CosCA - CosAB * CosBC;
    float SinC = sqrt(SinAB * SinBC - CosC * CosC);
    float Inv = (1.0f - CosAB) * (1.0f - CosBC);
	return 2.0f * atan2(SinC, sqrt((SinAB * SinBC * (1.0f + CosBC) * (1.0f + CosAB)) / Inv) + CosC);
}


float OctahedralSolidAngle(float2 TexelCoord, float InvResolution)
{
	float3 Direction10 = OctahedronToUnitVector(TexelCoord + float2(.5f, -.5f) * InvResolution);
	float3 Direction01 = OctahedronToUnitVector(TexelCoord + float2(-.5f, .5f) * InvResolution);

	float SolidAngle0 = ComputeSphericalExcess(
		OctahedronToUnitVector(TexelCoord + float2(-.5f, -.5f) * InvResolution),
		Direction10,
		Direction01);

	float SolidAngle1 = ComputeSphericalExcess(
		OctahedronToUnitVector(TexelCoord + float2(.5f, .5f) * InvResolution),
		Direction01,
		Direction10);

	return SolidAngle0 + SolidAngle1;
}
#line 7 "/Engine/Private/SceneData.ush"
#line 101 "/Engine/Private/SceneData.ush"
	static const uint InstanceTransformSizeFloat4Count = 2u;
#line 109 "/Engine/Private/SceneData.ush"
struct FPrimitiveSceneData
{
	uint Flags;
	int InstanceSceneDataOffset;
	int NumInstanceSceneDataEntries;
	int PersistentPrimitiveIndex;
	uint SingleCaptureIndex;
	float3 TilePosition;
	uint PrimitiveComponentId;
	FLWCMatrix LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix PreviousLocalToWorld;
	FLWCInverseMatrix PreviousWorldToLocal;
	float3 InvNonUniformScale;
	float ObjectBoundsX;
	FLWCVector3 ObjectWorldPosition;
	FLWCVector3 ActorWorldPosition;
	float ObjectRadius;
	uint LightmapUVIndex;
	float3 ObjectOrientation;
	uint LightmapDataIndex;
	float4 NonUniformScale;
	float3 PreSkinnedLocalBoundsMin;
	uint NaniteResourceID;
	float3 PreSkinnedLocalBoundsMax;
	uint NaniteHierarchyOffset;
	float3 LocalObjectBoundsMin;
	float ObjectBoundsY;
	float3 LocalObjectBoundsMax;
	float ObjectBoundsZ;
	uint InstancePayloadDataOffset;
	uint InstancePayloadDataStride;
	float3 InstanceLocalBoundsCenter;
	float3 InstanceLocalBoundsExtent;
	float3 WireframeColor;
	float3 LevelColor;
	uint NaniteImposterIndex;
	float4 CustomPrimitiveData[ 9 ];
};


FPrimitiveSceneData GetPrimitiveDataFromUniformBuffer()
{
	FPrimitiveSceneData PrimitiveData;

	PrimitiveData.Flags = Primitive_Flags;
	PrimitiveData.InstanceSceneDataOffset = Primitive_InstanceSceneDataOffset;
	PrimitiveData.NumInstanceSceneDataEntries = Primitive_NumInstanceSceneDataEntries;
	PrimitiveData.SingleCaptureIndex = Primitive_SingleCaptureIndex;
	PrimitiveData.TilePosition = Primitive_TilePosition;
	PrimitiveData.PrimitiveComponentId = Primitive_PrimitiveComponentId;
	PrimitiveData.LocalToWorld = MakeLWCMatrix4x3(Primitive_TilePosition, Primitive_LocalToRelativeWorld);
	PrimitiveData.WorldToLocal = MakeLWCInverseMatrix4x3(Primitive_TilePosition, Primitive_RelativeWorldToLocal);
	PrimitiveData.PreviousLocalToWorld = MakeLWCMatrix4x3(Primitive_TilePosition, Primitive_PreviousLocalToRelativeWorld);
	PrimitiveData.PreviousWorldToLocal = MakeLWCInverseMatrix4x3(Primitive_TilePosition, Primitive_PreviousRelativeWorldToLocal);
	PrimitiveData.InvNonUniformScale = Primitive_InvNonUniformScale;
	PrimitiveData.ObjectBoundsX = Primitive_ObjectBoundsX;
	PrimitiveData.ObjectWorldPosition = MakeLWCVector3(Primitive_TilePosition, Primitive_ObjectRelativeWorldPositionAndRadius.xyz);
	PrimitiveData.ObjectRadius = Primitive_ObjectRelativeWorldPositionAndRadius.w;
	PrimitiveData.ActorWorldPosition = MakeLWCVector3(Primitive_TilePosition, Primitive_ActorRelativeWorldPosition);
	PrimitiveData.LightmapUVIndex = Primitive_LightmapUVIndex;
	PrimitiveData.ObjectOrientation = Primitive_ObjectOrientation;
	PrimitiveData.LightmapDataIndex = Primitive_LightmapDataIndex;
	PrimitiveData.NonUniformScale = Primitive_NonUniformScale;
	PrimitiveData.PreSkinnedLocalBoundsMin = Primitive_PreSkinnedLocalBoundsMin;
	PrimitiveData.NaniteResourceID = Primitive_NaniteResourceID;
	PrimitiveData.PreSkinnedLocalBoundsMax = Primitive_PreSkinnedLocalBoundsMax;
	PrimitiveData.NaniteHierarchyOffset = Primitive_NaniteHierarchyOffset;
	PrimitiveData.LocalObjectBoundsMin = Primitive_LocalObjectBoundsMin;
	PrimitiveData.ObjectBoundsY = Primitive_ObjectBoundsY;
	PrimitiveData.LocalObjectBoundsMax = Primitive_LocalObjectBoundsMax;
	PrimitiveData.ObjectBoundsZ = Primitive_ObjectBoundsZ;
	PrimitiveData.InstancePayloadDataOffset = Primitive_InstancePayloadDataOffset;
	PrimitiveData.InstancePayloadDataStride = Primitive_InstancePayloadDataStride;
	PrimitiveData.WireframeColor = Primitive_WireframeColor;
	PrimitiveData.LevelColor = Primitive_LevelColor;
	PrimitiveData.PersistentPrimitiveIndex = Primitive_PersistentPrimitiveIndex;
	[unroll]
	for (int DataIndex = 0; DataIndex <  9 ; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = Primitive_CustomPrimitiveData[DataIndex];
	}
	return PrimitiveData;
}
#line 205 "/Engine/Private/SceneData.ush"
float4 LoadPrimitivePrimitiveSceneDataElement(uint PrimitiveIndex, uint ItemIndex)
{
	uint TargetIdx = PrimitiveIndex + ItemIndex;








	{ } ;
	return View_PrimitiveSceneData[TargetIdx];

}


FPrimitiveSceneData GetPrimitiveData(uint PrimitiveId)
{





	FPrimitiveSceneData PrimitiveData = (FPrimitiveSceneData)0;


	uint PrimitiveIndex = PrimitiveId *  40 ;

	float3 TilePosition = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).xyz;

	float4x4 LocalToWorld;
	LocalToWorld[0] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 2).xyz, 0.0f);
	LocalToWorld[1] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 3).xyz, 0.0f);
	LocalToWorld[2] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 4).xyz, 0.0f);
	LocalToWorld[3] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 5).xyz, 1.0f);

	float4x4 PreviousLocalToWorld;
	PreviousLocalToWorld[0] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 10).xyz, 0.0f);
	PreviousLocalToWorld[1] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 11).xyz, 0.0f);
	PreviousLocalToWorld[2] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 12).xyz, 0.0f);
	PreviousLocalToWorld[3] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 13).xyz, 1.0f);

	float4x4 WorldToLocal;
	WorldToLocal[0] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 6).xyz, 0.0f);
	WorldToLocal[1] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 7).xyz, 0.0f);
	WorldToLocal[2] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 8).xyz, 0.0f);
	WorldToLocal[3] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 9).xyz, 1.0f);

	float4x4 PreviousWorldToLocal;
	PreviousWorldToLocal[0] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 14).xyz, 0.0f);
	PreviousWorldToLocal[1] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 15).xyz, 0.0f);
	PreviousWorldToLocal[2] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 16).xyz, 0.0f);
	PreviousWorldToLocal[3] = float4(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 17).xyz, 1.0f);

	float4 ObjectWorldPositionAndRadius = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 19);

	PrimitiveData.Flags = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).x);
	PrimitiveData.InstanceSceneDataOffset = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).y);
	PrimitiveData.NumInstanceSceneDataEntries = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).z);
	PrimitiveData.SingleCaptureIndex = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 0).w);
	PrimitiveData.TilePosition = TilePosition;
	PrimitiveData.PrimitiveComponentId = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 1).w);
	PrimitiveData.LocalToWorld = MakeLWCMatrix4x3(TilePosition, LocalToWorld);
	PrimitiveData.WorldToLocal = MakeLWCInverseMatrix4x3(TilePosition, WorldToLocal);
	PrimitiveData.PreviousLocalToWorld = MakeLWCMatrix4x3(TilePosition, PreviousLocalToWorld);
	PrimitiveData.PreviousWorldToLocal = MakeLWCInverseMatrix4x3(TilePosition, PreviousWorldToLocal);
	PrimitiveData.InvNonUniformScale = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18).xyz;
	PrimitiveData.ObjectBoundsX = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 18).w;
	PrimitiveData.ObjectWorldPosition = MakeLWCVector3(TilePosition, ObjectWorldPositionAndRadius.xyz);
	PrimitiveData.ObjectRadius = ObjectWorldPositionAndRadius.w;
	PrimitiveData.ActorWorldPosition = MakeLWCVector3(TilePosition, LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).xyz);
	PrimitiveData.LightmapUVIndex = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 20).w);
	PrimitiveData.ObjectOrientation = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21).xyz;
	PrimitiveData.LightmapDataIndex = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 21).w);
	PrimitiveData.NonUniformScale = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 22);
	PrimitiveData.PreSkinnedLocalBoundsMin = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).xyz;
	PrimitiveData.NaniteResourceID = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 23).w);
	PrimitiveData.PreSkinnedLocalBoundsMax = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).xyz;
	PrimitiveData.NaniteHierarchyOffset = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 24).w);
	PrimitiveData.LocalObjectBoundsMin = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).xyz;
	PrimitiveData.ObjectBoundsY = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 25).w;
	PrimitiveData.LocalObjectBoundsMax = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).xyz;
	PrimitiveData.ObjectBoundsZ = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 26).w;
	PrimitiveData.InstanceLocalBoundsCenter = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).xyz;
	PrimitiveData.InstancePayloadDataOffset = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 27).w);
	PrimitiveData.InstanceLocalBoundsExtent = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).xyz;
	PrimitiveData.InstancePayloadDataStride = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 28).w);
	PrimitiveData.WireframeColor = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).xyz;
	PrimitiveData.NaniteImposterIndex = asuint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 29).w);
	PrimitiveData.LevelColor = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).xyz;
	PrimitiveData.PersistentPrimitiveIndex = asint(LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 30).w);


	[unroll]
	for (int DataIndex = 0; DataIndex <  9 ; ++DataIndex)
	{
		PrimitiveData.CustomPrimitiveData[DataIndex] = LoadPrimitivePrimitiveSceneDataElement(PrimitiveIndex, 31 + DataIndex);
	}
	return PrimitiveData;

}
#line 317 "/Engine/Private/SceneData.ush"
float GetPrimitive_DeterminantSign_FromFlags(uint Flags)
{
	return CondMask(Flags &  0x40 , -1.0f, 1.0f);
}

float GetPrimitive_DeterminantSign(uint PrimitiveId)
{
	return GetPrimitive_DeterminantSign_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}


float GetPrimitive_DeterminantSign(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_DeterminantSign_FromFlags(Primitive_Flags);
}


float GetPrimitive_PerObjectGBufferData_FromFlags(uint Flags)
{
	const float CapsuleRepresentation = CondMask(Flags &  0x80 , 1.0f, 0.0f);
	const float CastContactShadow = CondMask(Flags &  0x100 , 1.0f, 0.0f);
	return (2.0f * CapsuleRepresentation + CastContactShadow) / 3.0f;
}

float GetPrimitive_PerObjectGBufferData(uint PrimitiveId)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}


float GetPrimitive_PerObjectGBufferData(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_PerObjectGBufferData_FromFlags(Primitive_Flags);
}


uint GetPrimitive_LightingChannelMask_FromFlags(uint Flags)
{
	const uint Channel0 = CondMask(Flags &  0x400 , 1u, 0u);
	const uint Channel1 = CondMask(Flags &  0x800 , 1u, 0u);
	const uint Channel2 = CondMask(Flags &  0x1000 , 1u, 0u);
	return (Channel0 | (Channel1 << 1u) | (Channel2 << 2u));
}

uint GetPrimitive_LightingChannelMask(uint PrimitiveId)
{
	return GetPrimitive_LightingChannelMask_FromFlags(GetPrimitiveData(PrimitiveId).Flags);
}


uint GetPrimitive_LightingChannelMask(FPrimitiveSceneData Primitive)
{
	return GetPrimitive_LightingChannelMask_FromFlags(Primitive_Flags);
}




struct FInstanceSceneEditorData
{
	float3 HitProxyId;
	uint HitProxyPacked;
	bool bIsSelected;
};


float3 UnpackHitProxyId(uint HitProxyPacked)
{

	return float3
	(
		float((HitProxyPacked ) & 0xFF),
		float((HitProxyPacked >> 8u) & 0xFF),
		float((HitProxyPacked >> 16u) & 0xFF)
	) * (1.0f / 255.0f);
}

struct FInstancePayloadDataOffsets
{
	uint HierarchyOffset;
	uint EditorData;
	uint LocalBounds;
	uint DynamicData;
	uint LightShadowUVBias;
	uint CustomData;
};

struct FInstanceSceneData
{
	FLWCMatrix LocalToWorld;
	FLWCMatrix PrevLocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	float4 NonUniformScale;
	float3 InvNonUniformScale;
	float DeterminantSign;
	float3 LocalBoundsCenter;
	uint PrimitiveId;
	uint RelativeId;
	uint PayloadDataOffset;
	float3 LocalBoundsExtent;
	uint LastUpdateSceneFrameNumber;
	uint NaniteRuntimeResourceID;
	uint NaniteHierarchyOffset;

	float RandomID;
#line 428 "/Engine/Private/SceneData.ush"
	float4 LightMapAndShadowMapUVBias;

	bool ValidInstance;
	uint Flags;


	FInstanceSceneEditorData EditorData;

};
#line 448 "/Engine/Private/SceneData.ush"
uint GetGPUSceneFrameNumber()
{



	return View_FrameNumber;

}

float4 LoadInstanceSceneDataElement(uint Index)
{





	return View_InstanceSceneData[Index];

}

float4 LoadInstancePayloadDataElement(uint Index)
{





	return View_InstancePayloadData[Index];

}

float4 LoadInstanceCustomDataElement(FInstanceSceneData SceneData, uint Float4Index)
{
#line 489 "/Engine/Private/SceneData.ush"
	return (float4)0.0f;
}

float LoadInstanceCustomDataFloat(FInstanceSceneData SceneData, uint FloatIndex)
{






	return 0.0f;

}


void GetHemiOrthoBasis( inout float3 BasisX, inout float3 BasisY, float3 BasisZ )
{
	float A = 1.0f / ( 1.0f + BasisZ.z );
	float B = -BasisZ.x * BasisZ.y * A;
	BasisX = float3( 1.0f - BasisZ.x * BasisZ.x * A, B, -BasisZ.x );
	BasisY = float3( B, 1.0f - BasisZ.y * BasisZ.y * A, -BasisZ.y );
}

uint4 EncodeScaleAndRotation(float3 Scale, float3x3 Axis)
{
	const uint ExpBits = 8;
	const uint ExpBias = ( 1u << (ExpBits - 1) ) - 1;
	const uint SignMantissaBits = 16;
	const uint SignMantissaMask = (1u << SignMantissaBits) - 1;
	const uint MantissaBits = SignMantissaBits - 1;
	const float Sqrt2 = 1.41421356f;

	uint4 Output;


	{
		if( Axis[2].z < 0.0f )
		{
			Axis[2] *= -1.0f;
			Scale.z *= -1.0f;
		}

		float2 OctZ = UnitVectorToHemiOctahedron( Axis[2] );

		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, Axis[2] );

		float X = dot(Axis[0], BasisX);
		float Y = dot(Axis[0], BasisY);

		float aX = abs( X );
		float aY = abs( Y );

		bool bSpinIsX = aX < aY;
		float Spin0 = bSpinIsX ? X : Y;
		float Spin1 = bSpinIsX ? Y : X;
		float Sign1 = Spin1 < 0.0f ? -1.0f : 1.0f;


		Scale.x *= Sign1;
		Spin0 *= Sign1;

		float3 GeneratedY = cross(Axis[2], Axis[0]);
		Scale.y *= dot( Axis[1], GeneratedY ) < 0.0f ? -Sign1 : Sign1;


		Output.x = (((int)round( OctZ.x * 32767.0f ) + 32768) & 0xFFFF) << 0;
		Output.x |= (((int)round( OctZ.y * 32767.0f ) + 32768) & 0xFFFF) << 16;



		Output.y = ((int)round( Spin0 * 16383.0f * Sqrt2 ) + 16384);
		Output.y |= bSpinIsX ? (1u << 15) : 0;
	}


	{
		float MaxComponent = max3(abs(Scale.x), abs(Scale.y), abs(Scale.z));
		uint MaxComponentExponent = (asuint(MaxComponent) & 0x7f800000u) >> 23;




		uint SharedExp = MaxComponentExponent + 1;

		float ExpScale = asfloat(((127 + ExpBias + MantissaBits - SharedExp) & 0xFFu) << 23);

		if( (uint)round( MaxComponent * ExpScale ) == (1u << MantissaBits) )
		{

			SharedExp++;
			ExpScale *= 0.5f;
		}

		Output.z = (((int)round( Scale.x * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) << 0;
		Output.z |= (((int)round( Scale.y * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) << 16;
		Output.w = (((int)round( Scale.z * ExpScale ) + (1u << MantissaBits)) & 0xFFFFu) << 0;
		Output.w |= SharedExp << 16;
	}

	return Output;
}

uint4 EncodeScaleAndRotation( float3x3 InTransform )
{
	float3 Scale = {
		length(InTransform[0]),
		length(InTransform[1]),
		length(InTransform[2])
	};
	float3x3 Axis = {
		InTransform[0] / Scale.x,
		InTransform[1] / Scale.y,
		InTransform[2] / Scale.z
	};
	return EncodeScaleAndRotation(Scale, Axis);
}

void EncodeTransform( float4x4 InTransform, inout uint4 OutRotationScale, inout float3 OutTranslation )
{
	OutRotationScale = EncodeScaleAndRotation((float3x3)InTransform);
	OutTranslation = InTransform[3].xyz;
}

float4x4 DecodeTransform( uint4 RotationScale, float3 Translation, inout float3 Scale )
{
	float4x4 M = 0.0;
	M[3].xyz = Translation;
	M[3].w = 1.0;


	{
		float3 Rotation =
		{
			( RotationScale[0] >> 0 ) & 0xffff,
			( RotationScale[0] >> 16 ) & 0xffff,
			( RotationScale[1] >> 0 ) & 0x7fff
		};

		float2 OctZ = ( Rotation.xy - 32768 ) * (1.0f / 32767.0f);
		float Spin0 = ( Rotation.z - 16384 ) * (0.70710678f / 16383.0f);
		bool bSpinIsX = RotationScale[1] & 0x8000;

		M[2].xyz = HemiOctahedronToUnitVector( OctZ );

		float3 BasisX, BasisY;
		GetHemiOrthoBasis( BasisX, BasisY, M[2].xyz );

		float Spin1 = sqrt( 1.0f - Spin0 * Spin0 );
		float X = bSpinIsX ? Spin0 : Spin1;
		float Y = bSpinIsX ? Spin1 : Spin0;

		M[0].xyz = BasisX * X + BasisY * Y;
		M[1].xyz = cross( M[2].xyz, M[0].xyz );
	}


	{
		const uint SignMantissaBits = 16;
		const uint SignMantissaMask = (1u << SignMantissaBits) - 1;
		const uint MantissaBits = SignMantissaBits - 1;
#line 664 "/Engine/Private/SceneData.ush"
		uint SharedExp = RotationScale[3] >> 16;

		float ExpScale = asfloat( ( SharedExp - MantissaBits ) << 23 );

		uint3 Mantissa =
		{
			RotationScale[2] >> 0,
			RotationScale[2] >> 16,
			RotationScale[3] >> 0
		};


		Mantissa &= SignMantissaMask;
		Scale = Mantissa;
		Scale -= 1u << MantissaBits;
		Scale *= ExpScale;

		M[0] *= Scale[0];
		M[1] *= Scale[1];
		M[2] *= Scale[2];
	}

	return M;
}


void UnpackPrimitiveIdAndInstanceFlags(uint PackedPrimitiveIdAndFlags, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	OutPrimitiveId = BitFieldExtractU32(PackedPrimitiveIdAndFlags,  (20u) , 0);
	OutInstanceFlags = BitFieldExtractU32(PackedPrimitiveIdAndFlags,  (12u) ,  (20u) );
}

uint PackPrimitiveIdAndInstanceFlags(uint PrimitiveId, uint InstanceFlags)
{
	return (PrimitiveId &  ((1u << (20u) ) - 1u) ) | (InstanceFlags <<  (20u) );
}

void LoadInstancePrimitiveIdAndFlags(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedPrimitiveIdAndFlags = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).x);
	UnpackPrimitiveIdAndInstanceFlags(PackedPrimitiveIdAndFlags, OutPrimitiveId, OutInstanceFlags);
}


void UnpackInstanceRelativeIdAndCustomDataCount(uint PackedRelativeIdAndCustomDataCount, inout uint OutRelativeId, inout uint OutCustomDataCount)
{
	OutRelativeId = BitFieldExtractU32(PackedRelativeIdAndCustomDataCount,  (24u) , 0);
	OutCustomDataCount = BitFieldExtractU32(PackedRelativeIdAndCustomDataCount,  (8u) ,  (24u) );
}

uint PackInstanceRelativeIdAndCustomDataCount(uint RelativeId, uint CustomDataCount)
{
	return (RelativeId &  ((1u << (24u) ) - 1u) ) | (CustomDataCount <<  (24u) );
}

void LoadInstanceRelativeIdAndCustomDataCount(uint InstanceId, uint SOAStride, inout uint OutPrimitiveId, inout uint OutInstanceFlags)
{
	const uint PackedRelativeIdAndCustomDataCount = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).y);
	UnpackInstanceRelativeIdAndCustomDataCount(PackedRelativeIdAndCustomDataCount, OutPrimitiveId, OutInstanceFlags);
}


float GetInstanceDeterminantSignFromFlags(uint Flags)
{

	return CondMask(Flags &  0x1 , -1.0f, 1.0f);
}

void SetInstanceDeterminantSignFlag(float Determinant, inout uint Flags)
{
	if (Determinant < 0.0f)
	{
		Flags |=  0x1 ;
	}
	else
	{
		Flags &= ~ 0x1 ;
	}
}


FInstancePayloadDataOffsets GetInstancePayloadDataOffsets(uint PrimitiveId, uint Flags, uint InstanceRelativeId)
{
	const uint PayloadDataRelativeOffset = InstanceRelativeId * GetPrimitiveData(PrimitiveId).InstancePayloadDataStride;
	const uint PayloadDataGlobalOffset = PayloadDataRelativeOffset + GetPrimitiveData(PrimitiveId).InstancePayloadDataOffset;

	const bool bHasHierarchyOffset = (Flags &  0x20 ) != 0u;
	const bool bHasLocalBounds = (Flags &  0x40 ) != 0u;
	const bool bHasDynamicData = (Flags &  0x8 ) != 0u;
	const bool bHasLightShadowUVBias = (Flags &  0x10 ) != 0u;
	const bool bHasCustomData = (Flags &  0x4 ) != 0u;

	const bool bHasEditorData = (Flags &  0x80 ) != 0u;
#line 761 "/Engine/Private/SceneData.ush"
	uint CurOffset = PayloadDataGlobalOffset;


	FInstancePayloadDataOffsets Offsets;
	Offsets.HierarchyOffset =  (0xFFFFFFFFu) ;
	Offsets.EditorData =  (0xFFFFFFFFu) ;
	Offsets.LocalBounds =  (0xFFFFFFFFu) ;
	Offsets.DynamicData =  (0xFFFFFFFFu) ;
	Offsets.LightShadowUVBias =  (0xFFFFFFFFu) ;
	Offsets.CustomData =  (0xFFFFFFFFu) ;


	if (bHasHierarchyOffset)
	{
		Offsets.HierarchyOffset = CurOffset;
	}

	if (bHasEditorData)
	{
		Offsets.EditorData = CurOffset;
	}

	if (bHasLocalBounds)
	{
		Offsets.LocalBounds = CurOffset;
	}
	CurOffset += CondMask(bHasLocalBounds, 2u, CondMask(bHasHierarchyOffset || bHasEditorData, 1u, 0u));

	if (bHasDynamicData)
	{
		Offsets.DynamicData = CurOffset;
		CurOffset += InstanceTransformSizeFloat4Count;
	}

	if (bHasLightShadowUVBias)
	{
		Offsets.LightShadowUVBias = CurOffset;
		++CurOffset;
	}

	if (bHasCustomData)
	{
		Offsets.CustomData = CurOffset;
	}

	return Offsets;
}

void ComputeInstanceDerivedData(inout FInstanceSceneData InstanceData, float3 TilePosition, float4x4 LocalToRelativeWorld)
{
#line 826 "/Engine/Private/SceneData.ush"
	InstanceData.NonUniformScale.w = max3( InstanceData.NonUniformScale.x, InstanceData.NonUniformScale.y, InstanceData.NonUniformScale.z );
	InstanceData.DeterminantSign = GetInstanceDeterminantSignFromFlags(InstanceData.Flags);

	float4x4 RelativeWorldToLocal = LocalToRelativeWorld;
	RelativeWorldToLocal[0].xyz *= Pow2(InstanceData.InvNonUniformScale.x);
	RelativeWorldToLocal[1].xyz *= Pow2(InstanceData.InvNonUniformScale.y);
	RelativeWorldToLocal[2].xyz *= Pow2(InstanceData.InvNonUniformScale.z);
	RelativeWorldToLocal[3].xyz = 0.0f;
	RelativeWorldToLocal = transpose(RelativeWorldToLocal);
	RelativeWorldToLocal[3].xyz = mul(float4(-LocalToRelativeWorld[3].xyz, 0.0f), RelativeWorldToLocal).xyz;
	InstanceData.WorldToLocal = MakeLWCInverseMatrix(TilePosition, RelativeWorldToLocal);
}


FInstanceSceneData GetInstanceSceneData(uint InstanceId, uint SOAStride, bool bCheckValid = true)
{
	FInstanceSceneData InstanceData = (FInstanceSceneData)0;







	LoadInstancePrimitiveIdAndFlags(InstanceId, SOAStride, InstanceData.PrimitiveId, InstanceData.Flags);
	InstanceData.ValidInstance = InstanceData.PrimitiveId !=  ((1u << (20u) ) - 1u) ;
#line 874 "/Engine/Private/SceneData.ush"
	[branch]
	if (!bCheckValid || InstanceData.ValidInstance)
	{
		uint CustomDataCount;
		LoadInstanceRelativeIdAndCustomDataCount(InstanceId, SOAStride, InstanceData.RelativeId, CustomDataCount);

		FInstancePayloadDataOffsets Offsets = GetInstancePayloadDataOffsets(InstanceData.PrimitiveId, InstanceData.Flags, InstanceData.RelativeId);
#line 886 "/Engine/Private/SceneData.ush"
		InstanceData.LastUpdateSceneFrameNumber = asuint(LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).z);

		InstanceData.RandomID = LoadInstanceSceneDataElement(0 * SOAStride + InstanceId).w;


		float3 TilePosition = GetPrimitiveData(InstanceData.PrimitiveId).TilePosition;


		uint4 RotationScale = asuint(LoadInstanceSceneDataElement(1 * SOAStride + InstanceId));
		float3 Translation = LoadInstanceSceneDataElement(2 * SOAStride + InstanceId).xyz;
		float3 Scale = 0;
		float4x4 LocalToRelativeWorld = DecodeTransform( RotationScale, Translation, Scale );

		uint4 PrevRotationScale = asuint(LoadInstanceSceneDataElement(3 * SOAStride + InstanceId));
		float3 PrevTranslation = LoadInstanceSceneDataElement(4 * SOAStride + InstanceId).xyz;
		float3 PrevScale = 0;
		float4x4 PrevLocalToRelativeWorld = DecodeTransform( PrevRotationScale, PrevTranslation, PrevScale );

		InstanceData.NonUniformScale.xyz = abs(Scale);
		InstanceData.InvNonUniformScale = rcp(InstanceData.NonUniformScale.xyz);
#line 920 "/Engine/Private/SceneData.ush"
		InstanceData.LocalToWorld = MakeLWCMatrix(TilePosition, LocalToRelativeWorld);
		InstanceData.PrevLocalToWorld = MakeLWCMatrix(TilePosition, PrevLocalToRelativeWorld);
		ComputeInstanceDerivedData(InstanceData, TilePosition, LocalToRelativeWorld);

		InstanceData.NaniteRuntimeResourceID = GetPrimitiveData(InstanceData.PrimitiveId).NaniteResourceID;
		InstanceData.NaniteHierarchyOffset = GetPrimitiveData(InstanceData.PrimitiveId).NaniteHierarchyOffset;

		[branch]
		if (Offsets.HierarchyOffset !=  (0xFFFFFFFFu) )
		{
			const uint HierarchyRootOffset = asuint(LoadInstancePayloadDataElement(Offsets.HierarchyOffset)).x;


			InstanceData.NaniteHierarchyOffset += HierarchyRootOffset;
		}


		[branch]
		if (Offsets.EditorData !=  (0xFFFFFFFFu) )
		{
			const uint PackedEditorData = asuint(LoadInstancePayloadDataElement(Offsets.EditorData)).y;

			InstanceData.EditorData.bIsSelected = (PackedEditorData >> 24u) != 0;
			InstanceData.EditorData.HitProxyPacked = PackedEditorData & 0x00FFFFFFu;
			InstanceData.EditorData.HitProxyId = UnpackHitProxyId(InstanceData.EditorData.HitProxyPacked);
		}


		[branch]
		if (Offsets.LocalBounds !=  (0xFFFFFFFFu) )
		{
			InstanceData.LocalBoundsCenter = float3(LoadInstancePayloadDataElement(Offsets.LocalBounds + 0).zw, LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).x);
			InstanceData.LocalBoundsExtent = LoadInstancePayloadDataElement(Offsets.LocalBounds + 1).yzw;
		}
		else
		{
			InstanceData.LocalBoundsCenter = GetPrimitiveData(InstanceData.PrimitiveId).InstanceLocalBoundsCenter;
			InstanceData.LocalBoundsExtent = GetPrimitiveData(InstanceData.PrimitiveId).InstanceLocalBoundsExtent;
		}

		[branch]
		if (Offsets.DynamicData !=  (0xFFFFFFFFu) )
		{

			uint4 PrevRotationScale = asuint(LoadInstancePayloadDataElement(Offsets.DynamicData + 0));
			float3 PrevTranslation = LoadInstancePayloadDataElement(Offsets.DynamicData + 1).xyz;
			float3 PrevScale = 0;
			float4x4 PrevLocalToRelativeWorld = DecodeTransform(PrevRotationScale, PrevTranslation, PrevScale);
#line 975 "/Engine/Private/SceneData.ush"
			float3 TilePosition = GetPrimitiveData(InstanceData.PrimitiveId).TilePosition;
			InstanceData.PrevLocalToWorld = MakeLWCMatrix(TilePosition, PrevLocalToRelativeWorld);
		}
		else
		{


			uint4 PrevRotationScale = asuint(LoadInstanceSceneDataElement(3 * SOAStride + InstanceId));
			float3 PrevTranslation = LoadInstanceSceneDataElement(4 * SOAStride + InstanceId).xyz;
			float3 PrevScale = 0;
			float4x4 PrevLocalToRelativeWorld = DecodeTransform(PrevRotationScale, PrevTranslation, PrevScale);
#line 990 "/Engine/Private/SceneData.ush"
			float3 TilePosition = GetPrimitiveData(InstanceData.PrimitiveId).TilePosition;
			InstanceData.PrevLocalToWorld = MakeLWCMatrix(TilePosition, PrevLocalToRelativeWorld);
		}


		[branch]
		if (Offsets.LightShadowUVBias !=  (0xFFFFFFFFu) )
		{
			InstanceData.LightMapAndShadowMapUVBias = LoadInstancePayloadDataElement(Offsets.LightShadowUVBias);
		}

	}

	return InstanceData;
}

struct FSceneDataIntermediates
{
	uint PrimitiveId;
	uint InstanceId;
	uint ViewIndex;

	uint InstanceIdLoadIndex;
	FInstanceSceneData InstanceData;
	FPrimitiveSceneData Primitive;
};
#line 1023 "/Engine/Private/SceneData.ush"
FSceneDataIntermediates GetSceneDataIntermediates(uint InstanceIdOffset, uint DrawInstanceId)
{
	FSceneDataIntermediates Intermediates = (FSceneDataIntermediates)0;

	Intermediates.InstanceIdLoadIndex = InstanceIdOffset + DrawInstanceId;





	if ((InstanceIdOffset &  (1U << 31U) ) != 0U)
	{

		uint PrimitiveID = InstanceIdOffset & ( (1U << 31U)  - 1U);
		Intermediates.InstanceId = GetPrimitiveData(PrimitiveID).InstanceSceneDataOffset + DrawInstanceId;
		Intermediates.ViewIndex = 0;
	}
	else
	{
		Intermediates.InstanceId = InstanceCulling_InstanceIdsBuffer[InstanceIdOffset + DrawInstanceId] & ((1U << 28U) - 1);


		Intermediates.ViewIndex = InstanceCulling_InstanceIdsBuffer[InstanceIdOffset + DrawInstanceId] >> 28U;
	}

	Intermediates.InstanceData = GetInstanceSceneData(Intermediates.InstanceId, View_InstanceSceneDataSOAStride);
	Intermediates.PrimitiveId = Intermediates.InstanceData.PrimitiveId;
	Intermediates.Primitive = GetPrimitiveData(Intermediates.PrimitiveId);

	return Intermediates;
}
#line 18 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/HairShadingCommon.ush"
#line 6 "/Engine/Private/HairShadingCommon.ush"
float3 HairAbsorptionToColor(float3 A, float B=0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return exp(-sqrt(A) * D);
}


float3 HairColorToAbsorption(float3 C, float B = 0.3f)
{
	const float b2 = B * B;
	const float b3 = B * b2;
	const float b4 = b2 * b2;
	const float b5 = B * b4;
	const float D = (5.969f - 0.215f * B + 2.532f * b2 - 10.73f * b3 + 5.574f * b4 + 0.245f * b5);
	return Pow2(log(C) / D);
}



float3 GetHairColorFromMelanin(float InMelanin, float InRedness, float3 InDyeColor)
{
	InMelanin = saturate(InMelanin);
	InRedness = saturate(InRedness);
	const float Melanin = -log(max(1 - InMelanin, 0.0001f));
	const float Eumelanin = Melanin * (1 - InRedness);
	const float Pheomelanin = Melanin * InRedness;

	const float3 DyeAbsorption = HairColorToAbsorption(saturate(InDyeColor));
	const float3 Absorption = Eumelanin * float3(0.506f, 0.841f, 1.653f) + Pheomelanin * float3(0.343f, 0.733f, 1.924f);

	return HairAbsorptionToColor(Absorption + DyeAbsorption);
}
#line 19 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/HairStrands/HairCardsAttributeCommon.ush"
#line 20 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/HairStrands/HairStrandsAttributeCommon.ush"
#line 21 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/DeferredShadingCommon.ush"
#line 9 "/Engine/Private/DeferredShadingCommon.ush"
#line 1 "ShadingCommon.ush"
#line 44 "/Engine/Private/ShadingCommon.ush"
float3 GetShadingModelColor(uint ShadingModelID)
{
#line 64 "/Engine/Private/ShadingCommon.ush"
	switch(ShadingModelID)
	{
		case  0 : return float3(0.1f, 0.1f, 0.2f);
		case  1 : return float3(0.1f, 1.0f, 0.1f);
		case  2 : return float3(1.0f, 0.1f, 0.1f);
		case  3 : return float3(0.6f, 0.4f, 0.1f);
		case  4 : return float3(0.1f, 0.4f, 0.4f);
		case  5 : return float3(0.2f, 0.6f, 0.5f);
		case  6 : return float3(0.2f, 0.2f, 0.8f);
		case  7 : return float3(0.6f, 0.1f, 0.5f);
		case  8 : return float3(0.7f, 1.0f, 1.0f);
		case  9 : return float3(0.3f, 1.0f, 1.0f);
		case  10 : return float3(0.5f, 0.5f, 1.0f);
		case  11 : return float3(1.0f, 0.8f, 0.3f);
		case  12 : return float3(1.0f, 1.0f, 0.0f);
		default: return float3(1.0f, 1.0f, 1.0f);
	}

}




bool GetShadingModelRequiresBackfaceLighting(uint ShadingModelID)
{
	return ShadingModelID ==  6 ;
}


float F0ToDielectricSpecular(float F0)
{
	return saturate(F0 / 0.08f);
}

float DielectricSpecularToF0(float Specular)
{
	return 0.08f * Specular;
}


float DielectricF0ToIor(float F0)
{
	return 2.0f / (1.0f - sqrt(F0)) - 1.0f;
}

float DielectricIorToF0(float Ior)
{
	const float F0Sqrt = (Ior-1)/(Ior+1);
	const float F0 = F0Sqrt*F0Sqrt;
	return F0;
}

float ComputeSpecularMicroOcclusion(float F0)
{

	return saturate(50.0 * F0);
}

float3 ComputeF0(float Specular, float3 BaseColor, float Metallic)
{
	return lerp(DielectricSpecularToF0(Specular).xxx, BaseColor, Metallic.xxx);
}

float3 ComputeF90(float3 F0, float3 EdgeColor, float Metallic)
{
	return lerp(1.0, EdgeColor, Metallic.xxx);
}

float MakeRoughnessSafe(float Roughness, float MinRoughness=0.001f)
{
	return clamp(Roughness, MinRoughness, 1.0f);
}

float ComputeHazyLobeRoughness(float Roughness, float Haziness)
{
	return lerp(Roughness, 1.0f, Haziness);
}
#line 10 "/Engine/Private/DeferredShadingCommon.ush"
#line 1 "LightAccumulator.ush"
#line 24 "/Engine/Private/LightAccumulator.ush"
struct FLightAccumulator
{
	float3 TotalLight;




	float ScatterableLightLuma;




	float3 ScatterableLight;



	float EstimatedCost;



	float3 TotalLightDiffuse;
	float3 TotalLightSpecular;

};

struct FDeferredLightingSplit
{
	float4 DiffuseLighting;
	float4 SpecularLighting;
};


void LightAccumulator_AddSplit(inout FLightAccumulator In, float3 DiffuseTotalLight, float3 SpecularTotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{

	In.TotalLight += (DiffuseTotalLight + SpecularTotalLight) * CommonMultiplier;


	if (bNeedsSeparateSubsurfaceLightAccumulation)
	{
		if ( 1  == 1)
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{
				In.ScatterableLightLuma += Luminance(ScatterableLight * CommonMultiplier);
			}
		}
		else if ( 1  == 2)
		{

			In.ScatterableLight += ScatterableLight * CommonMultiplier;
		}
	}

	In.TotalLightDiffuse += DiffuseTotalLight * CommonMultiplier;
	In.TotalLightSpecular += SpecularTotalLight * CommonMultiplier;
}

void LightAccumulator_Add(inout FLightAccumulator In, float3 TotalLight, float3 ScatterableLight, float3 CommonMultiplier, const bool bNeedsSeparateSubsurfaceLightAccumulation)
{
	LightAccumulator_AddSplit(In, TotalLight, 0.0f, ScatterableLight, CommonMultiplier, bNeedsSeparateSubsurfaceLightAccumulation);
}




float4 LightAccumulator_GetResult(FLightAccumulator In)
{
	float4 Ret;

	if ( 0  == 1)
	{

		Ret = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		Ret = float4(In.TotalLight, 0);

		if ( 1  == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{

				Ret.a = In.ScatterableLightLuma;
			}
		}
		else if ( 1  == 2)
		{


			Ret.a = Luminance(In.ScatterableLight);

		}
	}

	return Ret;
}


FDeferredLightingSplit LightAccumulator_GetResultSplit(FLightAccumulator In)
{
	float4 RetDiffuse;
	float4 RetSpecular;

	if ( 0  == 1)
	{

		RetDiffuse = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
		RetSpecular = 0.1f * float4(1.0f, 0.25f, 0.075f, 0) * In.EstimatedCost;
	}
	else
	{
		RetDiffuse = float4(In.TotalLightDiffuse, 0);
		RetSpecular = float4(In.TotalLightSpecular, 0);

		if ( 1  == 1 )
		{
			if (View_bCheckerboardSubsurfaceProfileRendering == 0)
			{

				RetDiffuse.a = In.ScatterableLightLuma;
			}
		}
		else if ( 1  == 2)
		{


			RetDiffuse.a = Luminance(In.ScatterableLight);

		}
	}

	FDeferredLightingSplit Ret;
	Ret.DiffuseLighting = RetDiffuse;
	Ret.SpecularLighting = RetSpecular;

	return Ret;
}
#line 11 "/Engine/Private/DeferredShadingCommon.ush"
#line 26 "/Engine/Private/DeferredShadingCommon.ush"
uint bSceneLightingChannelsValid;


Texture2D SceneDepthTexture;
Texture2D<uint2> SceneStencilTexture;
Texture2D GBufferATexture;
Texture2D GBufferBTexture;
Texture2D GBufferCTexture;
Texture2D GBufferDTexture;
Texture2D GBufferETexture;
Texture2D GBufferVelocityTexture;
Texture2D GBufferFTexture;
Texture2D<uint> SceneLightingChannels;










float SampleDeviceZFromSceneTextures(float2 UV)
{
	return SceneDepthTexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).r;
}









float3 RGBToYCoCg( float3 RGB )
{
	float Y = dot( RGB, float3( 1, 2, 1 ) ) * 0.25;
	float Co = dot( RGB, float3( 2, 0, -2 ) ) * 0.25 + ( 0.5 * 256.0 / 255.0 );
	float Cg = dot( RGB, float3( -1, 2, -1 ) ) * 0.25 + ( 0.5 * 256.0 / 255.0 );

	float3 YCoCg = float3( Y, Co, Cg );
	return YCoCg;
}

float3 YCoCgToRGB( float3 YCoCg )
{
	float Y = YCoCg.x;
	float Co = YCoCg.y - ( 0.5 * 256.0 / 255.0 );
	float Cg = YCoCg.z - ( 0.5 * 256.0 / 255.0 );

	float R = Y + Co - Cg;
	float G = Y + Cg;
	float B = Y - Co - Cg;

	float3 RGB = float3( R, G, B );
	return RGB;
}

float3 Pack1212To888( float2 x )
{








	float2 x1212 = floor( x * 4095 );
	float2 High = floor( x1212 / 256 );
	float2 Low = x1212 - High * 256;
	float3 x888 = float3( Low, High.x + High.y * 16 );
	return saturate( x888 / 255 );

}

float2 Pack888To1212( float3 x )
{








	float3 x888 = floor( x * 255 );
	float High = floor( x888.z / 16 );
	float Low = x888.z - High * 16;
	float2 x1212 = x888.xy + float2( Low, High ) * 256;
	return saturate( x1212 / 4095 );

}

float3 EncodeNormal( float3 N )
{
	return N * 0.5 + 0.5;

}

float3 DecodeNormal( float3 N )
{
	return N * 2 - 1;

}

void EncodeNormal( inout float3 N, out uint Face )
{

	uint Axis = 2;
	if( abs(N.x) >= abs(N.y) && abs(N.x) >= abs(N.z) )
	{
		Axis = 0;
	}
	else if( abs(N.y) > abs(N.z) )
	{
		Axis = 1;
	}
	Face = Axis * 2;
#line 153 "/Engine/Private/DeferredShadingCommon.ush"
	N = Axis == 0 ? N.yzx : N;
	N = Axis == 1 ? N.xzy : N;

	float MaxAbs = 1.0 / sqrt(2.0);

	Face += N.z > 0 ? 0 : 1;
	N.xy *= N.z > 0 ? 1 : -1;
	N.xy = N.xy * (0.5 / MaxAbs) + 0.5;
}

void DecodeNormal( inout float3 N, in uint Face )
{
	uint Axis = Face >> 1;

	float MaxAbs = 1.0 / sqrt(2.0);

	N.xy = N.xy * (2 * MaxAbs) - (1 * MaxAbs);
	N.z = sqrt( 1 - dot( N.xy, N.xy ) );

	N = Axis == 0 ? N.zxy : N;
	N = Axis == 1 ? N.xzy : N;
	N *= (Face & 1) ? -1 : 1;
}

float3 EncodeBaseColor(float3 BaseColor)
{

	return BaseColor;
}

float3 DecodeBaseColor(float3 BaseColor)
{

	return BaseColor;
}

float3 EncodeSubsurfaceColor(float3 SubsurfaceColor)
{
	return sqrt(saturate(SubsurfaceColor));
}


float3 EncodeSubsurfaceProfile(float SubsurfaceProfile)
{
	return float3(SubsurfaceProfile, 0, 0);
}


float SubsurfaceDensityFromOpacity(float Opacity)
{
	return (-0.05f * log(1.0f - min(Opacity, 0.99f)));
}

float EncodeIndirectIrradiance(float IndirectIrradiance)
{
	float L = IndirectIrradiance;
	L *= View_PreExposure;
	const float LogBlackPoint = 0.00390625;
	return log2( L + LogBlackPoint ) / 16 + 0.5;
}

float DecodeIndirectIrradiance(float IndirectIrradiance)
{

	float LogL = IndirectIrradiance;
	const float LogBlackPoint = 0.00390625;
	return View_OneOverPreExposure * (exp2( LogL * 16 - 8 ) - LogBlackPoint);
}

float4 EncodeWorldTangentAndAnisotropy(float3 WorldTangent, float Anisotropy)
{
	return float4(
		EncodeNormal(WorldTangent),
		Anisotropy * 0.5f + 0.5f
		);
}

float ComputeAngleFromRoughness( float Roughness, const float Threshold = 0.04f )
{

	float Angle = 3 * Square( Roughness );
#line 239 "/Engine/Private/DeferredShadingCommon.ush"
	return Angle;
}

float ComputeRoughnessFromAngle( float Angle, const float Threshold = 0.04f )
{

	float Roughness = sqrt( 0.33333 * Angle );
#line 251 "/Engine/Private/DeferredShadingCommon.ush"
	return Roughness;
}

float AddAngleToRoughness( float Angle, float Roughness )
{
	return saturate( sqrt( Square( Roughness ) + 0.33333 * Angle ) );
}




float Encode71(float Scalar, uint Mask)
{
	return
		127.0f / 255.0f * saturate(Scalar) +
		128.0f / 255.0f * Mask;
}





float Decode71(float Scalar, out uint Mask)
{
	Mask = (uint)(Scalar > 0.5f);

	return (Scalar - 0.5f * Mask) * 2.0f;
}

float EncodeShadingModelIdAndSelectiveOutputMask(uint ShadingModelId, uint SelectiveOutputMask)
{
	uint Value = (ShadingModelId &  0xF ) | SelectiveOutputMask;
	return (float)Value / (float)0xFF;
}

uint DecodeShadingModelId(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) &  0xF ;
}

uint DecodeSelectiveOutputMask(float InPackedChannel)
{
	return ((uint)round(InPackedChannel * (float)0xFF)) & ~ 0xF ;
}

bool IsSubsurfaceModel(int ShadingModel)
{
	return ShadingModel ==  2
		|| ShadingModel ==  3
		|| ShadingModel ==  5
		|| ShadingModel ==  6
		|| ShadingModel ==  7
		|| ShadingModel ==  9 ;
}

bool UseSubsurfaceProfile(int ShadingModel)
{
	return ShadingModel ==  5  || ShadingModel ==  9 ;
}

bool HasCustomGBufferData(int ShadingModelID)
{
	return ShadingModelID ==  2
		|| ShadingModelID ==  3
		|| ShadingModelID ==  4
		|| ShadingModelID ==  5
		|| ShadingModelID ==  6
		|| ShadingModelID ==  7
		|| ShadingModelID ==  8
		|| ShadingModelID ==  9 ;
}

bool HasAnisotropy(int SelectiveOutputMask)
{
	return (SelectiveOutputMask &  (1 << 4) ) != 0;
}


struct FGBufferData
{

	float3 WorldNormal;

	float3 WorldTangent;

	float3 DiffuseColor;

	float3 SpecularColor;

	float3 BaseColor;

	float Metallic;

	float Specular;

	float4 CustomData;

	float GenericAO;

	float IndirectIrradiance;


	float4 PrecomputedShadowFactors;

	float Roughness;

	float Anisotropy;

	float GBufferAO;

	uint DiffuseIndirectSampleOcclusion;

	uint ShadingModelID;

	uint SelectiveOutputMask;

	float PerObjectGBufferData;

	float CustomDepth;

	uint CustomStencil;


	float Depth;

	float4 Velocity;


	float3 StoredBaseColor;

	float StoredSpecular;

	float StoredMetallic;
};

bool CastContactShadow(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	bool bCastContactShadowBit = PackedAlpha & 1;

	bool bShadingModelCastContactShadows = (GBufferData.ShadingModelID !=  9 );
	return bCastContactShadowBit && bShadingModelCastContactShadows;
}

bool HasDynamicIndirectShadowCasterRepresentation(FGBufferData GBufferData)
{
	uint PackedAlpha = (uint)(GBufferData.PerObjectGBufferData * 3.999f);
	return (PackedAlpha & 2) != 0;
}




bool CheckerFromPixelPos(uint2 PixelPos)
{


	uint TemporalAASampleIndex = View_TemporalAAParams.x;


	return (PixelPos.x + PixelPos.y + TemporalAASampleIndex) % 2;
#line 415 "/Engine/Private/DeferredShadingCommon.ush"
}




bool CheckerFromSceneColorUV(float2 UVSceneColor)
{

	uint2 PixelPos = uint2(UVSceneColor * View_BufferSizeAndInvSize.xy);

	return CheckerFromPixelPos(PixelPos);
}
#line 429 "/Engine/Private/DeferredShadingCommon.ush"
#line 1 "GBufferHelpers.ush"
#line 7 "/Engine/Private/GBufferHelpers.ush"
#line 1 "SceneTextureParameters.ush"
#line 8 "/Engine/Private/GBufferHelpers.ush"


float SquareInline(float X)
{
	return X * X;
}

float3 EncodeNormalHelper(float3 SrcNormal, float QuantizationBias)
{
	return SrcNormal * .5f + .5f;
}

float3 DecodeNormalHelper(float3 SrcNormal)
{
	return SrcNormal * 2.0f - 1.0f;
}


uint EncodeQuantize6(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 63.0f + .5f + QuantizationBias),63u);
}

float DecodeQuantize6(uint Value)
{
	return float(Value) / 63.0f;
}

uint EncodeQuantize6Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 63.0f + .5f + QuantizationBias),63u);
}

float DecodeQuantize6Sqrt(uint Value)
{
	return SquareInline(float(Value) / 63.0f);
}

uint EncodeQuantize5(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 31.0f + .5f + QuantizationBias),31u);
}

float DecodeQuantize5(uint Value)
{
	return float(Value) / 31.0f;
}

uint EncodeQuantize5Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 31.0f + .5f + QuantizationBias),31u);
}

float DecodeQuantize5Sqrt(uint Value)
{
	return SquareInline(float(Value) / 31.0f);
}

uint EncodeQuantize4(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 15.0f + .5f + QuantizationBias),15u);
}

float DecodeQuantize4(uint Value)
{
	return float(Value) / 15.0f;
}

uint EncodeQuantize4Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 15.0f + .5f + QuantizationBias),15u);
}

float DecodeQuantize4Sqrt(uint Value)
{
	return SquareInline(float(Value) / 15.0f);
}


uint EncodeQuantize3(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 7.0f + .5f + QuantizationBias),7u);
}

float DecodeQuantize3(uint Value)
{
	return float(Value) / 7.0f;
}

uint EncodeQuantize3Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 7.0f + .5f + QuantizationBias),7u);
}

float DecodeQuantize3Sqrt(uint Value)
{
	return SquareInline(float(Value) / 7.0f);
}

uint EncodeQuantize2(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 3.0f + .5f + QuantizationBias),3u);
}

float DecodeQuantize2(uint Value)
{
	return float(Value) / 3.0f;
}

uint EncodeQuantize2Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 3.0f + .5f + QuantizationBias),3u);
}

float DecodeQuantize2Sqrt(uint Value)
{
	return SquareInline(float(Value) / 3.0f);
}

uint EncodeQuantize1(float Value, float QuantizationBias)
{
	return min(uint(saturate(Value) * 1.0f + .5f + QuantizationBias),1u);
}

float DecodeQuantize1(uint Value)
{
	return float(Value) / 1.0f;
}

uint EncodeQuantize1Sqrt(float Value, float QuantizationBias)
{
	return min(uint(sqrt(saturate(Value)) * 1.0f + .5f + QuantizationBias),1u);
}

float DecodeQuantize1Sqrt(uint Value)
{
	return SquareInline(float(Value) / 1.0f);
}


uint3 EncodeQuantize565(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize5(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize6(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize5(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize565(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize5(Value.x);
	Ret.y = DecodeQuantize6(Value.y);
	Ret.z = DecodeQuantize5(Value.z);
	return Ret;
}

uint3 EncodeQuantize565Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize5Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize6Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize5Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize565Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize5Sqrt(Value.x);
	Ret.y = DecodeQuantize6Sqrt(Value.y);
	Ret.z = DecodeQuantize5Sqrt(Value.z);
	return Ret;
}


uint3 EncodeQuantize444(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize4(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize4(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize4(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize444(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize4(Value.x);
	Ret.y = DecodeQuantize4(Value.y);
	Ret.z = DecodeQuantize4(Value.z);
	return Ret;
}

uint3 EncodeQuantize444Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize4Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize4Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize4Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize444Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize4Sqrt(Value.x);
	Ret.y = DecodeQuantize4Sqrt(Value.y);
	Ret.z = DecodeQuantize4Sqrt(Value.z);
	return Ret;
}


uint3 EncodeQuantize332(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize3(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize3(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize2(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize332(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize3(Value.x);
	Ret.y = DecodeQuantize3(Value.y);
	Ret.z = DecodeQuantize2(Value.z);
	return Ret;
}

uint3 EncodeQuantize332Sqrt(float3 Value, float QuantizationBias)
{
	uint3 Ret;
	Ret.x = EncodeQuantize3Sqrt(Value.x,QuantizationBias);
	Ret.y = EncodeQuantize3Sqrt(Value.y,QuantizationBias);
	Ret.z = EncodeQuantize2Sqrt(Value.z,QuantizationBias);
	return Ret;
}

float3 DecodeQuantize332Sqrt(uint3 Value)
{
	float3 Ret;
	Ret.x = DecodeQuantize3Sqrt(Value.x);
	Ret.y = DecodeQuantize3Sqrt(Value.y);
	Ret.z = DecodeQuantize2Sqrt(Value.z);
	return Ret;
}


void EnvBRDFApproxFullyRoughHelper(inout float3 DiffuseColor, inout float3 SpecularColor)
{

	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;

}

void EnvBRDFApproxFullyRoughHelper(inout float3 DiffuseColor, inout float SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}








void GBufferPreEncode(inout FGBufferData GBuffer, bool bChecker, float GeometricAARoughness, inout  float3  OriginalBaseColor, inout  float  OriginalSpecular, inout  float  OriginalMetallic, float QuantizationBias)
{
#line 314 "/Engine/Private/GBufferHelpers.ush"
	GBuffer.DiffuseColor = OriginalBaseColor - OriginalBaseColor * OriginalMetallic;


	{

		GBuffer.DiffuseColor = GBuffer.DiffuseColor * View_DiffuseOverrideParameter.w + View_DiffuseOverrideParameter.xyz;
		GBuffer.SpecularColor = GBuffer.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
	}



	if (View_RenderingReflectionCaptureMask)

	{
		EnvBRDFApproxFullyRoughHelper(GBuffer.DiffuseColor, GBuffer.SpecularColor);

	}







		GBuffer.GenericAO = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO) + QuantizationBias * (1.0 / 255.0);
#line 345 "/Engine/Private/GBufferHelpers.ush"
}



void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View_bSubsurfacePostprocessEnabled > 0 && View_bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View_bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{



		BaseColor = bChecker;

		SpecularColor *= !bChecker;
		Specular *= !bChecker;
	}
}





void GBufferPostDecode(inout FGBufferData Ret, bool bChecker, bool bGetNormalizedNormal)
{
	Ret.CustomData = HasCustomGBufferData(Ret.ShadingModelID) ? Ret.CustomData : 0.0f;

	Ret.PrecomputedShadowFactors = !(Ret.SelectiveOutputMask & 0x2) ? Ret.PrecomputedShadowFactors : ((Ret.SelectiveOutputMask & 0x4) ? 0.0f : 1.0f);
	Ret.Velocity = !(Ret.SelectiveOutputMask & 0x8) ? Ret.Velocity : 0.0f;
	bool bHasAnisotropy = (Ret.SelectiveOutputMask & 0x1);

	Ret.StoredBaseColor = Ret.BaseColor;
	Ret.StoredMetallic = Ret.Metallic;
	Ret.StoredSpecular = Ret.Specular;






	Ret.GBufferAO = 1;
	Ret.DiffuseIndirectSampleOcclusion = 0x0;
	Ret.IndirectIrradiance = DecodeIndirectIrradiance(Ret.GenericAO.x);
#line 401 "/Engine/Private/GBufferHelpers.ush"
	if(bGetNormalizedNormal)
	{
		Ret.WorldNormal = normalize(Ret.WorldNormal);
	}

	[flatten]
	if( Ret.ShadingModelID ==  9  )
	{
		Ret.Metallic = 0.0;
#line 413 "/Engine/Private/GBufferHelpers.ush"
	}


	{
		Ret.SpecularColor = ComputeF0(Ret.Specular, Ret.BaseColor, Ret.Metallic);

		if (UseSubsurfaceProfile(Ret.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLightingCopyHack(Ret.BaseColor, Ret.SpecularColor, Ret.Specular, bChecker);
		}

		Ret.DiffuseColor = Ret.BaseColor - Ret.BaseColor * Ret.Metallic;


		{

			Ret.DiffuseColor = Ret.DiffuseColor * View_DiffuseOverrideParameter.www + View_DiffuseOverrideParameter.xyz;
			Ret.SpecularColor = Ret.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
		}

	}

	if (bHasAnisotropy)
	{
		Ret.WorldTangent = DecodeNormal(Ret.WorldTangent);
		Ret.Anisotropy = Ret.Anisotropy * 2.0f - 1.0f;

		if(bGetNormalizedNormal)
		{
			Ret.WorldTangent = normalize(Ret.WorldTangent);
		}
	}
	else
	{
		Ret.WorldTangent = 0;
		Ret.Anisotropy = 0;
	}



	Ret.SelectiveOutputMask = Ret.SelectiveOutputMask << 4;
}
#line 430 "/Engine/Private/DeferredShadingCommon.ush"
#line 431 "/Engine/Private/DeferredShadingCommon.ush"
#line 1 "/Engine/Generated/ShaderAutogen/AutogenShaderHeaders.ush"
#line 6 "/ShaderAutogen/PCD3D_SM5/AutogenShaderHeaders.ush"
float SampleDeviceZFromSceneTexturesTempCopy(float2 UV)
{
	return SceneDepthTexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).r;
}


void EncodeGBufferToMRT(inout FPixelShaderOut Out, FGBufferData GBuffer, float QuantizationBias)
{
	float4 MrtFloat1 = 0.0f;
	float4 MrtFloat2 = 0.0f;
	uint4 MrtUint2 = 0;
	float4 MrtFloat3 = 0.0f;
	float4 MrtFloat4 = 0.0f;
	float4 MrtFloat5 = 0.0f;

	float3 WorldNormal_Compressed = EncodeNormalHelper(GBuffer.WorldNormal, 0.0f);

	MrtFloat1.x = WorldNormal_Compressed.x;
	MrtFloat1.y = WorldNormal_Compressed.y;
	MrtFloat1.z = WorldNormal_Compressed.z;
	MrtFloat1.w = GBuffer.PerObjectGBufferData.x;
	MrtFloat2.x = GBuffer.Metallic.x;
	MrtFloat2.y = GBuffer.Specular.x;
	MrtFloat2.z = GBuffer.Roughness.x;
	MrtUint2.w |= ((((GBuffer.ShadingModelID.x) >> 0) & 0x0f) << 0);
	MrtUint2.w |= ((((GBuffer.SelectiveOutputMask.x) >> 0) & 0x0f) << 4);
	MrtFloat3.x = GBuffer.BaseColor.x;
	MrtFloat3.y = GBuffer.BaseColor.y;
	MrtFloat3.z = GBuffer.BaseColor.z;
	MrtFloat3.w = GBuffer.GenericAO.x;
	MrtFloat5.x = GBuffer.PrecomputedShadowFactors.x;
	MrtFloat5.y = GBuffer.PrecomputedShadowFactors.y;
	MrtFloat5.z = GBuffer.PrecomputedShadowFactors.z;
	MrtFloat5.w = GBuffer.PrecomputedShadowFactors.w;
	MrtFloat4.x = GBuffer.CustomData.x;
	MrtFloat4.y = GBuffer.CustomData.y;
	MrtFloat4.z = GBuffer.CustomData.z;
	MrtFloat4.w = GBuffer.CustomData.w;

	Out.MRT[1] = MrtFloat1;
	Out.MRT[2] = float4(MrtFloat2.x, MrtFloat2.y, MrtFloat2.z, (float(MrtUint2.w) + .5f) / 255.0f);
	Out.MRT[3] = MrtFloat3;
	Out.MRT[4] = MrtFloat4;
	Out.MRT[5] = MrtFloat5;
	Out.MRT[6] = float4(0.0f, 0.0f, 0.0f, 0.0f);
	Out.MRT[7] = float4(0.0f, 0.0f, 0.0f, 0.0f);
}


FGBufferData DecodeGBufferDataDirect(float4 InMRT1,
	float4 InMRT2,
	float4 InMRT3,
	float4 InMRT4,
	float4 InMRT5,

	float CustomNativeDepth,
	float4 AnisotropicData,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData Ret = (FGBufferData)0;
	float3 WorldNormal_Compressed = 0.0f;
	WorldNormal_Compressed.x = InMRT1.x;
	WorldNormal_Compressed.y = InMRT1.y;
	WorldNormal_Compressed.z = InMRT1.z;
	Ret.PerObjectGBufferData.x = InMRT1.w;
	Ret.Metallic.x = InMRT2.x;
	Ret.Specular.x = InMRT2.y;
	Ret.Roughness.x = InMRT2.z;
	Ret.ShadingModelID.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 0) & 0x0f) << 0);
	Ret.SelectiveOutputMask.x = (((uint((float(InMRT2.w) * 255.0f) + .5f) >> 4) & 0x0f) << 0);
	Ret.BaseColor.x = InMRT3.x;
	Ret.BaseColor.y = InMRT3.y;
	Ret.BaseColor.z = InMRT3.z;
	Ret.GenericAO.x = InMRT3.w;
	Ret.PrecomputedShadowFactors.x = InMRT5.x;
	Ret.PrecomputedShadowFactors.y = InMRT5.y;
	Ret.PrecomputedShadowFactors.z = InMRT5.z;
	Ret.PrecomputedShadowFactors.w = InMRT5.w;
	Ret.CustomData.x = InMRT4.x;
	Ret.CustomData.y = InMRT4.y;
	Ret.CustomData.z = InMRT4.z;
	Ret.CustomData.w = InMRT4.w;

	Ret.WorldNormal = DecodeNormalHelper(WorldNormal_Compressed);
	Ret.WorldTangent = AnisotropicData.xyz;
	Ret.Anisotropy = AnisotropicData.w;

	GBufferPostDecode(Ret,bChecker,bGetNormalizedNormal);

	Ret.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	Ret.CustomStencil = CustomStencil;
	Ret.Depth = SceneDepth;


	return Ret;
}





FGBufferData DecodeGBufferDataUV(float2 UV, bool bGetNormalizedNormal = true)
{
	float CustomNativeDepth = Texture2DSampleLevel(SceneTexturesStruct_CustomDepthTexture,  SceneTexturesStruct_PointClampSampler , UV, 0).r;
	int2 IntUV = (int2)trunc(UV * View_BufferSizeAndInvSize.xy);
	uint CustomStencil = SceneTexturesStruct_CustomStencilTexture.Load(int3(IntUV, 0))  .g ;
	float SceneDepth = CalcSceneDepth(UV);
	float4 AnisotropicData = Texture2DSampleLevel(SceneTexturesStruct_GBufferFTexture,  SceneTexturesStruct_PointClampSampler , UV, 0).xyzw;

	float4 InMRT1 = Texture2DSampleLevel(SceneTexturesStruct_GBufferATexture,  SceneTexturesStruct_PointClampSampler , UV, 0).xyzw;
	float4 InMRT2 = Texture2DSampleLevel(SceneTexturesStruct_GBufferBTexture,  SceneTexturesStruct_PointClampSampler , UV, 0).xyzw;
	float4 InMRT3 = Texture2DSampleLevel(SceneTexturesStruct_GBufferCTexture,  SceneTexturesStruct_PointClampSampler , UV, 0).xyzw;
	float4 InMRT4 = Texture2DSampleLevel(SceneTexturesStruct_GBufferDTexture,  SceneTexturesStruct_PointClampSampler , UV, 0).xyzw;
	float4 InMRT5 = Texture2DSampleLevel(SceneTexturesStruct_GBufferETexture,  SceneTexturesStruct_PointClampSampler , UV, 0).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,

		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromSceneColorUV(UV));

	return Ret;
}



FGBufferData DecodeGBufferDataUint(uint2 PixelPos, bool bGetNormalizedNormal = true)
{
	float CustomNativeDepth = SceneTexturesStruct_CustomDepthTexture.Load(int3(PixelPos, 0)).r;
	uint CustomStencil = SceneTexturesStruct_CustomStencilTexture.Load(int3(PixelPos, 0))  .g ;
	float SceneDepth = CalcSceneDepth(PixelPos);
	float4 AnisotropicData = SceneTexturesStruct_GBufferFTexture.Load(int3(PixelPos, 0)).xyzw;

	float4 InMRT1 = SceneTexturesStruct_GBufferATexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT2 = SceneTexturesStruct_GBufferBTexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT3 = SceneTexturesStruct_GBufferCTexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT4 = SceneTexturesStruct_GBufferDTexture.Load(int3(PixelPos, 0)).xyzw;
	float4 InMRT5 = SceneTexturesStruct_GBufferETexture.Load(int3(PixelPos, 0)).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,

		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromPixelPos(PixelPos));

	return Ret;
}



FGBufferData DecodeGBufferDataSceneTextures(float2 UV, bool bGetNormalizedNormal = true)
{
	uint CustomStencil = 0;
	float CustomNativeDepth = 0;
	float DeviceZ = SampleDeviceZFromSceneTexturesTempCopy(UV);
	float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	float4 AnisotropicData = GBufferFTexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).xyzw;

	float4 InMRT1 = GBufferATexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).xyzw;
	float4 InMRT2 = GBufferBTexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).xyzw;
	float4 InMRT3 = GBufferCTexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).xyzw;
	float4 InMRT4 = GBufferDTexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).xyzw;
	float4 InMRT5 = GBufferETexture.SampleLevel( View_SharedPointClampedSampler , UV, 0).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,

		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromSceneColorUV(UV));

	return Ret;
}



FGBufferData DecodeGBufferDataSceneTexturesLoad(uint2 PixelCoord, bool bGetNormalizedNormal = true)
{
	uint CustomStencil = 0;
	float CustomNativeDepth = 0;
	float DeviceZ = SceneDepthTexture.Load(int3(PixelCoord, 0)).r;
	float SceneDepth = ConvertFromDeviceZ(DeviceZ);
	float4 AnisotropicData = GBufferFTexture.Load(int3(PixelCoord, 0)).xyzw;

	float4 InMRT1 = GBufferATexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT2 = GBufferBTexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT3 = GBufferCTexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT4 = GBufferDTexture.Load(int3(PixelCoord, 0)).xyzw;
	float4 InMRT5 = GBufferETexture.Load(int3(PixelCoord, 0)).xyzw;

	FGBufferData Ret = DecodeGBufferDataDirect(InMRT1,
		InMRT2,
		InMRT3,
		InMRT4,
		InMRT5,

		CustomNativeDepth,
		AnisotropicData,
		CustomStencil,
		SceneDepth,
		bGetNormalizedNormal,
		CheckerFromPixelPos(PixelCoord));

	return Ret;
}
#line 432 "/Engine/Private/DeferredShadingCommon.ush"


struct FScreenSpaceData
{

	FGBufferData GBuffer;

	float AmbientOcclusion;
};


void SetGBufferForUnlit(out float4 OutGBufferB)
{
	OutGBufferB = 0;
	OutGBufferB.a = EncodeShadingModelIdAndSelectiveOutputMask( 0 , 0);
}



float4 ComputeIndirectLightingSampleE(uint2 TracingPixelCoord, uint TracingRayIndex, uint TracingRayCount)
{

	uint2 Seed0 = Rand3DPCG16(int3(TracingPixelCoord, View_StateFrameIndexMod8)).xy;
	uint2 Seed1 = Rand3DPCG16(int3(TracingPixelCoord + 17, View_StateFrameIndexMod8)).xy;

	return float4(
		Hammersley16(TracingRayIndex, TracingRayCount, Seed0),
		Hammersley16(TracingRayIndex, TracingRayCount, Seed1));
}



void EncodeGBuffer(
	FGBufferData GBuffer,
	out float4 OutGBufferA,
	out float4 OutGBufferB,
	out float4 OutGBufferC,
	out float4 OutGBufferD,
	out float4 OutGBufferE,
	out float4 OutGBufferVelocity,
	float QuantizationBias = 0
	)
{
	if (GBuffer.ShadingModelID ==  0 )
	{
		OutGBufferA = 0;
		SetGBufferForUnlit(OutGBufferB);
		OutGBufferC = 0;
		OutGBufferD = 0;
		OutGBufferE = 0;
	}
	else
	{





		OutGBufferA.rgb = EncodeNormal( GBuffer.WorldNormal );
		OutGBufferA.a = GBuffer.PerObjectGBufferData;
#line 502 "/Engine/Private/DeferredShadingCommon.ush"
		OutGBufferB.r = GBuffer.Metallic;
		OutGBufferB.g = GBuffer.Specular;
		OutGBufferB.b = GBuffer.Roughness;
		OutGBufferB.a = EncodeShadingModelIdAndSelectiveOutputMask(GBuffer.ShadingModelID, GBuffer.SelectiveOutputMask);

		OutGBufferC.rgb = EncodeBaseColor( GBuffer.BaseColor );





		OutGBufferC.a = EncodeIndirectIrradiance(GBuffer.IndirectIrradiance * GBuffer.GBufferAO) + QuantizationBias * (1.0 / 255.0);
#line 518 "/Engine/Private/DeferredShadingCommon.ush"
		OutGBufferD = GBuffer.CustomData;
		OutGBufferE = GBuffer.PrecomputedShadowFactors;
	}




	OutGBufferVelocity = 0;

}




bool AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float Specular, bool bChecker)
{





	const bool bCheckerboardRequired = View_bSubsurfacePostprocessEnabled > 0 && View_bCheckerboardSubsurfaceProfileRendering > 0;
	BaseColor = View_bSubsurfacePostprocessEnabled ? float3(1, 1, 1) : BaseColor;

	if (bCheckerboardRequired)
	{


		BaseColor = bChecker;
		Specular *= !bChecker;
	}
	return bCheckerboardRequired;
}
void AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(inout float3 BaseColor, inout float3 SpecularColor, inout float Specular, bool bChecker)
{
	const bool bCheckerboardRequired = AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(BaseColor, Specular, bChecker);
	if (bCheckerboardRequired)
	{

		SpecularColor *= !bChecker;
	}
}



FGBufferData DecodeGBufferData(
	float4 InGBufferA,
	float4 InGBufferB,
	float4 InGBufferC,
	float4 InGBufferD,
	float4 InGBufferE,
	float4 InGBufferF,
	float4 InGBufferVelocity,
	float CustomNativeDepth,
	uint CustomStencil,
	float SceneDepth,
	bool bGetNormalizedNormal,
	bool bChecker)
{
	FGBufferData GBuffer;

	GBuffer.WorldNormal = DecodeNormal( InGBufferA.xyz );
	if(bGetNormalizedNormal)
	{
		GBuffer.WorldNormal = normalize(GBuffer.WorldNormal);
	}

	GBuffer.PerObjectGBufferData = InGBufferA.a;
	GBuffer.Metallic = InGBufferB.r;
	GBuffer.Specular = InGBufferB.g;
	GBuffer.Roughness = InGBufferB.b;



	GBuffer.ShadingModelID = DecodeShadingModelId(InGBufferB.a);
	GBuffer.SelectiveOutputMask = DecodeSelectiveOutputMask(InGBufferB.a);

	GBuffer.BaseColor = DecodeBaseColor(InGBufferC.rgb);






	GBuffer.GBufferAO = 1;
	GBuffer.DiffuseIndirectSampleOcclusion = 0x0;
	GBuffer.IndirectIrradiance = DecodeIndirectIrradiance(InGBufferC.a);
#line 611 "/Engine/Private/DeferredShadingCommon.ush"
	GBuffer.CustomData = HasCustomGBufferData(GBuffer.ShadingModelID) ? InGBufferD : 0;

	GBuffer.PrecomputedShadowFactors = !(GBuffer.SelectiveOutputMask &  (1 << 5) ) ? InGBufferE : ((GBuffer.SelectiveOutputMask &  (1 << 6) ) ? 0 : 1);
	GBuffer.CustomDepth = ConvertFromDeviceZ(CustomNativeDepth);
	GBuffer.CustomStencil = CustomStencil;
	GBuffer.Depth = SceneDepth;

	GBuffer.StoredBaseColor = GBuffer.BaseColor;
	GBuffer.StoredMetallic = GBuffer.Metallic;
	GBuffer.StoredSpecular = GBuffer.Specular;

	[flatten]
	if( GBuffer.ShadingModelID ==  9  )
	{
		GBuffer.Metallic = 0.0;
#line 629 "/Engine/Private/DeferredShadingCommon.ush"
	}


	{
		GBuffer.SpecularColor = ComputeF0(GBuffer.Specular, GBuffer.BaseColor, GBuffer.Metallic);

		if (UseSubsurfaceProfile(GBuffer.ShadingModelID))
		{
			AdjustBaseColorAndSpecularColorForSubsurfaceProfileLighting(GBuffer.BaseColor, GBuffer.SpecularColor, GBuffer.Specular, bChecker);
		}

		GBuffer.DiffuseColor = GBuffer.BaseColor - GBuffer.BaseColor * GBuffer.Metallic;


		{

			GBuffer.DiffuseColor = GBuffer.DiffuseColor * View_DiffuseOverrideParameter.www + View_DiffuseOverrideParameter.xyz;
			GBuffer.SpecularColor = GBuffer.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
		}

	}

	{
		bool bHasAnisoProp = HasAnisotropy(GBuffer.SelectiveOutputMask);

		GBuffer.WorldTangent = bHasAnisoProp ? DecodeNormal(InGBufferF.rgb) : 0;
		GBuffer.Anisotropy = bHasAnisoProp ? InGBufferF.a * 2.0f - 1.0f : 0;

		if (bGetNormalizedNormal && bHasAnisoProp)
		{
			GBuffer.WorldTangent = normalize(GBuffer.WorldTangent);
		}
	}

	GBuffer.Velocity = !(GBuffer.SelectiveOutputMask &  (1 << 7) ) ? InGBufferVelocity : 0;

	return GBuffer;
}

float3 ExtractSubsurfaceColor(FGBufferData BufferData)
{
	return Square(BufferData.CustomData.rgb);
}

uint ExtractSubsurfaceProfileInt(float ProfileNormFloat)
{
	return uint(ProfileNormFloat * 255.0f + 0.5f);
}

uint ExtractSubsurfaceProfileInt(FGBufferData BufferData)
{
	return ExtractSubsurfaceProfileInt(BufferData.CustomData.r);
}





	FGBufferData GetGBufferDataUint(uint2 PixelPos, bool bGetNormalizedNormal = true)
	{

		return DecodeGBufferDataUint(PixelPos,bGetNormalizedNormal);
#line 717 "/Engine/Private/DeferredShadingCommon.ush"
	}


	FScreenSpaceData GetScreenSpaceDataUint(uint2 PixelPos, bool bGetNormalizedNormal = true)
	{
		FScreenSpaceData Out;

		Out.GBuffer = GetGBufferDataUint(PixelPos, bGetNormalizedNormal);

		float4 ScreenSpaceAO = Texture2DSampleLevel(SceneTexturesStruct_ScreenSpaceAOTexture,  SceneTexturesStruct_PointClampSampler , (PixelPos + 0.5f) * View_BufferSizeAndInvSize.zw, 0);
		Out.AmbientOcclusion = ScreenSpaceAO.r;

		return Out;
	}







FGBufferData GetGBufferDataFromSceneTextures(float2 UV, bool bGetNormalizedNormal = true)
{

	return DecodeGBufferDataSceneTextures(UV,bGetNormalizedNormal);
#line 760 "/Engine/Private/DeferredShadingCommon.ush"
}


uint GetSceneLightingChannel(uint2 PixelCoord)
{
	[branch]
	if (bSceneLightingChannelsValid)
	{
		return SceneLightingChannels.Load(uint3(PixelCoord, 0)).x;
	}
	return ~0;
}




FGBufferData GetGBufferData(float2 UV, bool bGetNormalizedNormal = true)
{

	return DecodeGBufferDataUV(UV,bGetNormalizedNormal);
#line 808 "/Engine/Private/DeferredShadingCommon.ush"
}


uint GetShadingModelId(float2 UV)
{
	return DecodeShadingModelId(Texture2DSampleLevel(SceneTexturesStruct_GBufferBTexture,  SceneTexturesStruct_PointClampSampler , UV, 0).a);
}


FScreenSpaceData GetScreenSpaceData(float2 UV, bool bGetNormalizedNormal = true)
{
	FScreenSpaceData Out;

	Out.GBuffer = GetGBufferData(UV, bGetNormalizedNormal);
	float4 ScreenSpaceAO = Texture2DSampleLevel(SceneTexturesStruct_ScreenSpaceAOTexture,  SceneTexturesStruct_PointClampSampler , UV, 0);

	Out.AmbientOcclusion = ScreenSpaceAO.r;

	return Out;
}



float3 AOMultiBounce(float3 BaseColor, float AO)
{
	float3 a = 2.0404 * BaseColor - 0.3324;
	float3 b = -4.7951 * BaseColor + 0.6417;
	float3 c = 2.7552 * BaseColor + 0.6903;
	return max(AO, ((AO * a + b) * AO + c) * AO);
}
#line 22 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/DBufferDecalShared.ush"
#line 10 "/Engine/Private/DBufferDecalShared.ush"
struct FDBufferData
{

	float3 PreMulColor;

	float ColorOpacity;


	float3 PreMulWorldNormal;

	float NormalOpacity;


	float PreMulRoughness;

	float PreMulMetallic;

	float PreMulSpecular;

	float RoughnessOpacity;
};



void EncodeDBufferData(FGBufferData GBufferData, float3 MultiOpacity,
	out float4 DBufferA,
	out float4 DBufferB,
	out float4 DBufferC)
{

	DBufferA = float4(GBufferData.BaseColor, MultiOpacity.x);


	DBufferB = float4(GBufferData.WorldNormal * 0.5f + 128.0f/255.0f, MultiOpacity.y);


	DBufferC = float4(GBufferData.Metallic, GBufferData.Specular, GBufferData.Roughness, MultiOpacity.z);
}


FDBufferData DecodeDBufferData(
	float4 DBufferA,
	float4 DBufferB,
	float4 DBufferC)
{
	FDBufferData ret;


	ret.PreMulColor = DBufferA.rgb;
	ret.ColorOpacity = DBufferA.a;


	ret.PreMulWorldNormal = DBufferB.rgb * 2 - (256.0 / 255.0);
	ret.NormalOpacity = DBufferB.a;


	ret.PreMulMetallic = DBufferC.r;
	ret.PreMulSpecular = DBufferC.g;
	ret.PreMulRoughness = DBufferC.b;
	ret.RoughnessOpacity = DBufferC.a;

	return ret;
}
#line 87 "/Engine/Private/DBufferDecalShared.ush"
uint GetDBufferTargetMask(uint2 PixelPos)
{








		return 0x07;
#line 103 "/Engine/Private/DBufferDecalShared.ush"
}


FDBufferData GetDBufferData(float2 BufferUV, uint RTMaskBit)
{

	float4 DBufferA = float4(0.0, 0.0, 0.0, 1.0);
	float4 DBufferB = float4(128.0f / 255.0f, 128.f / 255.5f, 128.f / 255.5f, 1.0);
	float4 DBufferC = float4(0.0, 0.0, 0.0, 1.0);


	[branch]
	if (RTMaskBit & 0x1)
	{
		DBufferA = Texture2DSampleLevel(OpaqueBasePass_DBufferATexture,  OpaqueBasePass_DBufferATextureSampler , BufferUV, 0);
	}

	[branch]
	if (RTMaskBit & 0x2)
	{
		DBufferB = Texture2DSampleLevel(OpaqueBasePass_DBufferBTexture,  OpaqueBasePass_DBufferATextureSampler , BufferUV, 0);
	}

	[branch]
	if (RTMaskBit & 0x4)
	{
		DBufferC = Texture2DSampleLevel(OpaqueBasePass_DBufferCTexture,  OpaqueBasePass_DBufferATextureSampler , BufferUV, 0);
	}


	return DecodeDBufferData(DBufferA, DBufferB, DBufferC);
}


void ApplyDBufferData(
	FDBufferData DBufferData, inout float3 WorldNormal, inout float3 SubsurfaceColor, inout float Roughness,
	inout float3 BaseColor, inout float Metallic, inout float Specular )
{

	BaseColor = BaseColor * DBufferData.ColorOpacity + DBufferData.PreMulColor;
	SubsurfaceColor *= DBufferData.ColorOpacity;




	WorldNormal = normalize(WorldNormal * DBufferData.NormalOpacity + DBufferData.PreMulWorldNormal);



	Roughness = Roughness * DBufferData.RoughnessOpacity + DBufferData.PreMulRoughness;
	Metallic = Metallic * DBufferData.RoughnessOpacity + DBufferData.PreMulMetallic;
	Specular = Specular * DBufferData.RoughnessOpacity + DBufferData.PreMulSpecular;

}
#line 23 "/Engine/Generated/Material.ush"
#line 93 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/PaniniProjection.ush"
#line 43 "/Engine/Private/PaniniProjection.ush"
float2 PaniniProjection(float2 OM, float d, float s)
{
	float PaniniDirectionXZInvLength = rsqrt(1.0f + OM.x * OM.x);
	float SinPhi = OM.x * PaniniDirectionXZInvLength;
	float TanTheta = OM.y * PaniniDirectionXZInvLength;
	float CosPhi = sqrt(1.0f - SinPhi * SinPhi);
	float S = (d + 1.0f) / (d + CosPhi);

	return S * float2(SinPhi, lerp(TanTheta, TanTheta / CosPhi, s));
}
#line 94 "/Engine/Generated/Material.ush"
#line 1 "/Engine/Private/DBufferNormalReprojection.ush"
#line 121 "/Engine/Private/DBufferNormalReprojection.ush"
float4 GetDBufferReprojectedWorldNormal(float2 UV, float3 FallbackNormal)
{
	return float4(FallbackNormal.xyz,1.0);
}
#line 95 "/Engine/Generated/Material.ush"
#line 151 "/Engine/Generated/Material.ush"
struct FStrataData
{
	uint Dummy;
};
FStrataData GetInitialisedStrataData() { return (FStrataData)0; }
#line 161 "/Engine/Generated/Material.ush"
struct FMaterialParticleParameters
{

	float  RelativeTime;

	float  MotionBlurFade;

	float  Random;

	float4  Velocity;

	float4  Color;

	float4 TranslatedWorldPositionAndSize;

	float4  MacroUV;
#line 182 "/Engine/Generated/Material.ush"
	float4  DynamicParameter;
#line 197 "/Engine/Generated/Material.ush"
	FLWCMatrix ParticleToWorld;


	FLWCInverseMatrix WorldToParticle;
#line 210 "/Engine/Generated/Material.ush"
	float2 Size;
};

float4 GetDynamicParameter(FMaterialParticleParameters Parameters, float4 Default, int ParameterIndex=0)
{
#line 238 "/Engine/Generated/Material.ush"
	return Default;

}

struct FMaterialAttributes
{
	float3 BaseColor;
	float Metallic;
	float Specular;
	float Roughness;
	float Anisotropy;
	float3 EmissiveColor;
	float Opacity;
	float OpacityMask;
	float3 Normal;
	float3 Tangent;
	float3 WorldPositionOffset;
	float3 SubsurfaceColor;
	float ClearCoat;
	float ClearCoatRoughness;
	float AmbientOcclusion;
	float2 Refraction;
	float PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;
	float2 CustomizedUV0;
	float2 CustomizedUV1;
	float2 CustomizedUV2;
	float2 CustomizedUV3;
	float2 CustomizedUV4;
	float2 CustomizedUV5;
	float2 CustomizedUV6;
	float2 CustomizedUV7;
	float3 BentNormal;
	float3 ClearCoatBottomNormal;
	float3 CustomEyeTangent;

};


FMaterialAttributes FMaterialAttributes_SetBaseColor(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.BaseColor = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetMetallic(FMaterialAttributes InAttributes, float InValue) { InAttributes.Metallic = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetSpecular(FMaterialAttributes InAttributes, float InValue) { InAttributes.Specular = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetRoughness(FMaterialAttributes InAttributes, float InValue) { InAttributes.Roughness = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetAnisotropy(FMaterialAttributes InAttributes, float InValue) { InAttributes.Anisotropy = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetEmissiveColor(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.EmissiveColor = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetOpacity(FMaterialAttributes InAttributes, float InValue) { InAttributes.Opacity = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetOpacityMask(FMaterialAttributes InAttributes, float InValue) { InAttributes.OpacityMask = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetNormal(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.Normal = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetTangent(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.Tangent = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetWorldPositionOffset(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.WorldPositionOffset = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetSubsurfaceColor(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.SubsurfaceColor = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetClearCoat(FMaterialAttributes InAttributes, float InValue) { InAttributes.ClearCoat = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetClearCoatRoughness(FMaterialAttributes InAttributes, float InValue) { InAttributes.ClearCoatRoughness = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetAmbientOcclusion(FMaterialAttributes InAttributes, float InValue) { InAttributes.AmbientOcclusion = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetRefraction(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.Refraction = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetPixelDepthOffset(FMaterialAttributes InAttributes, float InValue) { InAttributes.PixelDepthOffset = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetShadingModel(FMaterialAttributes InAttributes, uint InValue) { InAttributes.ShadingModel = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetFrontMaterial(FMaterialAttributes InAttributes, FStrataData InValue) { InAttributes.FrontMaterial = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV0(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV0 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV1(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV1 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV2(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV2 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV3(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV3 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV4(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV4 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV5(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV5 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV6(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV6 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomizedUV7(FMaterialAttributes InAttributes, float2 InValue) { InAttributes.CustomizedUV7 = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetBentNormal(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.BentNormal = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetClearCoatBottomNormal(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.ClearCoatBottomNormal = InValue; return InAttributes; }
FMaterialAttributes FMaterialAttributes_SetCustomEyeTangent(FMaterialAttributes InAttributes, float3 InValue) { InAttributes.CustomEyeTangent = InValue; return InAttributes; }
#line 313 "/Engine/Generated/Material.ush"
struct FPixelMaterialInputs
{
	float3  EmissiveColor;
	float  Opacity;
	float  OpacityMask;
	float3  BaseColor;
	float  Metallic;
	float  Specular;
	float  Roughness;
	float  Anisotropy;
	float3  Normal;
	float3  Tangent;
	float4  Subsurface;
	float  AmbientOcclusion;
	float2  Refraction;
	float  PixelDepthOffset;
	uint ShadingModel;
	FStrataData FrontMaterial;

};
#line 338 "/Engine/Generated/Material.ush"
struct FMaterialPixelParameters
{

	float2 TexCoords[ 1 ];



	float4  VertexColor;


	float3  WorldNormal;


	float3  WorldTangent;


	float3  ReflectionVector;


	float3  CameraVector;


	float3  LightVector;
#line 367 "/Engine/Generated/Material.ush"
	float4 SvPosition;


	float4 ScreenPosition;
#line 376 "/Engine/Generated/Material.ush"
	float2 ViewBufferUV;
#line 382 "/Engine/Generated/Material.ush"
	float  UnMirrored;

	float  TwoSidedSign;
#line 390 "/Engine/Generated/Material.ush"
	float3x3  TangentToWorld;
#line 401 "/Engine/Generated/Material.ush"
	FLWCVector3 AbsoluteWorldPosition;
#line 406 "/Engine/Generated/Material.ush"
	float3 WorldPosition_CamRelative;
#line 412 "/Engine/Generated/Material.ush"
	FLWCVector3 WorldPosition_NoOffsets;
#line 418 "/Engine/Generated/Material.ush"
	float3 WorldPosition_NoOffsets_CamRelative;


	float3  LightingPositionOffset;


	float3 WorldPosition_DDX;
	float3 WorldPosition_DDY;
	float4 VertexColor_DDX;
	float4 VertexColor_DDY;
	float4 ScreenPosition_DDX;
	float4 ScreenPosition_DDY;


	float2 TexCoords_DDX[ 1 ];
	float2 TexCoords_DDY[ 1 ];


	float AOMaterialMask;
#line 449 "/Engine/Generated/Material.ush"
	uint PrimitiveId;
#line 480 "/Engine/Generated/Material.ush"
	FMaterialParticleParameters Particle;
#line 500 "/Engine/Generated/Material.ush"
	uint Dummy;
#line 522 "/Engine/Generated/Material.ush"
};
#line 538 "/Engine/Generated/Material.ush"
FMaterialPixelParameters MakeInitializedMaterialPixelParameters()
{
	FMaterialPixelParameters MPP;
	MPP = (FMaterialPixelParameters)0;
	MPP.TangentToWorld = float3x3(1,0,0,0,1,0,0,0,1);
	return MPP;
}
#line 550 "/Engine/Generated/Material.ush"
struct FMaterialVertexParameters
{



	float3 WorldPosition;

	float3x3  TangentToWorld;
#line 579 "/Engine/Generated/Material.ush"
	FLWCMatrix PrevFrameLocalToWorld;

	float3 PreSkinnedPosition;
	float3 PreSkinnedNormal;

	float4  VertexColor;

	float2 TexCoords[ 1 ];
#line 593 "/Engine/Generated/Material.ush"
	FMaterialParticleParameters Particle;
#line 599 "/Engine/Generated/Material.ush"
	FMaterialAttributes MaterialVertexAttributes;


	FSceneDataIntermediates SceneData;



	uint PrimitiveId;
};

FPrimitiveSceneData GetPrimitiveData(FMaterialVertexParameters Parameters)
{
	return Parameters.SceneData.Primitive;
}

FPrimitiveSceneData GetPrimitiveData(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters.PrimitiveId);
}
#line 622 "/Engine/Generated/Material.ush"
float3x3  GetLocalToWorld3x3(FMaterialVertexParameters Parameters)
{
	return LWCToFloat3x3(GetPrimitiveData(Parameters).LocalToWorld);
}

float3x3  GetLocalToWorld3x3(FMaterialPixelParameters Parameters)
{
	return LWCToFloat3x3(GetPrimitiveData(Parameters).LocalToWorld);
}

float3x3  GetLocalToWorld3x3()
{
	return LWCToFloat3x3(GetPrimitiveDataFromUniformBuffer().LocalToWorld);
}

FLWCInverseMatrix GetWorldToInstance(FMaterialVertexParameters Parameters)
{



		return GetPrimitiveData(Parameters).WorldToLocal;

}

FLWCInverseMatrix GetWorldToInstance(FMaterialPixelParameters Parameters)
{



		return GetPrimitiveData(Parameters).WorldToLocal;

}

FLWCMatrix GetInstanceToWorld(FMaterialVertexParameters Parameters)
{



		return GetPrimitiveData(Parameters).LocalToWorld;

}

FLWCMatrix GetInstanceToWorld(FMaterialPixelParameters Parameters)
{



		return GetPrimitiveData(Parameters).LocalToWorld;

}

float3 GetTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{
	return Parameters.WorldPosition;
}

float3 GetPrevTranslatedWorldPosition(FMaterialVertexParameters Parameters)
{





	return GetTranslatedWorldPosition(Parameters);
}

FLWCVector3 GetWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetTranslatedWorldPosition(Parameters), ResolvedView.PreViewTranslation);
}

FLWCVector3 GetPrevWorldPosition(FMaterialVertexParameters Parameters)
{
	return LWCSubtract(GetPrevTranslatedWorldPosition(Parameters), ResolvedView.PrevPreViewTranslation);
}

FLWCVector3 GetWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.AbsoluteWorldPosition;
}

FLWCVector3 GetWorldPosition_NoMaterialOffsets(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_NoOffsets;
}

float3 GetTranslatedWorldPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_CamRelative;
}

float3 GetTranslatedWorldPosition_NoMaterialOffsets(FMaterialPixelParameters Parameters)
{
	return Parameters.WorldPosition_NoOffsets_CamRelative;
}

float4 GetScreenPosition(FMaterialVertexParameters Parameters)
{
	return mul(float4(Parameters.WorldPosition, 1.0f), ResolvedView.TranslatedWorldToClip);
}

float4 GetScreenPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.ScreenPosition;
}


float GetPixelDepth(FMaterialVertexParameters Parameters)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{

		return GetScreenPosition(Parameters).w;
	}
	else
	{

		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}

float GetPixelDepth(FMaterialPixelParameters Parameters)
{
	[flatten]
	if (View_ViewToClip[3][3] < 1.0f)
	{

		return GetScreenPosition(Parameters).w;
	}
	else
	{

		return ConvertFromDeviceZ(GetScreenPosition(Parameters).z);
	}
}

float2 GetSceneTextureUV(FMaterialVertexParameters Parameters)
{
	return ScreenAlignedPosition(GetScreenPosition(Parameters));
}

float2 GetSceneTextureUV(FMaterialPixelParameters Parameters)
{
	return SvPositionToBufferUV(Parameters.SvPosition);
}

float2 GetViewportUV(FMaterialVertexParameters Parameters)
{



	return BufferUVToViewportUV(GetSceneTextureUV(Parameters));

}

float2 GetPixelPosition(FMaterialVertexParameters Parameters)
{
	return GetViewportUV(Parameters) * View_ViewSizeAndInvSize.xy;
}
#line 798 "/Engine/Generated/Material.ush"
float2 GetPixelPosition(FMaterialPixelParameters Parameters)
{
	return Parameters.SvPosition.xy - float2(View_ViewRectMin.xy);
}

float2 GetViewportUV(FMaterialPixelParameters Parameters)
{
	return SvPositionToViewportUV(Parameters.SvPosition);
}



float GetWaterWaveParamIndex(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float GetWaterWaveParamIndex(FMaterialVertexParameters Parameters)
{



	return 0.0f;

}


bool IsPostProcessInputSceneTexture(const uint SceneTextureId)
{
	return (SceneTextureId >=  14  && SceneTextureId <=  20 );
}


float4 GetSceneTextureViewSize(const uint SceneTextureId)
{
#line 857 "/Engine/Generated/Material.ush"
	return ResolvedView.ViewSizeAndInvSize;
}


float4 GetSceneTextureUVMinMax(const uint SceneTextureId)
{
#line 884 "/Engine/Generated/Material.ush"
	return View_BufferBilinearUVMinMax;
}


float2  ViewportUVToSceneTextureUV( float2  ViewportUV, const uint SceneTextureId)
{
#line 911 "/Engine/Generated/Material.ush"
	return ViewportUVToBufferUV(ViewportUV);
}


float2  ClampSceneTextureUV( float2  BufferUV, const uint SceneTextureId)
{
	float4 MinMax = GetSceneTextureUVMinMax(SceneTextureId);

	return clamp(BufferUV, MinMax.xy, MinMax.zw);
}


float2  GetDefaultSceneTextureUV(FMaterialVertexParameters Parameters, const uint SceneTextureId)
{
	return GetSceneTextureUV(Parameters);
}


float2  GetDefaultSceneTextureUV(FMaterialPixelParameters Parameters, const uint SceneTextureId)
{



		return GetSceneTextureUV(Parameters);

}
#line 1000 "/Engine/Generated/Material.ush"
	float2 ComputeDecalDDX(FMaterialPixelParameters Parameters)
	{
		return 0.0f;
	}

	float2 ComputeDecalDDY(FMaterialPixelParameters Parameters)
	{
		return 0.0f;
	}

	float ComputeDecalMipmapLevel(FMaterialPixelParameters Parameters, float2 TextureSize)
	{
		return 0.0f;
	}
#line 1022 "/Engine/Generated/Material.ush"
	FLWCVector3 GetActorWorldPosition(FMaterialVertexParameters Parameters)
	{



		return GetPrimitiveData(Parameters).ActorWorldPosition;

	}

	FLWCVector3 GetActorWorldPosition(FMaterialPixelParameters Parameters)
	{



		return GetPrimitiveData(Parameters).ActorWorldPosition;

	}

	float3 GetObjectOrientation(FMaterialVertexParameters Parameters)
	{



		return GetPrimitiveData(Parameters).ObjectOrientation;

	}

	float3 GetObjectOrientation(FMaterialPixelParameters Parameters)
	{



		return GetPrimitiveData(Parameters).ObjectOrientation;

	}







	float DecalLifetimeOpacity()
	{
		return 0.0f;
	}



float GetPerInstanceCustomData(FMaterialPixelParameters Parameters, int Index, float DefaultValue)
{
#line 1084 "/Engine/Generated/Material.ush"
	return DefaultValue;
}



float GetPerInstanceCustomData(FMaterialVertexParameters Parameters, int Index, float DefaultValue)
{
#line 1111 "/Engine/Generated/Material.ush"
	return DefaultValue;
}



float3  GetPerInstanceCustomData3Vector(FMaterialPixelParameters Parameters, int Index,  float3  DefaultValue)
{
#line 1124 "/Engine/Generated/Material.ush"
	return DefaultValue;
}



float3  GetPerInstanceCustomData3Vector(FMaterialVertexParameters Parameters, int Index,  float3  DefaultValue)
{
#line 1149 "/Engine/Generated/Material.ush"
	return DefaultValue;
}


float3  TransformTangentVectorToView(FMaterialPixelParameters Parameters,  float3  InTangentVector)
{

	return mul(mul(InTangentVector, Parameters.TangentToWorld), ( float3x3 )ResolvedView.TranslatedWorldToView);
}


float3  TransformLocalVectorToWorld(FMaterialVertexParameters Parameters, float3  InLocalVector)
{



		return mul(InLocalVector, GetLocalToWorld3x3(Parameters));

}


float3  TransformLocalVectorToWorld(FMaterialPixelParameters Parameters, float3  InLocalVector)
{
	return mul(InLocalVector, GetLocalToWorld3x3(Parameters));
}


float3  TransformLocalVectorToPrevWorld(FMaterialVertexParameters Parameters, float3  InLocalVector)
{
	return LWCMultiplyVector(InLocalVector, Parameters.PrevFrameLocalToWorld);
}




FLWCVector3 TransformLocalPositionToWorld(FMaterialPixelParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, GetPrimitiveData(Parameters).LocalToWorld);
}


FLWCVector3 TransformLocalPositionToWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{



		return LWCMultiply(InLocalPosition, GetPrimitiveData(Parameters).LocalToWorld);

}


FLWCVector3 TransformLocalPositionToPrevWorld(FMaterialVertexParameters Parameters,float3 InLocalPosition)
{
	return LWCMultiply(InLocalPosition, Parameters.PrevFrameLocalToWorld);
}






FLWCVector3 GetObjectWorldPosition(FMaterialPixelParameters Parameters)
{
	return GetPrimitiveData(Parameters).ObjectWorldPosition;
}


FLWCVector3 GetObjectWorldPosition(FMaterialVertexParameters Parameters)
{



		return GetPrimitiveData(Parameters).ObjectWorldPosition;

}




float GetPerInstanceRandom(FMaterialVertexParameters Parameters)
{



	return 0.0;

}


float GetPerInstanceRandom(FMaterialPixelParameters Parameters)
{



	return 0.0;

}


float GetPerInstanceFadeAmount(FMaterialPixelParameters Parameters)
{



	return float(1.0);

}


float GetPerInstanceFadeAmount(FMaterialVertexParameters Parameters)
{



	return float(1.0);

}

float  GetDistanceCullFade()
{

	return saturate(ResolvedView.RealTime * PrimitiveFade_FadeTimeScaleBias.x + PrimitiveFade_FadeTimeScaleBias.y);
#line 1274 "/Engine/Generated/Material.ush"
}


float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, float3 PositionOnAxis, float3 Position)
{

	float3 ClosestPointOnAxis = PositionOnAxis + NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, Position - PositionOnAxis);

	float3 UAxis = Position - ClosestPointOnAxis;
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);

	float3 R = UAxis * CosAngle + VAxis * SinAngle;

	float3 RotatedPosition = ClosestPointOnAxis + R;

	return RotatedPosition - Position;
}
#line 1299 "/Engine/Generated/Material.ush"
float3 RotateAboutAxis(float4 NormalizedRotationAxisAndAngle, FLWCVector3 PositionOnAxis, FLWCVector3 Position)
{

	FLWCVector3 ClosestPointOnAxis = LWCAdd(PositionOnAxis, NormalizedRotationAxisAndAngle.xyz * dot(NormalizedRotationAxisAndAngle.xyz, LWCToFloat(LWCSubtract(Position, PositionOnAxis))));

	float3 UAxis = LWCToFloat(LWCSubtract(Position, ClosestPointOnAxis));
	float3 VAxis = cross(NormalizedRotationAxisAndAngle.xyz, UAxis);
	float CosAngle;
	float SinAngle;
	sincos(NormalizedRotationAxisAndAngle.w, SinAngle, CosAngle);

	float3 R = UAxis * CosAngle + VAxis * SinAngle;








	return R - UAxis;
}


float MaterialExpressionDepthOfFieldFunction(float SceneDepth, int FunctionValueIndex)
{


	if(FunctionValueIndex == 0)
	{
		return CalcUnfocusedPercentCustomBound(SceneDepth, 1, 1);
	}
	else if(FunctionValueIndex == 1)
	{
		return CalcUnfocusedPercentCustomBound(SceneDepth, 1, 0);
	}
	else if(FunctionValueIndex == 2)
	{
		return CalcUnfocusedPercentCustomBound(SceneDepth, 0, 1);
	}
	else if(FunctionValueIndex == 3)
	{

		return DepthToCoc(SceneDepth) * 2.0f;
	}
	return 0;
}


float3 MaterialExpressionBlackBody( float Temp )
{
	float u = ( 0.860117757f + 1.54118254e-4f * Temp + 1.28641212e-7f * Temp*Temp ) / ( 1.0f + 8.42420235e-4f * Temp + 7.08145163e-7f * Temp*Temp );
	float v = ( 0.317398726f + 4.22806245e-5f * Temp + 4.20481691e-8f * Temp*Temp ) / ( 1.0f - 2.89741816e-5f * Temp + 1.61456053e-7f * Temp*Temp );

	float x = 3*u / ( 2*u - 8*v + 4 );
	float y = 2*v / ( 2*u - 8*v + 4 );
	float z = 1 - x - y;

	float Y = 1;
	float X = Y/y * x;
	float Z = Y/y * z;

	float3x3 XYZtoRGB =
	{
		 3.2404542, -1.5371385, -0.4985314,
		-0.9692660, 1.8760108, 0.0415560,
		 0.0556434, -0.2040259, 1.0572252,
	};

	return mul( XYZtoRGB, float3( X, Y, Z ) ) * pow( 0.0004 * Temp, 4 );
}

float2 MaterialExpressionGetHairRootUV(FMaterialPixelParameters Parameters)
{





	return float2(0, 0);

}

float2 MaterialExpressionGetHairUV(FMaterialPixelParameters Parameters)
{





	return float2(0,0);

}

float2 MaterialExpressionGetHairDimensions(FMaterialPixelParameters Parameters)
{





	return float2(0, 0);

}

float MaterialExpressionGetHairSeed(FMaterialPixelParameters Parameters)
{





	return 0;

}

float3 MaterialExpressionGetHairBaseColor(FMaterialPixelParameters Parameters)
{





	return float3(0,0,0);

}

float MaterialExpressionGetHairRoughness(FMaterialPixelParameters Parameters)
{





	return 0;

}

float MaterialExpressionGetHairDepth(FMaterialVertexParameters Parameters)
{
	return 0;
}

float MaterialExpressionGetHairDepth(FMaterialPixelParameters Parameters)
{





	return 0;

}

float MaterialExpressionGetHairCoverage(FMaterialPixelParameters Parameters)
{





	return 0;

}

float3 MaterialExpressionGetHairTangent(FMaterialPixelParameters Parameters, bool bUseTangentSpace)
{





	return 0;

}

float2 MaterialExpressionGetAtlasUVs(FMaterialPixelParameters Parameters)
{





	return 0;


}

float4 MaterialExpressionGetHairAuxilaryData(FMaterialPixelParameters Parameters)
{



	return 0;

}

float MaterialExpressionGetHairGroupIndex(FMaterialPixelParameters Parameters)
{





	return 0;


}
float3 MaterialExpressionGetHairColorFromMelanin(float Melanin, float Redness, float3 DyeColor)
{
	return GetHairColorFromMelanin(Melanin, Redness, DyeColor);
}

float3 MaterialExpressionAtmosphericLightVector(FMaterialPixelParameters Parameters)
{
	return ResolvedView.AtmosphereLightDirection[0].xyz;
}

float3 MaterialExpressionAtmosphericLightColor(FMaterialPixelParameters Parameters)
{
	return ResolvedView.AtmosphereLightIlluminanceOnGroundPostTransmittance[0].rgb;
}

float3 MaterialExpressionSkyAtmosphereLightIlluminance(FMaterialPixelParameters Parameters, FLWCVector3 WorldPosition, uint LightIndex)
{










	return float3(0.0f, 0.0f, 0.0f);

}






float3 MaterialExpressionSkyAtmosphereLightDirection(FMaterialPixelParameters Parameters, uint LightIndex) {return float3(0.0f, 0.0f, 0.0f);}
float3 MaterialExpressionSkyAtmosphereLightDirection(FMaterialVertexParameters Parameters, uint LightIndex) {return float3(0.0f, 0.0f, 0.0f);}

float3 MaterialExpressionSkyAtmosphereLightDiskLuminance(FMaterialPixelParameters Parameters, uint LightIndex)
{
	float3 LightDiskLuminance = float3(0.0f, 0.0f, 0.0f);
#line 1561 "/Engine/Generated/Material.ush"
	return LightDiskLuminance;
}

float3 MaterialExpressionSkyAtmosphereViewLuminance(FMaterialPixelParameters Parameters)
{
#line 1588 "/Engine/Generated/Material.ush"
	return float3(0.0f, 0.0f, 0.0f);

}

float4 MaterialExpressionSkyAtmosphereAerialPerspective(FMaterialPixelParameters Parameters, FLWCVector3 WorldPosition)
{
#line 1614 "/Engine/Generated/Material.ush"
	return float4(0.0f, 0.0f, 0.0f, 1.0f);

}

float3 MaterialExpressionSkyAtmosphereDistantLightScatteredLuminance(FMaterialPixelParameters Parameters)
{




	return float3(0.0f, 0.0f, 0.0f);

}
#line 1632 "/Engine/Generated/Material.ush"
float MaterialExpressionSceneDepthWithoutWater(float2 ViewportUV, float FallbackDepth)
{






	return FallbackDepth;

}

float MaterialExpressionCloudSampleAltitude(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float MaterialExpressionCloudSampleAltitudeInLayer(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float MaterialExpressionCloudSampleNormAltitudeInLayer(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}

float3 MaterialExpressionVolumeSampleConservativeDensity(FMaterialPixelParameters Parameters)
{



	return float3(0.0f, 0.0f, 0.0f);

}

float MaterialExpressionVolumeSampleShadowSampleDistance(FMaterialPixelParameters Parameters)
{



	return 0.0f;

}



float3 GetSkyLightReflectionSupportingBlend(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness);
#line 1696 "/Engine/Generated/Material.ush"
float3 MaterialExpressionSkyLightEnvMapSample(float3 Direction, float Roughness)
{

	float SkyAverageBrightness = 1.0f;
	return GetSkyLightReflectionSupportingBlend(Direction, Roughness, SkyAverageBrightness);
#line 1706 "/Engine/Generated/Material.ush"
}
#line 1715 "/Engine/Generated/Material.ush"
float  UnMirror(  float  Coordinate, FMaterialPixelParameters Parameters )
{
	return ((Coordinate)*(Parameters.UnMirrored)*0.5+0.5);
}
#line 1723 "/Engine/Generated/Material.ush"
float2  UnMirrorU(  float2  UV, FMaterialPixelParameters Parameters )
{
	return  float2 (UnMirror(UV.x, Parameters), UV.y);
}
#line 1731 "/Engine/Generated/Material.ush"
float2  UnMirrorV(  float2  UV, FMaterialPixelParameters Parameters )
{
	return  float2 (UV.x, UnMirror(UV.y, Parameters));
}
#line 1739 "/Engine/Generated/Material.ush"
float2  UnMirrorUV(  float2  UV, FMaterialPixelParameters Parameters )
{
	return  float2 (UnMirror(UV.x, Parameters), UnMirror(UV.y, Parameters));
}
#line 1748 "/Engine/Generated/Material.ush"
float2  GetParticleMacroUV(FMaterialPixelParameters Parameters)
{
	return (Parameters.ScreenPosition.xy / Parameters.ScreenPosition.w - Parameters.Particle.MacroUV.xy) * Parameters.Particle.MacroUV.zw +  float2 (.5, .5);
}

float4  ProcessMaterialColorTextureLookup( float4  TextureValue)
{
	return TextureValue;
}

float4  ProcessMaterialVirtualColorTextureLookup( float4  TextureValue)
{
	TextureValue = ProcessMaterialColorTextureLookup(TextureValue);
#line 1765 "/Engine/Generated/Material.ush"
	return TextureValue;
}

float4  ProcessMaterialExternalTextureLookup( float4  TextureValue)
{



	return ProcessMaterialColorTextureLookup(TextureValue);

}

float4  ProcessMaterialLinearColorTextureLookup( float4  TextureValue)
{
	return TextureValue;
}

float4  ProcessMaterialGreyscaleTextureLookup( float4  TextureValue)
{



	float  GrayValue = TextureValue.r;
#line 1801 "/Engine/Generated/Material.ush"
	return GrayValue.rrrr;
}

float4  ProcessMaterialLinearGreyscaleTextureLookup( float4  TextureValue)
{



	return TextureValue.rrrr;
}

float4  ProcessMaterialAlphaTextureLookup( float4  TextureValue)
{



	return TextureValue.rrrr;
}


SamplerState GetMaterialSharedSampler(SamplerState TextureSampler, SamplerState SharedSampler)
{

	return SharedSampler;
#line 1830 "/Engine/Generated/Material.ush"
}


float3  ReflectionAboutCustomWorldNormal(FMaterialPixelParameters Parameters,  float3  WorldNormal, bool bNormalizeInputNormal)
{
	if (bNormalizeInputNormal)
	{
		WorldNormal = normalize(WorldNormal);
	}

	return -Parameters.CameraVector + WorldNormal * dot(WorldNormal, Parameters.CameraVector) * 2.0;
}
#line 1851 "/Engine/Generated/Material.ush"
float GetSphericalParticleOpacity(FMaterialPixelParameters Parameters, float Density)
{
	float Opacity = 0;
#line 1866 "/Engine/Generated/Material.ush"
	float3 ParticleTranslatedWorldPosition = LWCToFloat(LWCAdd(GetPrimitiveData(Parameters).ObjectWorldPosition, ResolvedView.PreViewTranslation));
	float ParticleRadius = max(0.000001f, GetPrimitiveData(Parameters).ObjectRadius);




	float RescaledDensity = Density / ParticleRadius;


	float DistanceToParticle = length(Parameters.WorldPosition_NoOffsets_CamRelative - ParticleTranslatedWorldPosition);

	[flatten]
	if (DistanceToParticle < ParticleRadius)
	{

		float HemisphericalDistance = sqrt(ParticleRadius * ParticleRadius - DistanceToParticle * DistanceToParticle);






		float NearDistance = Parameters.ScreenPosition.w - HemisphericalDistance;
		float FarDistance = Parameters.ScreenPosition.w + HemisphericalDistance;

		float SceneDepth = CalcSceneDepth(SvPositionToBufferUV(Parameters.SvPosition));
		FarDistance = min(SceneDepth, FarDistance);


		float DistanceThroughSphere = FarDistance - NearDistance;



		Opacity = saturate(1 - exp2(-RescaledDensity * (1 - DistanceToParticle / ParticleRadius) * DistanceThroughSphere));



		Opacity = lerp(0, Opacity, saturate((Parameters.ScreenPosition.w - ParticleRadius - ResolvedView.NearPlane) / ParticleRadius));

	}



	return Opacity;
}





float LWCApplyAddressModeWrap(FLWCScalar V)
{


	const float FracTile = frac( ((V).Tile)  *  2097152.00f );
	return FracTile + V.Offset;
}

float LWCApplyAddressModeMirror(FLWCScalar v)
{








	return LWCToFloat(v);
}

float LWCApplyAddressModeClamp(FLWCScalar v)
{


	return LWCToFloat(v);
}

float LWCApplyAddressMode(FLWCScalar v, uint AddressMode)
{
	if(AddressMode ==  1u ) return LWCApplyAddressModeWrap(v);
	else if(AddressMode ==  2u ) return LWCApplyAddressModeMirror(v);
	else return LWCApplyAddressModeClamp(v);
}
float2 LWCApplyAddressMode(FLWCVector2 UV, uint AddressX, uint AddressY)
{
	return float2(LWCApplyAddressMode( LWCGetComponent(UV, 0) , AddressX), LWCApplyAddressMode( LWCGetComponent(UV, 1) , AddressY));
}
float3 LWCApplyAddressMode(FLWCVector3 UV, uint AddressX, uint AddressY, uint AddressZ)
{
	return float3(LWCApplyAddressMode( LWCGetComponent(UV, 0) , AddressX), LWCApplyAddressMode( LWCGetComponent(UV, 1) , AddressY), LWCApplyAddressMode( LWCGetComponent(UV, 2) , AddressZ));
}

float2 RotateScaleOffsetTexCoords(float2 InTexCoords, float4 InRotationScale, float2 InOffset)
{
	return float2(dot(InTexCoords, InRotationScale.xy), dot(InTexCoords, InRotationScale.zw)) + InOffset;
}

FLWCVector2 RotateScaleOffsetTexCoords(FLWCVector2 InTexCoords, float4 InRotationScale, float2 InOffset)
{
	return LWCAdd(MakeLWCVector(LWCDot(InTexCoords, InRotationScale.xy), LWCDot(InTexCoords, InRotationScale.zw)), InOffset);
}
#line 2151 "/Engine/Generated/Material.ush"
float2  GetLightmapUVs(FMaterialPixelParameters Parameters)
{



	return  float2 (0,0);

}

float2  GetLightmapUVs_DDX(FMaterialPixelParameters Parameters)
{



	return  float2 (0, 0);

}

float2  GetLightmapUVs_DDY(FMaterialPixelParameters Parameters)
{



	return  float2 (0, 0);

}
#line 2370 "/Engine/Generated/Material.ush"
float3 DecodeSceneColorForMaterialNode(float2 ScreenUV)
{


	return float3(0.0f, 0.0f, 0.0f);
#line 2385 "/Engine/Generated/Material.ush"
}



float4 MaterialExpressionDBufferTextureLookup(float2 BufferUV, int DBufferTextureIndex)
{
	uint2 PixelPos = uint2(BufferUV * View_BufferSizeAndInvSize.xy);
	uint ValidDBufferTargetMask = GetDBufferTargetMask(PixelPos) & (1u << DBufferTextureIndex);

	FDBufferData DBufferData = GetDBufferData(BufferUV, ValidDBufferTargetMask);
	switch (DBufferTextureIndex)
	{
	case 0: return float4(DBufferData.PreMulColor, DBufferData.ColorOpacity);
	case 1: return float4(DBufferData.PreMulWorldNormal, DBufferData.NormalOpacity);
	case 2: return float4(DBufferData.PreMulRoughness, DBufferData.PreMulMetallic, DBufferData.PreMulSpecular, DBufferData.RoughnessOpacity);
	}

	return float4(0, 0, 0, 1);
}
#line 2429 "/Engine/Generated/Material.ush"
struct FLWCScalarDeriv
{
	FLWCScalar Value;
	float Ddx;
	float Ddy;
};

struct FLWCVector2Deriv
{
	FLWCVector2 Value;
	float2 Ddx;
	float2 Ddy;
};

struct FLWCVector3Deriv
{
	FLWCVector3 Value;
	float3 Ddx;
	float3 Ddy;
};

struct FLWCVector4Deriv
{
	FLWCVector4 Value;
	float4 Ddx;
	float4 Ddy;
};

FLWCVector3Deriv ConstructFLWCVector3Deriv(FLWCVector3 InValue,float3 InDdx,float3 InDdy)
{
	FLWCVector3Deriv Ret;
	Ret.Value = InValue;
	Ret.Ddx = InDdx;
	Ret.Ddy = InDdy;
	return Ret;
}

FloatDeriv ConstructConstantFloatDeriv(float Value)
{
	FloatDeriv Ret;
	Ret.Value = Value;
	Ret.Ddx = 0;
	Ret.Ddy = 0;
	return Ret;
}

FLWCScalarDeriv ConstructConstantFLWCScalarDeriv(FLWCScalar Value)
{
	FLWCScalarDeriv Ret;
	Ret.Value = Value;
	Ret.Ddx = 0;
	Ret.Ddy = 0;
	return Ret;
}

FLWCVector3Deriv ConstructConstantFLWCVector3Deriv(FLWCVector3 Value)
{
	FLWCVector3Deriv Ret;
	Ret.Value = Value;
	Ret.Ddx = 0;
	Ret.Ddy = 0;
	return Ret;
}

FloatDeriv2 Convert_FloatDeriv2_FloatDeriv(FloatDeriv Src)
{
	FloatDeriv2 Ret;
	Ret.Value = (( float2 )Src.Value);
	Ret.Ddx = (( float2 )Src.Ddx);
	Ret.Ddy = (( float2 )Src.Ddy);
	return Ret;
}

FLWCScalarDeriv Convert_FLWCScalarDeriv_FloatDeriv(FloatDeriv Src)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCPromote(Src.Value);
	Ret.Ddx = Src.Ddx;
	Ret.Ddy = Src.Ddy;
	return Ret;
}

FLWCScalarDeriv ExtractFLWCVector3Deriv_1(FLWCVector3Deriv InValue)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCGetComponent(InValue.Value, 0);
	Ret.Ddx = InValue.Ddx.x;
	Ret.Ddy = InValue.Ddy.x;
	return Ret;
}

FLWCScalarDeriv ExtractFLWCVector3Deriv_2(FLWCVector3Deriv InValue)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCGetComponent(InValue.Value, 1);
	Ret.Ddx = InValue.Ddx.y;
	Ret.Ddy = InValue.Ddy.y;
	return Ret;
}

FLWCScalarDeriv ExtractFLWCVector3Deriv_3(FLWCVector3Deriv InValue)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCGetComponent(InValue.Value, 2);
	Ret.Ddx = InValue.Ddx.z;
	Ret.Ddy = InValue.Ddy.z;
	return Ret;
}

FloatDeriv AddDeriv(FloatDeriv A, FloatDeriv B)
{
	FloatDeriv Ret;
	Ret.Value = A.Value + B.Value;
	Ret.Ddx = A.Ddx + B.Ddx;
	Ret.Ddy = A.Ddy + B.Ddy;
	return Ret;
}

FLWCScalarDeriv AddDerivLWC(FLWCScalarDeriv A, FLWCScalarDeriv B)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCAdd(A.Value, B.Value);
	Ret.Ddx = A.Ddx + B.Ddx;
	Ret.Ddy = A.Ddy + B.Ddy;
	return Ret;
}

FloatDeriv SubDeriv(FloatDeriv A, FloatDeriv B)
{
	FloatDeriv Ret;
	Ret.Value = A.Value - B.Value;
	Ret.Ddx = A.Ddx - B.Ddx;
	Ret.Ddy = A.Ddy - B.Ddy;
	return Ret;
}

FLWCScalarDeriv SubDerivLWC(FLWCScalarDeriv A, FLWCScalarDeriv B)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCSubtract(A.Value, B.Value);
	Ret.Ddx = A.Ddx - B.Ddx;
	Ret.Ddy = A.Ddy - B.Ddy;
	return Ret;
}

FLWCVector3Deriv SubDerivLWC(FLWCVector3Deriv A, FLWCVector3Deriv B)
{
	FLWCVector3Deriv Ret;
	Ret.Value = LWCSubtract(A.Value, B.Value);
	Ret.Ddx = A.Ddx - B.Ddx;
	Ret.Ddy = A.Ddy - B.Ddy;
	return Ret;
}

FloatDeriv MulDeriv(FloatDeriv A, FloatDeriv B)
{
	FloatDeriv Ret;
	Ret.Value = A.Value * B.Value;
	Ret.Ddx = A.Ddx * B.Value + A.Value * B.Ddx;
	Ret.Ddy = A.Ddy * B.Value + A.Value * B.Ddy;
	return Ret;
}

FloatDeriv2 MulDeriv(FloatDeriv2 A, FloatDeriv2 B)
{
	FloatDeriv2 Ret;
	Ret.Value = A.Value * B.Value;
	Ret.Ddx = A.Ddx * B.Value + A.Value * B.Ddx;
	Ret.Ddy = A.Ddy * B.Value + A.Value * B.Ddy;
	return Ret;
}

FLWCScalarDeriv MulDerivLWC(FLWCScalarDeriv A, FLWCScalarDeriv B)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCMultiply(A.Value, B.Value);
	Ret.Ddx = A.Ddx * LWCToFloat(B.Value) + LWCToFloat(A.Value) * B.Ddx;
	Ret.Ddy = A.Ddy * LWCToFloat(B.Value) + LWCToFloat(A.Value) * B.Ddy;
	return Ret;
}

FloatDeriv MaxDeriv(FloatDeriv A, FloatDeriv B)
{
	FloatDeriv Ret;
	bool Cmp = A.Value > B.Value;
	Ret.Value = Cmp ? A.Value : B.Value;
	Ret.Ddx = Cmp ? A.Ddx : B.Ddx;
	Ret.Ddy = Cmp ? A.Ddy : B.Ddy;
	return Ret;
}

FloatDeriv MinDeriv(FloatDeriv A, FloatDeriv B)
{
	FloatDeriv Ret;
	bool Cmp = A.Value < B.Value;
	Ret.Value = Cmp ? A.Value : B.Value;
	Ret.Ddx = Cmp ? A.Ddx : B.Ddx;
	Ret.Ddy = Cmp ? A.Ddy : B.Ddy;
	return Ret;
}

FLWCScalarDeriv DotDerivLWC(FLWCVector3Deriv A, FLWCVector3Deriv B)
{
	FLWCScalarDeriv Ret = ConstructConstantFLWCScalarDeriv(LWCPromote(0.0f));
	Ret = AddDerivLWC(Ret,MulDerivLWC(ExtractFLWCVector3Deriv_1(A),ExtractFLWCVector3Deriv_1(B)));
	Ret = AddDerivLWC(Ret,MulDerivLWC(ExtractFLWCVector3Deriv_2(A),ExtractFLWCVector3Deriv_2(B)));
	Ret = AddDerivLWC(Ret,MulDerivLWC(ExtractFLWCVector3Deriv_3(A),ExtractFLWCVector3Deriv_3(B)));
	return Ret;
}

FloatDeriv AbsDeriv(FloatDeriv A)
{
	float One = 1.0f;
	FloatDeriv Ret;
	Ret.Value = abs(A.Value);
	float dFdA = (A.Value >= 0.0f ? One : -One);
	Ret.Ddx = dFdA * A.Ddx;
	Ret.Ddy = dFdA * A.Ddy;
	return Ret;
}

FloatDeriv SqrtDerivLWC(FLWCScalarDeriv A)
{
	FloatDeriv Ret;
	Ret.Value = LWCSqrt(A.Value);
	float dFdA = 0.5f * LWCRsqrt(LWCMax(A.Value, 0.00001f));
	Ret.Ddx = dFdA * A.Ddx;
	Ret.Ddy = dFdA * A.Ddy;
	return Ret;
}

FloatDeriv SaturateDeriv(FloatDeriv A)
{
	float Zero = 0.0f;
	FloatDeriv Ret;
	Ret.Value = saturate(A.Value);
	bool InRange = (0.0 < A.Value && A.Value < 1.0);
	Ret.Ddx = InRange ? A.Ddx : Zero;
	Ret.Ddy = InRange ? A.Ddy : Zero;
	return Ret;
}

FloatDeriv SaturateDerivLWC(FLWCScalarDeriv A)
{
	float Zero = 0.0f;
	FloatDeriv Ret;
	Ret.Value = LWCSaturate(A.Value);
	bool InRange = LWCEquals(Ret.Value, A.Value);
	Ret.Ddx = InRange ? A.Ddx : Zero;
	Ret.Ddy = InRange ? A.Ddy : Zero;
	return Ret;
}

FLWCScalarDeriv LengthDerivLWC(FLWCVector3Deriv A)
{
	FLWCScalarDeriv Ret;
	Ret.Value = LWCLength(A.Value);
	FloatDeriv Deriv = SqrtDerivLWC(DotDerivLWC(A,A));
	Ret.Ddx = Deriv.Ddx;
	Ret.Ddy = Deriv.Ddy;
	return Ret;
}


float  CustomExpression0(FMaterialPixelParameters Parameters,Texture2D TextureObjectA, SamplerState TextureObjectASampler , float4  WeightsA, float  BranchMaskA,Texture2D TextureObjectB, SamplerState TextureObjectBSampler , float4  WeightsB, float  BranchMaskB,Texture2D TextureObjectC, SamplerState TextureObjectCSampler , float4  WeightsC, float  BranchMaskC,Texture2D TextureObjectD, SamplerState TextureObjectDSampler , float4  WeightsD, float  BranchMaskD,Texture2D TextureObjectE, SamplerState TextureObjectESampler , float3  WeightsE, float  BranchMaskE, float2  UV)
{
float outmask = 0;
float4 currentmask = 0;


if(BranchMaskA > 0)
{
	currentmask = Texture2DSample(TextureObjectA, GetMaterialSharedSampler(TextureObjectASampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsA);
}

if(BranchMaskB > 0)
{
	currentmask = Texture2DSample(TextureObjectB, GetMaterialSharedSampler(TextureObjectBSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsB);
}

if(BranchMaskC > 0)
{
	currentmask = Texture2DSample(TextureObjectC, GetMaterialSharedSampler(TextureObjectCSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsC);
}

if(BranchMaskD > 0)
{
	currentmask = Texture2DSample(TextureObjectD, GetMaterialSharedSampler(TextureObjectDSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsD);
}

if(BranchMaskE > 0)
{
	currentmask = Texture2DSample(TextureObjectE, GetMaterialSharedSampler(TextureObjectESampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask.xyz, WeightsE);
}

return saturate(outmask);
}


float  CustomExpression1(FMaterialPixelParameters Parameters,Texture2D TextureObjectA, SamplerState TextureObjectASampler , float4  WeightsA, float  BranchMaskA,Texture2D TextureObjectB, SamplerState TextureObjectBSampler , float4  WeightsB, float  BranchMaskB,Texture2D TextureObjectC, SamplerState TextureObjectCSampler , float2  WeightsC, float  BranchMaskC, float2  UV)
{
float outmask = 0;
float4 currentmask = 0;


if(BranchMaskA > 0)
{
	currentmask = Texture2DSample(TextureObjectA, GetMaterialSharedSampler(TextureObjectASampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsA);
}

if(BranchMaskB > 0)
{
	currentmask = Texture2DSample(TextureObjectB, GetMaterialSharedSampler(TextureObjectBSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsB);
}

if(BranchMaskC > 0)
{
	currentmask = Texture2DSample(TextureObjectC, GetMaterialSharedSampler(TextureObjectCSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask.xy, WeightsC);
}


return saturate(outmask);
}


float  CustomExpression2(FMaterialPixelParameters Parameters,Texture2D TextureObjectA, SamplerState TextureObjectASampler , float4  WeightsA, float  BranchMaskA,Texture2D TextureObjectB, SamplerState TextureObjectBSampler , float4  WeightsB, float  BranchMaskB,Texture2D TextureObjectC, SamplerState TextureObjectCSampler , float4  WeightsC, float  BranchMaskC, float2  UV)
{
float outmask = 0;
float4 currentmask = 0;


if(BranchMaskA > 0)
{
	currentmask = Texture2DSample(TextureObjectA, GetMaterialSharedSampler(TextureObjectASampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsA);
}

if(BranchMaskB > 0)
{
	currentmask = Texture2DSample(TextureObjectB, GetMaterialSharedSampler(TextureObjectBSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsB);
}

if(BranchMaskC > 0)
{
	currentmask = Texture2DSample(TextureObjectC, GetMaterialSharedSampler(TextureObjectCSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsC);
}


return saturate(outmask);
}


float3  CustomExpression3(FMaterialPixelParameters Parameters, float3  RGB)
{

float3 YCbCr = 0;

YCbCr.x = .299*RGB.r + .587*RGB.g + .114*RGB.b;
YCbCr.y = (RGB.b-YCbCr.x)*.564+.5;
YCbCr.z = (RGB.r-YCbCr.x)*.713+.5;

return YCbCr;

}


float3  CustomExpression4(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Saturation*Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression5(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Saturation*Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression6(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression7(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Saturation*Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression8(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Saturation*Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression9(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Saturation*Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression10(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Saturation*Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression11(FMaterialPixelParameters Parameters, float3  YCbCr, float  Redness, float2  RednessMinMax, float  Saturation, float2  SaturationMinMax, float  Lightness, float2  LightnessMinMax)
{

float3 colorout = 0;


Redness = Redness*(RednessMinMax.y - RednessMinMax.x) + RednessMinMax.x;
Saturation = Saturation*(SaturationMinMax.y - SaturationMinMax.x) + SaturationMinMax.x;
Lightness = Lightness*(LightnessMinMax.y - LightnessMinMax.x) + LightnessMinMax.x;

Redness *=2;
Saturation *= 2;
Lightness *= 2;

colorout.x = Lightness*YCbCr.x;
colorout.y = Saturation*(YCbCr.y-.5)+.5;
colorout.z = Saturation*Redness*(YCbCr.z-.5)+.5;

return saturate(colorout);
}


float3  CustomExpression12(FMaterialPixelParameters Parameters, float3  YCbCr)
{

float3 RGB = 0;

RGB.r = YCbCr.x + 1.402*(YCbCr.z-.5);
RGB.g = YCbCr.x - .34414*(YCbCr.y-.5) - .71414*(YCbCr.z-.5);
RGB.b = YCbCr.x + 1.772*(YCbCr.y-.5);

return saturate(RGB);
}


float3  CustomExpression13(FMaterialPixelParameters Parameters, float  x, float3  color)
{
float3 mask = saturate(3.0*x - float3(0,1,2));
float3 hueshift = lerp(color, color.brg, mask.x);
hueshift = lerp(hueshift, color.gbr, mask.y);
hueshift = lerp(hueshift, color.rgb, mask.z);
return hueshift;
}


float  CustomExpression14(FMaterialPixelParameters Parameters,Texture2D TextureObjectA, SamplerState TextureObjectASampler , float4  WeightsA, float  BranchMaskA,Texture2D TextureObjectB, SamplerState TextureObjectBSampler , float4  WeightsB, float  BranchMaskB,Texture2D TextureObjectC, SamplerState TextureObjectCSampler , float4  WeightsC, float  BranchMaskC,Texture2D TextureObjectD, SamplerState TextureObjectDSampler , float4  WeightsD, float  BranchMaskD,Texture2D TextureObjectE, SamplerState TextureObjectESampler , float3  WeightsE, float  BranchMaskE, float2  UV)
{
float outmask = 0;
float4 currentmask = 0;


if(BranchMaskA > 0)
{
	currentmask = Texture2DSample(TextureObjectA, GetMaterialSharedSampler(TextureObjectASampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsA);
}

if(BranchMaskB > 0)
{
	currentmask = Texture2DSample(TextureObjectB, GetMaterialSharedSampler(TextureObjectBSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsB);
}

if(BranchMaskC > 0)
{
	currentmask = Texture2DSample(TextureObjectC, GetMaterialSharedSampler(TextureObjectCSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsC);
}

if(BranchMaskD > 0)
{
	currentmask = Texture2DSample(TextureObjectD, GetMaterialSharedSampler(TextureObjectDSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsD);
}

if(BranchMaskE > 0)
{
	currentmask = Texture2DSample(TextureObjectE, GetMaterialSharedSampler(TextureObjectESampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask.xyz, WeightsE);
}

return saturate(outmask);
}


float  CustomExpression15(FMaterialPixelParameters Parameters,Texture2D TextureObjectA, SamplerState TextureObjectASampler , float4  WeightsA, float  BranchMaskA,Texture2D TextureObjectB, SamplerState TextureObjectBSampler , float4  WeightsB, float  BranchMaskB,Texture2D TextureObjectC, SamplerState TextureObjectCSampler , float2  WeightsC, float  BranchMaskC, float2  UV)
{
float outmask = 0;
float4 currentmask = 0;


if(BranchMaskA > 0)
{
	currentmask = Texture2DSample(TextureObjectA, GetMaterialSharedSampler(TextureObjectASampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsA);
}

if(BranchMaskB > 0)
{
	currentmask = Texture2DSample(TextureObjectB, GetMaterialSharedSampler(TextureObjectBSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsB);
}

if(BranchMaskC > 0)
{
	currentmask = Texture2DSample(TextureObjectC, GetMaterialSharedSampler(TextureObjectCSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask.xy, WeightsC);
}


return saturate(outmask);
}


float  CustomExpression16(FMaterialPixelParameters Parameters,Texture2D TextureObjectA, SamplerState TextureObjectASampler , float4  WeightsA, float  BranchMaskA,Texture2D TextureObjectB, SamplerState TextureObjectBSampler , float4  WeightsB, float  BranchMaskB,Texture2D TextureObjectC, SamplerState TextureObjectCSampler , float4  WeightsC, float  BranchMaskC, float2  UV)
{
float outmask = 0;
float4 currentmask = 0;


if(BranchMaskA > 0)
{
	currentmask = Texture2DSample(TextureObjectA, GetMaterialSharedSampler(TextureObjectASampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsA);
}

if(BranchMaskB > 0)
{
	currentmask = Texture2DSample(TextureObjectB, GetMaterialSharedSampler(TextureObjectBSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsB);
}

if(BranchMaskC > 0)
{
	currentmask = Texture2DSample(TextureObjectC, GetMaterialSharedSampler(TextureObjectCSampler,View_MaterialTextureBilinearClampedSampler), UV);
	outmask += dot(currentmask, WeightsC);
}


return saturate(outmask);
}



float3  GetBentNormal0(inout FMaterialPixelParameters Parameters)
{
	float2  Local404 = Parameters.TexCoords[0].xy;
	float  Local405 = (-1.00000000 + View_MaterialTextureMipBias);
	float  Local406 =  1.0f ;
	float4  Local407 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_39,Material_Texture2D_39Sampler, Local404 ,Local405));
	float  Local408 =  1.0f ;
	float4  Local409 = MaterialCollection0_Vectors[2];
	float  Local410 =  1.0f ;
	float4  Local411 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_0,GetMaterialSharedSampler(Material_Texture2D_0Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ,Local409.r));
	float  Local412 =  1.0f ;
	float4  Local413 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_1,GetMaterialSharedSampler(Material_Texture2D_1Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ,Local409.r));
	float  Local414 =  1.0f ;
	float3  Local415 = (Local413.rgb - Local411.rgb);
	float  Local416 = CustomExpression14(Parameters,Material_Texture2D_2,Material_Texture2D_2Sampler,Material_PreshaderBuffer[5],Material_PreshaderBuffer[24].w,Material_Texture2D_3,Material_Texture2D_3Sampler,Material_PreshaderBuffer[10],Material_PreshaderBuffer[25].x,Material_Texture2D_4,Material_Texture2D_4Sampler,Material_PreshaderBuffer[15],Material_PreshaderBuffer[25].y,Material_Texture2D_5,Material_Texture2D_5Sampler,Material_PreshaderBuffer[20],Material_PreshaderBuffer[25].z,Material_Texture2D_6,Material_Texture2D_6Sampler,Material_PreshaderBuffer[24].xyz,Material_PreshaderBuffer[25].w, Local404 );
	float3  Local417 = (Local415 * (( float3 )Local416));
	float4  Local418 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_7,GetMaterialSharedSampler(Material_Texture2D_7Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ,Local409.r));
	float  Local419 =  1.0f ;
	float3  Local420 = (Local418.rgb - Local411.rgb);
	float  Local421 = CustomExpression15(Parameters,Material_Texture2D_8,Material_Texture2D_8Sampler,Material_PreshaderBuffer[30],Material_PreshaderBuffer[37].z,Material_Texture2D_9,Material_Texture2D_9Sampler,Material_PreshaderBuffer[35],Material_PreshaderBuffer[37].w,Material_Texture2D_10,Material_Texture2D_10Sampler,Material_PreshaderBuffer[37].xy,Material_PreshaderBuffer[38].x, Local404 );
	float3  Local422 = (Local420 * (( float3 )Local421));
	float3  Local423 = (Local417 + Local422);
	float4  Local424 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_11,GetMaterialSharedSampler(Material_Texture2D_11Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ,Local409.r));
	float  Local425 =  1.0f ;
	float3  Local426 = (Local424.rgb - Local411.rgb);
	float  Local427 = CustomExpression16(Parameters,Material_Texture2D_12,Material_Texture2D_12Sampler,Material_PreshaderBuffer[42],Material_PreshaderBuffer[53].x,Material_Texture2D_13,Material_Texture2D_13Sampler,Material_PreshaderBuffer[47],Material_PreshaderBuffer[53].y,Material_Texture2D_5,Material_Texture2D_5Sampler,Material_PreshaderBuffer[52],Material_PreshaderBuffer[53].z, Local404 );
	float3  Local428 = (Local426 * (( float3 )Local427));
	float3  Local429 = (Local423 + Local428);
	float3  Local430 = (Local411.rgb + Local429);
	float3  Local431 = (Local430 * Material_PreshaderBuffer[55].xyz);
	float  Local432 = dot(Parameters.TangentToWorld[2],Parameters.CameraVector);
	float  Local433 = max(0.00000000,Local432);
	float  Local434 = (1.00000000 - Local433);
	float  Local435 = abs(Local434);
	float  Local436 = max(Local435,0.00010000);
	float  Local437 = PositiveClampedPow(Local436,3.00000000);
	float  Local438 = (Local437 * (1.00000000 - 0.00000000));
	float  Local439 = (Local438 + 0.00000000);
	float  Local440 = (Local439 * Material_PreshaderBuffer[55].w);
	float  Local441 = (Local440 + 1.00000000);
	float3  Local442 = (Local431 *  float3 ( float2 (Local441,Local441),1.00000000));
	float  Local443 = (Local442.b + 1.00000000);
	float2  Local444 = ( Local404  * (( float2 )Material_PreshaderBuffer[56].x));
	float  Local445 =  1.0f ;
	float4  Local446 = UnpackNormalMap(Texture2DSample(Material_Texture2D_14,GetMaterialSharedSampler(Material_Texture2D_14Sampler,View_MaterialTextureBilinearWrapedSampler), Local444 ));
	float  Local447 =  1.0f ;
	float  Local448 =  1.0f ;
	float4  Local449 = Texture2DSample(Material_Texture2D_15,GetMaterialSharedSampler(Material_Texture2D_15Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 );
	float  Local450 =  1.0f ;
	float  Local451 = (1.00000000 - Local449.r);
	float  Local452 = saturate(Local451);
	float  Local453 = (Local452 * Material_PreshaderBuffer[56].y);
	float3  Local454 = (Local446.rgb *  float3 ( float2 (Local453,Local453),1.00000000));
	float2  Local455 = (Local454.rg * (( float2 )-1.00000000));
	float  Local456 = dot( float3 (Local442.rg,Local443), float3 (Local455,Local454.b));
	float3  Local457 = ( float3 (Local442.rg,Local443) * (( float3 )Local456));
	float3  Local458 = ((( float3 )Local443) *  float3 (Local455,Local454.b));
	float3  Local459 = (Local457 - Local458);
	float  Local460 =  1.0f ;
	float4  Local461 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_16,GetMaterialSharedSampler(Material_Texture2D_16Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ));
	float  Local462 =  1.0f ;
	float2  Local463 = ((( float2 )-0.50000000) +  float2 (Local461.r,Local461.g));
	float2  Local464 = (Local463 * (( float2 )2.00000000));
	float4  Local465 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_17,GetMaterialSharedSampler(Material_Texture2D_17Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ));
	float  Local466 =  1.0f ;
	float2  Local467 = ((( float2 )-0.50000000) +  float2 (Local465.r,Local465.g));
	float2  Local468 = (Local467 * (( float2 )2.00000000));
	float2  Local469 = (Local464 + Local468);
	float4  Local470 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_18,GetMaterialSharedSampler(Material_Texture2D_18Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ));
	float  Local471 =  1.0f ;
	float2  Local472 = ((( float2 )-0.50000000) +  float2 (Local470.r,Local470.g));
	float2  Local473 = (Local472 * (( float2 )2.00000000));
	float4  Local474 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_19,GetMaterialSharedSampler(Material_Texture2D_19Sampler,View_MaterialTextureBilinearWrapedSampler), Local404 ));
	float  Local475 =  1.0f ;
	float2  Local476 = ((( float2 )-0.50000000) +  float2 (Local474.r,Local474.g));
	float2  Local477 = (Local476 * (( float2 )2.00000000));
	float2  Local478 = (Local473 + Local477);
	float2  Local479 = (Local469 + Local478);
	float3  Local480 = normalize( float3 (Local479,1.00000000));
	float3  Local481 = lerp(Local480, float3 (0.00000000,0.00000000,1.00000000),Material_PreshaderBuffer[56].z);
	float3  Local482 = normalize( float3 (Local481.rg,1.00000000));
	float  Local483 = (Local461.b * 5.00000000);
	float  Local484 = saturate(Local483);
	float  Local485 = (Local470.b * 5.00000000);
	float  Local486 = saturate(Local485);
	float  Local487 = (Local484 + Local486);
	float  Local488 = (Local465.b * 5.00000000);
	float  Local489 = saturate(Local488);
	float  Local490 = (Local474.b * 5.00000000);
	float  Local491 = saturate(Local490);
	float  Local492 = (Local489 + Local491);
	float  Local493 = (Local487 + Local492);
	float  Local494 = saturate(Local493);
	float  Local495 = (Local470.b + Local461.b);
	float  Local496 = (Local474.b + Local465.b);
	float  Local497 = (Local495 + Local496);
	float  Local498 = saturate(Local497);
	float  Local499 = lerp(Local494,Local498,Material_PreshaderBuffer[56].w);
	float3  Local500 = lerp(Local459,Local482,Local499);
	float3  Local501 = lerp(Local459,Local500,Material_PreshaderBuffer[57].x);
	float3  Local502 = (Local501 * Local501);
	float3  Local503 = sign(Local501);
	float3  Local504 = (Local502 * Local503);
	FLWCVector3 Local505 = GetWorldPosition(Parameters);
	FLWCVector3 Local506 = ResolvedView.WorldCameraOrigin;
	FLWCVector3 Local507 = LWCSubtract( Local505 , Local506);
	FLWCScalar Local508 = LWCLength( Local507 );
	FLWCScalar Local509 = LWCSubtract( Local508 , LWCPromote(Material_PreshaderBuffer[106].y));
	FLWCScalar Local510 = LWCMultiply( Local509 , LWCPromote(Material_PreshaderBuffer[107].x));
	float  Local511 = LWCSaturate( Local510 );
	float  Local512 = ( Local511  * 4.00000000);
	float  Local513 = ( Local512  + 1.00000000);
	float  Local514 = (Material_PreshaderBuffer[107].y *  Local513 );
	float2  Local515 =  float2 ( Local514 , Local514 );
	float3  Local516 =  float3 ( Local515 ,1.00000000);
	float3  Local517 = (Local504 *  Local516 );
	float  Local518 =  Local404 .g;
	float  Local519 = ( Local518  - 0.00000000);
	float  Local520 = abs( Local519 );
	float  Local521 = ( Local520  * (1.00000000 / max(0.00001000,0.89999998)));
	float  Local522 = (1.00000000 -  Local521 );
	float  Local523 = ( Local522  * (1.00000000 / max((1.00000000 - 0.69999999),0.00001000)));
	float  Local524 = saturate( Local523 );
	float  Local525 = ( Local524  * Material_PreshaderBuffer[107].z);
	float3  Local526 = lerp(Local407.rgb,Local517, Local525 );
	float3  Local527 = normalize(Local526);
	float3  Local528 = (GetRayTracingQualitySwitch() ? (Local407.rgb) : (Local527));
	float4  Local529 = MaterialCollection0_Vectors[3];
	float3  Local530 = lerp(Local528,Local407.rgb,Local529.r);
 return Local530;
}
FLWCVector3 GetBentNormal0_LWC(inout FMaterialPixelParameters Parameters) { return LWCPromote(GetBentNormal0(Parameters)); }
#line 3308 "/Engine/Generated/Material.ush"
float3  GetMaterialNormalRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Normal;
}

float3  GetMaterialNormal(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3  RetNormal;

	RetNormal = GetMaterialNormalRaw(PixelMaterialInputs);


	{

		float3  OverrideNormal = ResolvedView.NormalOverrideParameter.xyz;
#line 3328 "/Engine/Generated/Material.ush"
		RetNormal = RetNormal * ResolvedView.NormalOverrideParameter.w + OverrideNormal;
	}


	return RetNormal;
}

float3  GetMaterialTangentRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Tangent;
}

float3  GetMaterialTangent(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialTangentRaw(PixelMaterialInputs);
}

float3  GetMaterialEmissiveRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.EmissiveColor;
}

float3  GetMaterialEmissive(FPixelMaterialInputs PixelMaterialInputs)
{
	float3  EmissiveColor = GetMaterialEmissiveRaw(PixelMaterialInputs);

	EmissiveColor = max(EmissiveColor, 0.0f);

	return EmissiveColor;
}

float3  GetMaterialEmissiveForCS(FMaterialPixelParameters Parameters)
{
return 0;
}


uint GetMaterialShadingModel(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.ShadingModel;
}

float3  GetMaterialBaseColorRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.BaseColor;
}

float3  GetMaterialBaseColor(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialBaseColorRaw(PixelMaterialInputs));
}

float  GetMaterialMetallicRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Metallic;
}

float  GetMaterialMetallic(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialMetallicRaw(PixelMaterialInputs));
}

float  GetMaterialSpecularRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Specular;
}

float  GetMaterialSpecular(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialSpecularRaw(PixelMaterialInputs));
}

float  GetMaterialRoughnessRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Roughness;
}

float  GetMaterialRoughness(FPixelMaterialInputs PixelMaterialInputs)
{
#line 3410 "/Engine/Generated/Material.ush"
	float  Roughness = saturate(GetMaterialRoughnessRaw(PixelMaterialInputs));


	{

		Roughness = Roughness * ResolvedView.RoughnessOverrideParameter.y + ResolvedView.RoughnessOverrideParameter.x;
	}


	return Roughness;
}

float  GetMaterialAnisotropyRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Anisotropy;
}

float  GetMaterialAnisotropy(FPixelMaterialInputs PixelMaterialInputs)
{
	return clamp(GetMaterialAnisotropyRaw(PixelMaterialInputs), -1.0f, 1.0f);
}

float  GetMaterialTranslucencyDirectionalLightingIntensity()
{
return 1.00000;
}

float  GetMaterialTranslucentShadowDensityScale()
{
return 0.50000;
}

float  GetMaterialTranslucentSelfShadowDensityScale()
{
return 2.00000;
}

float  GetMaterialTranslucentSelfShadowSecondDensityScale()
{
return 10.00000;
}

float  GetMaterialTranslucentSelfShadowSecondOpacity()
{
return 0.00000;
}

float  GetMaterialTranslucentBackscatteringExponent()
{
return 30.00000;
}

float3  GetMaterialTranslucentMultipleScatteringExtinction()
{
return  float3 (1.00000, 0.83300, 0.58800);
}



float  GetMaterialOpacityMaskClipValue()
{
return 0.33330;
}



float  GetMaterialOpacityRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Opacity;
}




float  GetMaterialMaskInputRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.OpacityMask;
}



float  GetMaterialMask(FPixelMaterialInputs PixelMaterialInputs)
{
	return GetMaterialMaskInputRaw(PixelMaterialInputs) - GetMaterialOpacityMaskClipValue();
}



float  GetMaterialOpacity(FPixelMaterialInputs PixelMaterialInputs)
{

	return saturate(GetMaterialOpacityRaw(PixelMaterialInputs));
}
#line 3518 "/Engine/Generated/Material.ush"
precise float3  GetMaterialWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 3527 "/Engine/Generated/Material.ush"
	float2  Local392 = Parameters.TexCoords[0].xy;
	float4  Local393 = ProcessMaterialAlphaTextureLookup(Texture2DSampleLevel(Material_Texture2D_38,Material_Texture2D_38Sampler, Local392 ,-1.00000000));
	float3  Local394 = (Local393.rgb * (( float3 )Material_PreshaderBuffer[105].w));
	float3  Local395 = (Local394 * Parameters.TangentToWorld[2]);
	float3  Local396 = ( float3 (0.00000000,0.00000000,0.00000000) + Local395);
	return Local396;;
}

precise float3  GetMaterialPreviousWorldPositionOffset(FMaterialVertexParameters Parameters)
{
#line 3544 "/Engine/Generated/Material.ush"
	float2  Local392 = Parameters.TexCoords[0].xy;
	float4  Local393 = ProcessMaterialAlphaTextureLookup(Texture2DSampleLevel(Material_Texture2D_38,Material_Texture2D_38Sampler, Local392 ,-1.00000000));
	float3  Local394 = (Local393.rgb * (( float3 )Material_PreshaderBuffer[105].w));
	float3  Local395 = (Local394 * Parameters.TangentToWorld[2]);
	float3  Local396 = ( float3 (0.00000000,0.00000000,0.00000000) + Local395);
	return Local396;;
}



float4  GetMaterialSubsurfaceDataRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Subsurface;
}

float4  GetMaterialSubsurfaceData(FPixelMaterialInputs PixelMaterialInputs)
{
	float4  OutSubsurface = GetMaterialSubsurfaceDataRaw(PixelMaterialInputs);
	OutSubsurface.rgb = saturate(OutSubsurface.rgb);
	return OutSubsurface;
}

float  GetMaterialCustomData0(in out FMaterialPixelParameters Parameters)
{
	return 1.00000000;;
}

float  GetMaterialCustomData1(in out FMaterialPixelParameters Parameters)
{
	return 0.10000000;;
}

float  GetMaterialAmbientOcclusionRaw(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.AmbientOcclusion;
}

float  GetMaterialAmbientOcclusion(FPixelMaterialInputs PixelMaterialInputs)
{
	return saturate(GetMaterialAmbientOcclusionRaw(PixelMaterialInputs));
}

float2  GetMaterialRefraction(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.Refraction;
}


void GetMaterialCustomizedUVs(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{
	float2  Local392 = Parameters.TexCoords[0].xy;
	float4  Local393 = ProcessMaterialAlphaTextureLookup(Texture2DSampleLevel(Material_Texture2D_38,Material_Texture2D_38Sampler, Local392 ,-1.00000000));
	float3  Local394 = (Local393.rgb * (( float3 )Material_PreshaderBuffer[105].w));
	float3  Local395 = (Local394 * Parameters.TangentToWorld[2]);
	float3  Local396 = ( float3 (0.00000000,0.00000000,0.00000000) + Local395);
	OutTexCoords[0] = Local392;

}

void GetCustomInterpolators(FMaterialVertexParameters Parameters, inout float2 OutTexCoords[ 1 ])
{

}


float GetMaterialPixelDepthOffset(FPixelMaterialInputs PixelMaterialInputs)
{
	return PixelMaterialInputs.PixelDepthOffset;
}
#line 3631 "/Engine/Generated/Material.ush"
float3 TransformTangentNormalToWorld( float3x3  TangentToWorld, float3 TangentNormal)
{
	return normalize(float3(TransformTangentVectorToWorld(TangentToWorld, TangentNormal)));
}



float3 CalculateAnisotropyTangent(in out FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	float3 Normal = Parameters.WorldNormal;
#line 3649 "/Engine/Generated/Material.ush"
	float3 Tangent = GetMaterialTangent(PixelMaterialInputs);
#line 3656 "/Engine/Generated/Material.ush"
	Tangent = TransformTangentNormalToWorld(Parameters.TangentToWorld, Tangent);


	float3 BiTangent = cross(Normal, Tangent);
	Tangent = normalize(cross(BiTangent, Normal));

	return Tangent;
}

FMaterialAttributes FMaterialAttributes_GetDefault()
{
	FMaterialAttributes Result;
	Result.BaseColor =  float3 (0.00000000,0.00000000,0.00000000);
	Result.Metallic = 0.00000000;
	Result.Specular = 0.50000000;
	Result.Roughness = 0.50000000;
	Result.Anisotropy = 0.00000000;
	Result.EmissiveColor =  float3 (0.00000000,0.00000000,0.00000000);
	Result.Opacity = 1.00000000;
	Result.OpacityMask = 1.00000000;
	Result.Normal =  float3 (0.00000000,0.00000000,1.00000000);
	Result.Tangent =  float3 (1.00000000,0.00000000,0.00000000);
	Result.WorldPositionOffset =  float3 (0.00000000,0.00000000,0.00000000);
	Result.SubsurfaceColor =  float3 (1.00000000,1.00000000,1.00000000);
	Result.ClearCoat = 1.00000000;
	Result.ClearCoatRoughness = 0.10000000;
	Result.AmbientOcclusion = 1.00000000;
	Result.Refraction =  float2 (1.00000000,0.00000000);
	Result.PixelDepthOffset = 0.00000000;
	Result.ShadingModel = 5;
	Result.FrontMaterial = GetInitialisedStrataData();
	Result.CustomizedUV0 =  float2 (0.00000000,0.00000000);
	Result.CustomizedUV1 =  float2 (0.00000000,0.00000000);
	Result.CustomizedUV2 =  float2 (0.00000000,0.00000000);
	Result.CustomizedUV3 =  float2 (0.00000000,0.00000000);
	Result.CustomizedUV4 =  float2 (0.00000000,0.00000000);
	Result.CustomizedUV5 =  float2 (0.00000000,0.00000000);
	Result.CustomizedUV6 =  float2 (0.00000000,0.00000000);
	Result.CustomizedUV7 =  float2 (0.00000000,0.00000000);
	Result.BentNormal =  float3 (0.00000000,0.00000000,1.00000000);
	Result.ClearCoatBottomNormal =  float3 (0.00000000,0.00000000,1.00000000);
	Result.CustomEyeTangent =  float3 (0.00000000,0.00000000,0.00000000);

	return Result;
}

FMaterialAttributes EvaluateVertexMaterialAttributes(FMaterialVertexParameters Parameters)
{
	FMaterialAttributes DefaultMaterialAttributes = FMaterialAttributes_GetDefault();


	return DefaultMaterialAttributes;
}

FMaterialAttributes EvaluatePixelMaterialAttributes(in out FMaterialPixelParameters Parameters)
{
	FMaterialAttributes DefaultMaterialAttributes = FMaterialAttributes_GetDefault();


	return DefaultMaterialAttributes;
}




void CalcPixelMaterialInputs(in out FMaterialPixelParameters Parameters, in out FPixelMaterialInputs PixelMaterialInputs)
{

	float4  Local0 = MaterialCollection0_Vectors[2];
	float2  Local1 = Parameters.TexCoords[0].xy;
	float  Local2 =  1.0f ;
	float4  Local3 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_0,GetMaterialSharedSampler(Material_Texture2D_0Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local4 =  1.0f ;
	float4  Local5 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_1,GetMaterialSharedSampler(Material_Texture2D_1Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local6 =  1.0f ;
	float3  Local7 = (Local5.rgb - Local3.rgb);
	float  Local8 = CustomExpression0(Parameters,Material_Texture2D_2,Material_Texture2D_2Sampler,Material_PreshaderBuffer[5],Material_PreshaderBuffer[24].w,Material_Texture2D_3,Material_Texture2D_3Sampler,Material_PreshaderBuffer[10],Material_PreshaderBuffer[25].x,Material_Texture2D_4,Material_Texture2D_4Sampler,Material_PreshaderBuffer[15],Material_PreshaderBuffer[25].y,Material_Texture2D_5,Material_Texture2D_5Sampler,Material_PreshaderBuffer[20],Material_PreshaderBuffer[25].z,Material_Texture2D_6,Material_Texture2D_6Sampler,Material_PreshaderBuffer[24].xyz,Material_PreshaderBuffer[25].w, Local1 );
	float3  Local9 = (Local7 * (( float3 )Local8));
	float4  Local10 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_7,GetMaterialSharedSampler(Material_Texture2D_7Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local11 =  1.0f ;
	float3  Local12 = (Local10.rgb - Local3.rgb);
	float  Local13 = CustomExpression1(Parameters,Material_Texture2D_8,Material_Texture2D_8Sampler,Material_PreshaderBuffer[30],Material_PreshaderBuffer[37].z,Material_Texture2D_9,Material_Texture2D_9Sampler,Material_PreshaderBuffer[35],Material_PreshaderBuffer[37].w,Material_Texture2D_10,Material_Texture2D_10Sampler,Material_PreshaderBuffer[37].xy,Material_PreshaderBuffer[38].x, Local1 );
	float3  Local14 = (Local12 * (( float3 )Local13));
	float3  Local15 = (Local9 + Local14);
	float4  Local16 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_11,GetMaterialSharedSampler(Material_Texture2D_11Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local17 =  1.0f ;
	float3  Local18 = (Local16.rgb - Local3.rgb);
	float  Local19 = CustomExpression2(Parameters,Material_Texture2D_12,Material_Texture2D_12Sampler,Material_PreshaderBuffer[42],Material_PreshaderBuffer[53].x,Material_Texture2D_13,Material_Texture2D_13Sampler,Material_PreshaderBuffer[47],Material_PreshaderBuffer[53].y,Material_Texture2D_5,Material_Texture2D_5Sampler,Material_PreshaderBuffer[52],Material_PreshaderBuffer[53].z, Local1 );
	float3  Local20 = (Local18 * (( float3 )Local19));
	float3  Local21 = (Local15 + Local20);
	float3  Local22 = (Local3.rgb + Local21);
	float3  Local23 = (Local22 * Material_PreshaderBuffer[55].xyz);
	float  Local24 = dot(Parameters.TangentToWorld[2],Parameters.CameraVector);
	float  Local25 = max(0.00000000,Local24);
	float  Local26 = (1.00000000 - Local25);
	float  Local27 = abs(Local26);
	float  Local28 = max(Local27,0.00010000);
	float  Local29 = PositiveClampedPow(Local28,3.00000000);
	float  Local30 = (Local29 * (1.00000000 - 0.00000000));
	float  Local31 = (Local30 + 0.00000000);
	float  Local32 = (Local31 * Material_PreshaderBuffer[55].w);
	float  Local33 = (Local32 + 1.00000000);
	float3  Local34 = (Local23 *  float3 ( float2 (Local33,Local33),1.00000000));
	float  Local35 = (Local34.b + 1.00000000);
	float2  Local36 = ( Local1  * (( float2 )Material_PreshaderBuffer[56].x));
	float  Local37 =  1.0f ;
	float4  Local38 = UnpackNormalMap(Texture2DSample(Material_Texture2D_14,GetMaterialSharedSampler(Material_Texture2D_14Sampler,View_MaterialTextureBilinearWrapedSampler), Local36 ));
	float  Local39 =  1.0f ;
	float  Local40 =  1.0f ;
	float4  Local41 = Texture2DSample(Material_Texture2D_15,GetMaterialSharedSampler(Material_Texture2D_15Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 );
	float  Local42 =  1.0f ;
	float  Local43 = (1.00000000 - Local41.r);
	float  Local44 = saturate(Local43);
	float  Local45 = (Local44 * Material_PreshaderBuffer[56].y);
	float3  Local46 = (Local38.rgb *  float3 ( float2 (Local45,Local45),1.00000000));
	float2  Local47 = (Local46.rg * (( float2 )-1.00000000));
	float  Local48 = dot( float3 (Local34.rg,Local35), float3 (Local47,Local46.b));
	float3  Local49 = ( float3 (Local34.rg,Local35) * (( float3 )Local48));
	float3  Local50 = ((( float3 )Local35) *  float3 (Local47,Local46.b));
	float3  Local51 = (Local49 - Local50);
	float  Local52 =  1.0f ;
	float4  Local53 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_16,GetMaterialSharedSampler(Material_Texture2D_16Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ));
	float  Local54 =  1.0f ;
	float2  Local55 = ((( float2 )-0.50000000) +  float2 (Local53.r,Local53.g));
	float2  Local56 = (Local55 * (( float2 )2.00000000));
	float4  Local57 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_17,GetMaterialSharedSampler(Material_Texture2D_17Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ));
	float  Local58 =  1.0f ;
	float2  Local59 = ((( float2 )-0.50000000) +  float2 (Local57.r,Local57.g));
	float2  Local60 = (Local59 * (( float2 )2.00000000));
	float2  Local61 = (Local56 + Local60);
	float4  Local62 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_18,GetMaterialSharedSampler(Material_Texture2D_18Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ));
	float  Local63 =  1.0f ;
	float2  Local64 = ((( float2 )-0.50000000) +  float2 (Local62.r,Local62.g));
	float2  Local65 = (Local64 * (( float2 )2.00000000));
	float4  Local66 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_19,GetMaterialSharedSampler(Material_Texture2D_19Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ));
	float  Local67 =  1.0f ;
	float2  Local68 = ((( float2 )-0.50000000) +  float2 (Local66.r,Local66.g));
	float2  Local69 = (Local68 * (( float2 )2.00000000));
	float2  Local70 = (Local65 + Local69);
	float2  Local71 = (Local61 + Local70);
	float3  Local72 = normalize( float3 (Local71,1.00000000));
	float3  Local73 = lerp(Local72, float3 (0.00000000,0.00000000,1.00000000),Material_PreshaderBuffer[56].z);
	float3  Local74 = normalize( float3 (Local73.rg,1.00000000));
	float  Local75 = (Local53.b * 5.00000000);
	float  Local76 = saturate(Local75);
	float  Local77 = (Local62.b * 5.00000000);
	float  Local78 = saturate(Local77);
	float  Local79 = (Local76 + Local78);
	float  Local80 = (Local57.b * 5.00000000);
	float  Local81 = saturate(Local80);
	float  Local82 = (Local66.b * 5.00000000);
	float  Local83 = saturate(Local82);
	float  Local84 = (Local81 + Local83);
	float  Local85 = (Local79 + Local84);
	float  Local86 = saturate(Local85);
	float  Local87 = (Local62.b + Local53.b);
	float  Local88 = (Local66.b + Local57.b);
	float  Local89 = (Local87 + Local88);
	float  Local90 = saturate(Local89);
	float  Local91 = lerp(Local86,Local90,Material_PreshaderBuffer[56].w);
	float3  Local92 = lerp(Local51,Local74,Local91);
	float3  Local93 = lerp(Local51,Local92,Material_PreshaderBuffer[57].x);
	float  Local94 = (Local93.b + 1.00000000);
	float4  Local95 = UnpackNormalMap(Texture2DSampleBias(Material_Texture2D_20,Material_Texture2D_20Sampler, Local1 ,View_MaterialTextureMipBias));
	float  Local96 =  1.0f ;
	float3  Local97 = (Local95.rgb * Material_PreshaderBuffer[58].xyz);
	float2  Local98 = (Local97.rg * (( float2 )-1.00000000));
	float  Local99 = dot( float3 (Local93.rg,Local94), float3 (Local98,Local97.b));
	float3  Local100 = ( float3 (Local93.rg,Local94) * (( float3 )Local99));
	float3  Local101 = ((( float3 )Local94) *  float3 (Local98,Local97.b));
	float3  Local102 = (Local100 - Local101);
	float3  Local103 = (GetRayTracingQualitySwitch() ? (Local3.rgb) : (Local102));


	PixelMaterialInputs.Normal = Local103;
#line 3838 "/Engine/Generated/Material.ush"
	float3 MaterialNormal = GetMaterialNormal(Parameters, PixelMaterialInputs);
#line 3847 "/Engine/Generated/Material.ush"
	MaterialNormal = normalize(MaterialNormal);




	Parameters.WorldNormal = TransformTangentNormalToWorld(Parameters.TangentToWorld, MaterialNormal);
#line 3862 "/Engine/Generated/Material.ush"
	Parameters.WorldNormal *= Parameters.TwoSidedSign;


	Parameters.ReflectionVector = ReflectionAboutCustomWorldNormal(Parameters, Parameters.WorldNormal, false);


	Parameters.Particle.MotionBlurFade = 1.0f;



	float3  Local104 = lerp( float3 (0.00000000,0.00000000,0.00000000),Material_PreshaderBuffer[59].xyz,Material_PreshaderBuffer[58].w);
	float  Local105 =  1.0f ;
	float4  Local106 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_21,GetMaterialSharedSampler(Material_Texture2D_21Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Material_PreshaderBuffer[59].w));
	float  Local107 =  1.0f ;
	float4  Local108 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_22,GetMaterialSharedSampler(Material_Texture2D_22Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Material_PreshaderBuffer[59].w));
	float  Local109 =  1.0f ;
	float  Local110 = max(Local106.r,Local108.r);
	float4  Local111 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleLevel(Material_Texture2D_23,GetMaterialSharedSampler(Material_Texture2D_23Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Material_PreshaderBuffer[59].w));
	float  Local112 =  1.0f ;
	float  Local113 = max(Local110,Local111.r);
	float  Local114 = PositiveClampedPow(Local113,Material_PreshaderBuffer[60].x);
	float  Local115 = (Local114 * Material_PreshaderBuffer[60].y);
	float  Local116 = saturate(Local115);
	float  Local117 = (1.00000000 - Local116);
	float  Local118 =  1.0f ;
	float4  Local119 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleBias(Material_Texture2D_24,Material_Texture2D_24Sampler, Local1 ,View_MaterialTextureMipBias));
	float  Local120 =  1.0f ;
	float  Local121 = (Local119.r * 2.00000000);
	float  Local122 =  1.0f ;
	float4  Local123 = ProcessMaterialVirtualColorTextureLookup(Texture2DSampleBias(Material_Texture2D_25,GetMaterialSharedSampler(Material_Texture2D_25Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local124 =  1.0f ;
	float  Local125 = lerp(Material_PreshaderBuffer[61].y,Material_PreshaderBuffer[61].x,Local123.g);
	float  Local126 = (Local121 * Local125);
	float  Local127 = (Material_PreshaderBuffer[61].z * Local126);
	float  Local128 = (Material_PreshaderBuffer[61].w * Local127);
	float  Local129 = dot(Parameters.WorldNormal,Parameters.CameraVector);
	float  Local130 = max(0.00000000,Local129);
	float  Local131 = (1.00000000 - Local130);
	float  Local132 = abs(Local131);
	float  Local133 = max(Local132,0.00010000);
	float  Local134 = PositiveClampedPow(Local133,Material_PreshaderBuffer[62].x);
	float  Local135 = (Local134 * (1.00000000 - 0.00000000));
	float  Local136 = (Local135 + 0.00000000);
	float  Local137 = lerp(Local127,Local128,Local136);
	float  Local138 = (Material_PreshaderBuffer[62].z * Local137);
	float  Local139 =  1.0f ;
	float4  Local140 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_26,GetMaterialSharedSampler(Material_Texture2D_26Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ));
	float  Local141 =  1.0f ;
	float  Local142 = max(Local140.r,Local140.g);
	float  Local143 = (Material_PreshaderBuffer[64].y * Local142);
	float  Local144 = lerp(Local137,Local138,Local143);
	float  Local145 = (Material_PreshaderBuffer[64].w * Local144);
	float  Local146 =  1.0f ;
	float4  Local147 = Texture2DSample(Material_Texture2D_27,GetMaterialSharedSampler(Material_Texture2D_27Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 );
	float  Local148 =  1.0f ;
	float  Local149 = (Material_PreshaderBuffer[66].z * Local147.r);
	float  Local150 = lerp(Local144,Local145,Local149);
	float  Local151 = saturate(Local150);
	float  Local152 = max(Local53.a,Local62.a);
	float  Local153 = max(Local57.a,Local66.a);
	float  Local154 = max(Local152,Local153);
	float  Local155 = saturate(Local154);
	float  Local156 = lerp(Material_PreshaderBuffer[67].x,Material_PreshaderBuffer[66].w,Local155);
	float  Local157 = lerp(Local151,Local156,Local91);
	float  Local158 = lerp(Local151,Local157,Material_PreshaderBuffer[57].x);
	float  Local159 = (1.00000000 - Local158);
	float3  Local160 = (Parameters.CameraVector * (( float3 )-1.00000000));
	float3  Local161 = lerp(Material_PreshaderBuffer[69].yzw,Local160,Material_PreshaderBuffer[69].x);
	float3  Local162 = (Local161 * (( float3 )-1.00000000));
	float3  Local163 = normalize(Local162);
	float3  Local164 = (Parameters.CameraVector + Material_PreshaderBuffer[70].yzw);
	float3  Local165 = normalize(Parameters.WorldNormal);
	float  Local166 = dot(Local164,Local165);
	float3  Local167 = ((( float3 )Local166) * Local165);
	float3  Local168 = (Local167 * (( float3 )2.00000000));
	float3  Local169 = (Local168 - Local164);
	float3  Local170 = normalize(Local169);
	float  Local171 = dot(Local163,Local170);
	float  Local172 = saturate(Local171);
	float  Local173 = (Material_PreshaderBuffer[71].x * Local159);
	float  Local174 = lerp(Material_PreshaderBuffer[71].z,Material_PreshaderBuffer[71].y,Local173);
	float  Local175 = PositiveClampedPow(Local172,Local174);
	float  Local176 = (Local175 * Material_PreshaderBuffer[71].w);
	float  Local177 = (Local159 * Material_PreshaderBuffer[72].x);
	float  Local178 = lerp(Material_PreshaderBuffer[71].z,Material_PreshaderBuffer[71].y,Local177);
	float  Local179 = PositiveClampedPow(Local172,Local178);
	float  Local180 = (Local179 * Material_PreshaderBuffer[72].y);
	float  Local181 = (Local176 + Local180);
	float4  Local182 = ProcessMaterialLinearColorTextureLookup(Texture2DSampleBias(Material_Texture2D_28,GetMaterialSharedSampler(Material_Texture2D_28Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local183 =  1.0f ;
	float  Local184 = PositiveClampedPow(Local182.r,Material_PreshaderBuffer[72].z);
	float  Local185 = PositiveClampedPow(Local184,Material_PreshaderBuffer[72].w);
	float  Local186 = (Local181 * Local185);
	float  Local187 = (-1.00000000 + View_MaterialTextureMipBias);
	float  Local188 =  1.0f ;
	float4  Local189 = ProcessMaterialAlphaTextureLookup(Texture2DSampleBias(Material_Texture2D_29,Material_Texture2D_29Sampler, Local1 ,Local187));
	float  Local190 =  1.0f ;
	float  Local191 = (Local189.r * Local189.r);
	float  Local192 = (Local186 * Local191);
	FLWCVector3 Local193 = GetWorldPosition(Parameters);
	FLWCVector3 Local194 = ResolvedView.WorldCameraOrigin;
	FLWCVector3 Local195 = LWCSubtract( Local193 , Local194);
	FLWCScalar Local196 = LWCLength( Local195 );
	FLWCScalar Local197 = LWCSubtract( Local196 , LWCPromote(Material_PreshaderBuffer[73].x));
	FLWCScalar Local198 = LWCMultiply( Local197 , LWCPromote(Material_PreshaderBuffer[73].w));
	float  Local199 = LWCSaturate( Local198 );
	float  Local200 = (1.00000000 -  Local199 );
	float  Local201 = max( Local200 ,0.50000000);
	float  Local202 = min( Local201 ,1.00000000);
	float  Local203 = (Local192 *  Local202 );
	float  Local204 = (Local159 * Local203);
	float  Local205 = (Local91 * Local155);
	float  Local206 = lerp(Local91,Local205,Material_PreshaderBuffer[74].x);
	float  Local207 = (1.00000000 - Local206);
	float  Local208 = saturate(Local207);
	float  Local209 = (Local204 * Local208);
	float  Local210 = (Local117 * Local209);
	float  Local211 = ((abs(Material_PreshaderBuffer[74].y - 0.50000000) > 0.00001000) ? ((Material_PreshaderBuffer[74].y >= 0.50000000) ? Material_PreshaderBuffer[75].x : Material_PreshaderBuffer[75].y) : Material_PreshaderBuffer[75].x);
	float4  Local212 = ProcessMaterialVirtualColorTextureLookup(Texture2DSampleBias(Material_Texture2D_30,GetMaterialSharedSampler(Material_Texture2D_30Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local213 =  1.0f ;
	float4  Local214 = ProcessMaterialVirtualColorTextureLookup(Texture2DSampleBias(Material_Texture2D_31,GetMaterialSharedSampler(Material_Texture2D_31Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local215 =  1.0f ;
	float3  Local216 = (Local214.rgb - Local212.rgb);
	float3  Local217 = (Local216 * (( float3 )Local8));
	float4  Local218 = ProcessMaterialVirtualColorTextureLookup(Texture2DSampleBias(Material_Texture2D_32,GetMaterialSharedSampler(Material_Texture2D_32Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local219 =  1.0f ;
	float3  Local220 = (Local218.rgb - Local212.rgb);
	float3  Local221 = (Local220 * (( float3 )Local13));
	float3  Local222 = (Local217 + Local221);
	float4  Local223 = ProcessMaterialVirtualColorTextureLookup(Texture2DSampleBias(Material_Texture2D_33,GetMaterialSharedSampler(Material_Texture2D_33Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ,Local0.r));
	float  Local224 =  1.0f ;
	float3  Local225 = (Local223.rgb - Local212.rgb);
	float3  Local226 = (Local225 * (( float3 )Local19));
	float3  Local227 = (Local222 + Local226);
	float3  Local228 = (Local212.rgb + Local227);
	float4  Local229 = MaterialCollection0_Vectors[3];
	float  Local230 = lerp(Material_PreshaderBuffer[80].y,Material_PreshaderBuffer[80].x,Local229.r);
	float  Local231 = lerp(Material_PreshaderBuffer[81].x,Material_PreshaderBuffer[80].z,Local229.r);
	float3  Local232 = ((( float3 )1.00000000) -  float3 ( float2 (Local230,Local231),0.00000000));
	float3  Local233 = (Material_PreshaderBuffer[81].yzw * Local232);
	float3  Local234 = ((( float3 )1.00000000) - Local233);
	float3  Local235 = (Material_PreshaderBuffer[82].xyz *  float3 ( float2 (Local230,Local231),0.00000000));
	float  Local236 = ((Material_PreshaderBuffer[82].w >= 0.50000000) ? Local234.r : Local235.r);
	float  Local237 = ((Material_PreshaderBuffer[83].x >= 0.50000000) ? Local234.g : Local235.g);
	float  Local238 = ((Material_PreshaderBuffer[83].y >= 0.50000000) ? Local234.b : Local235.b);
	float3  Local239 = max( float3 ( float2 (Local236,Local237),Local238),(( float3 )0.25000000));
	float3  Local240 = min(Local239,(( float3 )0.85000002));
	float3  Local241 = max( float3 ( float2 (Local236,Local237),Local238),(( float3 )0.34999999));
	float3  Local242 = min(Local241,(( float3 )0.81000000));
	float3  Local243 = lerp(Local240,Local242,Local229.r);
	float  Local244 =  1.0f ;
	float4  Local245 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_34,Material_Texture2D_34Sampler,Local243.rg,View_MaterialTextureMipBias));
	float  Local246 =  1.0f ;
	float  Local247 =  1.0f ;
	float4  Local248 = ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material_Texture2D_34,Material_Texture2D_34Sampler,Material_PreshaderBuffer[76].xy,View_MaterialTextureMipBias));
	float  Local249 =  1.0f ;
	float3  Local250 = (Local245.rgb / Local248.rgb);
	float3  Local251 = ((( float3 )Material_PreshaderBuffer[83].z) * Local250);
	float3  Local252 = (Local251 * Local228);
	float3  Local253 = lerp(Local228,Local252,Material_PreshaderBuffer[83].w);
	float3  Local254 = CustomExpression3(Parameters,Local253);
	float3  Local255 = CustomExpression4(Parameters,Local254,Material_PreshaderBuffer[84].x, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[84].y, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[84].z, float2 (0.40000001,0.60000002));
	float  Local256 =  1.0f ;
	float4  Local257 = Texture2DSample(Material_Texture2D_35,GetMaterialSharedSampler(Material_Texture2D_35Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 );
	float  Local258 =  1.0f ;
	float3  Local259 = lerp(Local254,Local255,Local257.r);
	float3  Local260 = CustomExpression5(Parameters,Local254,Material_PreshaderBuffer[84].w, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[85].x, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[85].y, float2 (0.40000001,0.60000002));
	float3  Local261 = lerp(Local259,Local260,Local257.g);
	float3  Local262 = CustomExpression6(Parameters,Local254,Material_PreshaderBuffer[85].z, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[85].w, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[86].x, float2 (0.40000001,0.60000002));
	float3  Local263 = lerp(Local261,Local262,Local257.b);
	float3  Local264 = CustomExpression7(Parameters,Local254,Material_PreshaderBuffer[86].y, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[86].z, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[86].w, float2 (0.40000001,0.60000002));
	float3  Local265 = lerp(Local263,Local264,Local257.a);
	float3  Local266 = CustomExpression8(Parameters,Local254,Material_PreshaderBuffer[87].x, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[87].y, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[87].z, float2 (0.40000001,0.60000002));
	float3  Local267 = lerp(Local265,Local266,Local41.r);
	float3  Local268 = CustomExpression9(Parameters,Local254,Material_PreshaderBuffer[87].w, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[88].x, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[88].y, float2 (0.40000001,0.60000002));
	float3  Local269 = lerp(Local267,Local268,Local41.g);
	float3  Local270 = CustomExpression10(Parameters,Local254,Material_PreshaderBuffer[88].z, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[88].w, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[89].x, float2 (0.40000001,0.60000002));
	float3  Local271 = lerp(Local269,Local270,Local41.b);
	float3  Local272 = CustomExpression11(Parameters,Local254,Material_PreshaderBuffer[89].y, float2 (0.25000000,0.75000000),Material_PreshaderBuffer[89].z, float2 (0.30000001,0.69999999),Material_PreshaderBuffer[89].w, float2 (0.40000001,0.60000002));
	float3  Local273 = lerp(Local271,Local272,Local41.a);
	float3  Local274 = CustomExpression12(Parameters,Local273);
	float3  Local275 = PositiveClampedPow(Local274,(( float3 )Material_PreshaderBuffer[90].y));
	float3  Local276 = CustomExpression13(Parameters,Local211,Local275);
	float  Local277 = dot(Local276, float3 (0.30000001,0.58999997,0.11000000));
	float3  Local278 = lerp(Local276,(( float3 )Local277),Material_PreshaderBuffer[90].w);
	float4  Local279 = ProcessMaterialLinearColorTextureLookup(Texture2DSample(Material_Texture2D_36,GetMaterialSharedSampler(Material_Texture2D_36Sampler,View_MaterialTextureBilinearWrapedSampler), Local1 ));
	float  Local280 =  1.0f ;
	float3  Local281 = lerp(Local278,Local274,Local279.r);
	float  Local282 = ((abs(Local279.g - Material_PreshaderBuffer[92].x) > 0.00001000) ? ((Local279.g >= Material_PreshaderBuffer[92].x) ? 1.00000000 : 0.00000000) : 1.00000000);
	float3  Local283 = lerp(Local281,Local274,Local282);
	float3  Local284 = lerp(Local283,Material_PreshaderBuffer[94].xyz,Local140.r);
	float3  Local285 = lerp(Local284,Material_PreshaderBuffer[96].xyz,Local140.g);
	float3  Local286 = lerp(Local283,Local285,Material_PreshaderBuffer[64].y);
	float3  Local287 = lerp(Local286,Material_PreshaderBuffer[98].xyz,Local149);
	float  Local288 = dot(Local287, float3 (0.30000001,0.58999997,0.11000000));
	float  Local289 = (Local288.r - 0.00000000);
	float  Local290 = (Local289 / (0.55000001 - 0.00000000));
	float  Local291 = (Local290 * (1.00000000 - 0.25000000));
	float  Local292 = (Local291 + 0.25000000);
	float  Local293 = (Local115 * Local292);
	float  Local294 = (1.00000000 + Local293);
	float3  Local295 = PositiveClampedPow(Local287,(( float3 )Local294));
	float  Local296 = dot(Local295, float3 (0.30000001,0.58999997,0.11000000));
	float  Local297 = (Local116 * Material_PreshaderBuffer[98].w);
	float3  Local298 = lerp(Local295,(( float3 )Local296),Local297);
	float4  Local299 = MaterialCollection1_Vectors[0];
	float  Local300 = (Material_PreshaderBuffer[99].x * Local76);
	float  Local301 = (Material_PreshaderBuffer[99].y * Local78);
	float  Local302 = max(Local300,Local301);
	float  Local303 = (Material_PreshaderBuffer[99].z * Local81);
	float  Local304 = (Material_PreshaderBuffer[99].w * Local83);
	float  Local305 = max(Local303,Local304);
	float  Local306 = max(Local302,Local305);
	float  Local307 = lerp(Local299.r,Local299.g,Local306);
	float  Local308 = lerp(0.05000000,0.10000000,Local306);
	float  Local309 = (Material_PreshaderBuffer[100].x * Local76);
	float  Local310 = (Material_PreshaderBuffer[100].y * Local78);
	float  Local311 = max(Local309,Local310);
	float  Local312 = (Material_PreshaderBuffer[100].z * Local81);
	float  Local313 = (Material_PreshaderBuffer[100].w * Local83);
	float  Local314 = max(Local312,Local313);
	float  Local315 = max(Local311,Local314);
	float  Local316 = (Local315 + -0.01000000);
	float  Local317 = smoothstep(Local315,Local316,Local155);
	float  Local318 = lerp(Local307,Local308,Local317);
	float  Local319 = PositiveClampedPow(Local318,(0.30000001 + 1.00000000));
	float  Local320 = (Local155 * 2.00000000);
	float  Local321 = saturate(Local320);
	float  Local322 = lerp(Local319,Local318,Local321);
	float  Local323 = PositiveClampedPow(Local318,(1.00000000 / (0.30000001 + 1.00000000)));
	float  Local324 = (Local320 - 1.00000000);
	float  Local325 = saturate(Local324);
	float  Local326 = lerp(Local322,Local323,Local325);
	float  Local327 = (Material_PreshaderBuffer[101].x * Local76);
	float  Local328 = (Material_PreshaderBuffer[101].y * Local78);
	float  Local329 = max(Local327,Local328);
	float  Local330 = (Material_PreshaderBuffer[101].z * Local81);
	float  Local331 = (Material_PreshaderBuffer[101].w * Local83);
	float  Local332 = max(Local330,Local331);
	float  Local333 = max(Local329,Local332);
	float  Local334 = lerp(Local299.b,Local299.a,Local333);
	float3  Local335 = MaterialExpressionGetHairColorFromMelanin(Local326, Local334,  float3 (1.00000000,1.00000000,1.00000000));
	float  Local336 = dot(Local335.rgb, float3 (0.30000001,0.58999997,0.11000000));
	float  Local337 = lerp(0.00000000,0.89999998,Local317);
	float3  Local338 = lerp(Local335.rgb,(( float3 )Local336),Local337);
	float3  Local339 = lerp(Local298,Local338,Local206);
	float3  Local340 = lerp(Local298,Local339,Material_PreshaderBuffer[57].x);
	float3  Local341 = lerp(Local340,(( float3 )Material_PreshaderBuffer[102].y),Material_PreshaderBuffer[102].x);
	float3  Local342 = ((( float3 )Local210) + Local341);
	float3  Local343 = saturate(Local342);
	float3  Local344 = (Local341 * (( float3 )1.41400003));
	float3  Local345 = lerp(Local343,Local344,Local229.r);
	float3  Local346 = (GetRayTracingQualitySwitch() ? (Local212.rgb) : (Local345));
	float  Local347 = (Local143 - Local140.g);
	float  Local348 = saturate(Local347);
	float  Local349 = (Material_PreshaderBuffer[102].z * Local348);
	float  Local350 = lerp(Local349,0.00000000,Material_PreshaderBuffer[102].x);
	float  Local351 = (GetRayTracingQualitySwitch() ? (0.00000000) : (Local350));
	float  Local352 = (Local184 * Material_PreshaderBuffer[103].x);
	float  Local353 = (Local352 + 0.10000000);
	float  Local354 = saturate(Local353);
	float  Local355 = lerp(Material_PreshaderBuffer[103].z,Material_PreshaderBuffer[103].y,Local155);
	float  Local356 = lerp(Local354,Local355,Local91);
	float  Local357 = lerp(Local354,Local356,Material_PreshaderBuffer[57].x);
	float3  Local358 = mul(Local93, Parameters.TangentToWorld);
	float  Local359 = dot(Local358,Parameters.CameraVector);
	float  Local360 = max(0.00000000,Local359);
	float  Local361 = (1.00000000 - Local360);
	float  Local362 = abs(Local361);
	float  Local363 = max(Local362,0.00010000);
	float  Local364 = PositiveClampedPow(Local363,5.00000000);
	float  Local365 = (Local364 * (1.00000000 - 0.00000000));
	float  Local366 = (Local365 + 0.00000000);
	float  Local367 = lerp(Local357,Material_PreshaderBuffer[102].w,Local366);
	float  Local368 = (Local191 + 0.50000000);
	float  Local369 = saturate(Local368);
	float  Local370 = (Local367 * Local369);
	float  Local371 = lerp(Local370,Local357,Local229.r);
	float  Local372 = (GetRayTracingQualitySwitch() ? (0.34999999) : (Local371));
	float  Local373 = lerp(0.40000001,Material_PreshaderBuffer[103].w,Local136);
	float  Local374 = (GetRayTracingQualitySwitch() ? (Local373) : (Local158));
	float  Local375 = lerp(Material_PreshaderBuffer[104].y,Material_PreshaderBuffer[104].x,Local149);
	float  Local376 = lerp(Local375,Material_PreshaderBuffer[104].z,Local143);
	float  Local377 = lerp(Local376,Material_PreshaderBuffer[104].w,Local91);
	float  Local378 = lerp(Local376,Local377,Material_PreshaderBuffer[105].x);
	float  Local379 = lerp(Local378,0.00000000,Material_PreshaderBuffer[102].x);
	float2  Local380 = GetPixelPosition(Parameters);
	float2  Local381 = (Local380 / (( float2 )64.00000000));
	float  Local382 =  1.0f ;
	float4  Local383 = ProcessMaterialLinearGreyscaleTextureLookup(Texture2DSampleBias(Material_Texture2D_37,Material_Texture2D_37Sampler,Local381,View_MaterialTextureMipBias));
	float  Local384 =  1.0f ;
	float  Local385 = (Local383.g - 1.00000000);
	float  Local386 = (Local385 + Material_PreshaderBuffer[105].z);
	float  Local387 = saturate(Local386);
	float  Local388 = lerp((0.00000000 - 0.00000000),(0.00000000 + 1.00000000),Local387);
	float  Local389 = saturate(Local388);
	float  Local390 = min(Local379,Local389.r.r);
	float  Local391 = min(1.00000000,Local389.r.r);
	float3  Local397 = abs(Local93);
	float  Local398 = (Local397.b + 0.10000000);
	float  Local399 = saturate(Local398);
	float  Local400 = lerp(Local399,1.00000000,Local366);
	float  Local401 = (Local400 * Local189.r);
	float  Local402 = lerp(Local401,Local189.r,Local229.r);
	float  Local403 = (GetRayTracingQualitySwitch() ? (Local189.r) : (Local402));

	PixelMaterialInputs.EmissiveColor = Local104;
	PixelMaterialInputs.Opacity = Local390;
	PixelMaterialInputs.OpacityMask = Local391;
	PixelMaterialInputs.BaseColor = Local346;
	PixelMaterialInputs.Metallic = Local351;
	PixelMaterialInputs.Specular = Local372;
	PixelMaterialInputs.Roughness = Local374;
	PixelMaterialInputs.Anisotropy = 0.00000000;
	PixelMaterialInputs.Normal = Local103;
	PixelMaterialInputs.Tangent =  float3 (1.00000000,0.00000000,0.00000000);
	PixelMaterialInputs.Subsurface =  float4 ( float3 (1.00000000,1.00000000,1.00000000),Material_PreshaderBuffer[106].x);
	PixelMaterialInputs.AmbientOcclusion = Local403;
	PixelMaterialInputs.Refraction = 0;
	PixelMaterialInputs.PixelDepthOffset = 0.00000000;
	PixelMaterialInputs.ShadingModel = 5;
	PixelMaterialInputs.FrontMaterial = GetInitialisedStrataData();





	Parameters.WorldTangent = 0;

}
#line 2910 "/Engine/Generated/Material.ush"

void ClipLODTransition(float2 SvPosition, float DitherFactor)
{
	if (abs(DitherFactor) > .001)
	{
		float ArgCos = dot(floor(SvPosition.xy), float2(347.83451793, 3343.28371963));
#line 2920 "/Engine/Generated/Material.ush"
		float RandCos = cos(ArgCos);
		float RandomVal = frac(RandCos * 1000.0);
		float  RetVal = (DitherFactor < 0.0) ?
			(DitherFactor + 1.0 > RandomVal) :
			(DitherFactor < RandomVal);
		clip(RetVal - .001) ;
	}
}

void ClipLODTransition(FMaterialPixelParameters Parameters, float DitherFactor)
{
	ClipLODTransition(Parameters.SvPosition.xy, DitherFactor);
}
#line 2958 "/Engine/Generated/Material.ush"
void ClipLODTransition(FMaterialPixelParameters Parameters)
{
}
void ClipLODTransition(float2 SvPosition)
{
}


void GetMaterialClippingShadowDepth(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);

		clip(GetMaterialMask(PixelMaterialInputs)) ;
#line 2976 "/Engine/Generated/Material.ush"
}



void GetMaterialClippingVelocity(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs, bool bIsThinTranslucent)
{
	ClipLODTransition(Parameters);



		clip(GetMaterialMask(PixelMaterialInputs)) ;
#line 2990 "/Engine/Generated/Material.ush"
}
#line 3006 "/Engine/Generated/Material.ush"
void GetMaterialCoverageAndClipping(FMaterialPixelParameters Parameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(Parameters);
#line 3032 "/Engine/Generated/Material.ush"
		clip(GetMaterialMask(PixelMaterialInputs)) ;


}




uint GetDerivativeCoverageFromMask(float MaterialMask)
{
	uint Coverage = 0x0;
	if (MaterialMask > 0.01) Coverage = 0x8;
	if (MaterialMask > 0.25) Coverage = 0x9;
	if (MaterialMask > 0.50) Coverage = 0xD;
	if (MaterialMask > 0.75) Coverage = 0xF;
	return Coverage;
}


uint DiscardMaterialWithPixelCoverage(FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs)
{
	ClipLODTransition(MaterialParameters);
	float OriginalMask = GetMaterialMaskInputRaw(PixelMaterialInputs);
	float MaskClip = GetMaterialOpacityMaskClipValue();

	if (ResolvedView.NumSceneColorMSAASamples > 1)
	{
		float Mask = (OriginalMask - MaskClip) / (1.0 - MaskClip);
		uint CurrentPixelCoverage = GetDerivativeCoverageFromMask(Mask);

		clip(float(CurrentPixelCoverage) - 0.5) ;
		return CurrentPixelCoverage;
	}
	clip(OriginalMask - MaskClip) ;
	return 0xF;
}






	float  GetFloatFacingSign( bool  bIsFrontFace)
	{





		return bIsFrontFace ? +1 : -1;

}









bool IsOrthoProjection(ViewState InView)
{
	return InView.ViewToClip[3][3] >= 1.0f;
}


void CalcMaterialParametersEx(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	float4 ScreenPosition,
	bool  bIsFrontFace,
	float3 TranslatedWorldPosition,
	float3 TranslatedWorldPositionExcludingShaderOffsets)
{

	Parameters.WorldPosition_CamRelative = TranslatedWorldPosition.xyz;
	Parameters.AbsoluteWorldPosition = LWCSubtract(TranslatedWorldPosition.xyz, ResolvedView.PreViewTranslation);
#line 3119 "/Engine/Generated/Material.ush"
	Parameters.SvPosition = SvPosition;
	Parameters.ScreenPosition = ScreenPosition;
	Parameters.ViewBufferUV = ScreenPositionToBufferUV(ScreenPosition);





		if (IsOrthoProjection(ResolvedView))
		{

			Parameters.CameraVector = -ResolvedView.ViewForward;
		}
		else
		{

			Parameters.CameraVector = normalize(-Parameters.WorldPosition_CamRelative.xyz);
		}


	Parameters.LightVector = 0;

	Parameters.TwoSidedSign = 1.0f;
#line 3166 "/Engine/Generated/Material.ush"
	{
		CalcPixelMaterialInputs(Parameters, PixelMaterialInputs);
	}
}



void CalcMaterialParameters(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToResolvedScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToResolvedTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}

void CalcMaterialParametersPost(
	in out FMaterialPixelParameters Parameters,
	in out FPixelMaterialInputs PixelMaterialInputs,
	float4 SvPosition,
	bool  bIsFrontFace)
{
	float4 ScreenPosition = SvPositionToScreenPosition(SvPosition);
	float3 TranslatedWorldPosition = SvPositionToTranslatedWorld(SvPosition);

	CalcMaterialParametersEx(Parameters, PixelMaterialInputs, SvPosition, ScreenPosition, bIsFrontFace, TranslatedWorldPosition, TranslatedWorldPosition);
}


float3x3  AssembleTangentToWorld(  float3  TangentToWorld0,  float4  TangentToWorld2 )
{





	float3  TangentToWorld1 = cross(TangentToWorld2.xyz,TangentToWorld0) * TangentToWorld2.w;

	return  float3x3 (TangentToWorld0, TangentToWorld1, TangentToWorld2.xyz);
}
#line 3251 "/Engine/Generated/Material.ush"
float ApplyPixelDepthOffsetToMaterialParameters(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, out float OutDepth)
{
	float PixelDepthOffset = GetMaterialPixelDepthOffset(PixelMaterialInputs);










	float DeviceDepth = min(MaterialParameters.ScreenPosition.z / (MaterialParameters.ScreenPosition.w + PixelDepthOffset), MaterialParameters.SvPosition.z);


	PixelDepthOffset = (MaterialParameters.ScreenPosition.z - DeviceDepth * MaterialParameters.ScreenPosition.w) / DeviceDepth;


	MaterialParameters.ScreenPosition.w += PixelDepthOffset;
	MaterialParameters.SvPosition.w = MaterialParameters.ScreenPosition.w;
	MaterialParameters.AbsoluteWorldPosition = LWCAdd(MaterialParameters.AbsoluteWorldPosition, -MaterialParameters.CameraVector * PixelDepthOffset);

	OutDepth =  DeviceDepth ;

	return PixelDepthOffset;
}
#line 43 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "BasePassCommon.ush"
#line 61 "/Engine/Private/BasePassCommon.ush"
struct FSharedBasePassInterpolants
{


	float4 VertexFog : TEXCOORD7;
#line 100 "/Engine/Private/BasePassCommon.ush"
};








void ComputeVolumeUVs(float3 TranslatedWorldPosition, float3 LightingPositionOffset, out float3 InnerVolumeUVs, out float3 OuterVolumeUVs, out float FinalLerpFactor)
{

	InnerVolumeUVs = (TranslatedWorldPosition + LightingPositionOffset - View_TranslucencyLightingVolumeMin[0].xyz) * View_TranslucencyLightingVolumeInvSize[0].xyz;
	OuterVolumeUVs = (TranslatedWorldPosition + LightingPositionOffset - View_TranslucencyLightingVolumeMin[1].xyz) * View_TranslucencyLightingVolumeInvSize[1].xyz;



	float TransitionScale = 6;

	float3 LerpFactors = saturate((.5f - abs(InnerVolumeUVs - .5f)) * TransitionScale);
	FinalLerpFactor = LerpFactors.x * LerpFactors.y * LerpFactors.z;
}

float4 GetAmbientLightingVectorFromTranslucentLightingVolume(float3 InnerVolumeUVs, float3 OuterVolumeUVs, float FinalLerpFactor)
{

	float4 InnerLighting = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeAmbientInner,  View_SharedBilinearClampedSampler , InnerVolumeUVs, 0);
	float4 OuterLighting = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter,  View_SharedBilinearClampedSampler , OuterVolumeUVs, 0);


	return lerp(OuterLighting, InnerLighting, FinalLerpFactor);
}

float3 GetDirectionalLightingVectorFromTranslucentLightingVolume(float3 InnerVolumeUVs, float3 OuterVolumeUVs, float FinalLerpFactor)
{

	float3 InnerVector1 = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner,  View_SharedBilinearClampedSampler , InnerVolumeUVs, 0).rgb;
	float3 OuterVector1 = Texture3DSampleLevel(TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter,  View_SharedBilinearClampedSampler , OuterVolumeUVs, 0).rgb;


	return lerp(OuterVector1, InnerVector1, FinalLerpFactor);
}
#line 44 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "/Engine/Generated/VertexFactory.ush"
#line 1 "/Engine/Private/GpuSkinVertexFactory.ush"
#line 8 "/Engine/Private/GpuSkinVertexFactory.ush"
#line 1 "VertexFactoryCommon.ush"
#line 65 "/Engine/Private/VertexFactoryCommon.ush"
FLWCVector3 TransformLocalToWorld(float3 LocalPosition, FLWCMatrix LocalToWorld)
{

	return LWCInvariantMultiply(LocalPosition, LocalToWorld);
}

FLWCVector3 TransformLocalToWorld(float3 LocalPosition)
{
	return TransformLocalToWorld(LocalPosition, GetPrimitiveDataFromUniformBuffer().LocalToWorld);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, FLWCMatrix LocalToWorld)
{
	FLWCVector3 WorldPosition = LWCMultiply(LocalPosition, LocalToWorld);
	FLWCVector3 TranslatedWorldPosition = LWCAdd(WorldPosition, ResolvedView.PreViewTranslation);
	return float4(LWCToFloat(TranslatedWorldPosition), 1.0f);
}

float4 TransformLocalToTranslatedWorld(float3 LocalPosition, float4x4 LocalToWorld)
{
	return TransformLocalToTranslatedWorld(LocalPosition, LWCPromote(LocalToWorld));
}

float3 RotateLocalToWorld(float3 LocalDirection, float3x3 LocalToWorld, float3 InvScale)
{
	return
		InvScale.x * LocalToWorld[0] * LocalDirection.xxx +
		InvScale.y * LocalToWorld[1] * LocalDirection.yyy +
		InvScale.z * LocalToWorld[2] * LocalDirection.zzz;
}

float3 RotateLocalToWorld(float3 LocalDirection, float4x4 LocalToWorld, float3 InvScale)
{
	return RotateLocalToWorld(LocalDirection, (float3x3)LocalToWorld, InvScale);
}

float3 RotateLocalToWorld(float3 LocalDirection, FLWCMatrix LocalToWorld, float3 InvScale)
{
	return RotateLocalToWorld(LocalDirection, LWCToFloat3x3(LocalToWorld), InvScale);
}
#line 144 "/Engine/Private/VertexFactoryCommon.ush"
float2 UnitToOct( float3 N )
{
	N.xy /= dot( 1, abs(N) );
	if( N.z <= 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return N.xy;
}

float3 OctToUnit( float2 Oct )
{
	float3 N = float3( Oct, 1 - dot( 1, abs(Oct) ) );
	if( N.z < 0 )
	{
		N.xy = ( 1 - abs(N.yx) ) * ( N.xy >= 0 ? float2(1,1) : float2(-1,-1) );
	}
	return normalize(N);
}
#line 9 "/Engine/Private/GpuSkinVertexFactory.ush"
#line 1 "GpuSkinCommon.ush"
#line 51 "/Engine/Private/GpuSkinCommon.ush"
uint4 UnpackU8x4(uint Packed)
{
	uint4 Unpacked;
	Unpacked.x = (Packed >> 0) & 0xff;
	Unpacked.y = (Packed >> 8) & 0xff;
	Unpacked.z = (Packed >> 16) & 0xff;
	Unpacked.w = (Packed >> 24) & 0xff;
	return Unpacked;
}


float4 UnpackU8x4N(uint Packed)
{
	return UnpackU8x4(Packed) / 255.0f;
}


float4 UnpackS8x4N(uint Packed)
{
	return UnpackU8x4(Packed) / 127.5f - 1;
}



uint PackS8x4N(float4 Unpacked)
{
	uint Packed = asuint(
		(uint((Unpacked.x + 1.0f) * 127.499f) << 0) |
		(uint((Unpacked.y + 1.0f) * 127.499f) << 8) |
		(uint((Unpacked.z + 1.0f) * 127.499f) << 16) |
		(uint((Unpacked.w + 1.0f) * 127.499f) << 24));
	return Packed;
}



uint PackS8x3N(float3 Unpacked)
{
	uint Packed = asuint(
		(uint((Unpacked.x + 1.0f) * 127.499f) << 0) |
		(uint((Unpacked.y + 1.0f) * 127.499f) << 8) |
		(uint((Unpacked.z + 1.0f) * 127.499f) << 16));
	return Packed;
}
#line 10 "/Engine/Private/GpuSkinVertexFactory.ush"
#line 43 "/Engine/Private/GpuSkinVertexFactory.ush"
uint PerBoneMotionBlur;

uint NumBoneInfluencesParam;
#line 65 "/Engine/Private/GpuSkinVertexFactory.ush"
struct FVertexFactoryInput
{
	float4 Position : ATTRIBUTE0;

	float3  TangentX : ATTRIBUTE1;


	float4  TangentZ : ATTRIBUTE2;




	uint4 BlendIndices : ATTRIBUTE3;
	uint4 BlendIndicesExtra : ATTRIBUTE14;
	float4 BlendWeights : ATTRIBUTE4;
	float4 BlendWeightsExtra : ATTRIBUTE15;






	float2 TexCoords0 : ATTRIBUTE5;
#line 117 "/Engine/Private/GpuSkinVertexFactory.ush"
	float4 Color : ATTRIBUTE13;


	uint InstanceIdOffset : ATTRIBUTE16 ; uint DrawInstanceId : SV_InstanceID;
};
#line 187 "/Engine/Private/GpuSkinVertexFactory.ush"
struct FVertexFactoryInterpolantsVSToPS
{
	float4 TangentToWorld0 : TEXCOORD10_centroid; float4 TangentToWorld2 : TEXCOORD11_centroid;
#line 197 "/Engine/Private/GpuSkinVertexFactory.ush"
	float4 TexCoords[( 1 +1)/2] : TEXCOORD0;



	nointerpolation uint EyeIndex : PACKED_EYE_INDEX;



	nointerpolation uint PrimitiveId : PRIMITIVE_ID;

};

struct FVertexFactoryRayTracingInterpolants
{
	FVertexFactoryInterpolantsVSToPS InterpolantsVSToPS;
};


float2 GetUV(FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex)
{
	float4 UVVector = Interpolants.TexCoords[UVIndex / 2];
	return UVIndex % 2 ? UVVector.zw : UVVector.xy;
}

void SetUV(inout FVertexFactoryInterpolantsVSToPS Interpolants, int UVIndex, float2 InValue)
{
	[flatten]
	if (UVIndex % 2)
	{
		Interpolants.TexCoords[UVIndex / 2].zw = InValue;
	}
	else
	{
		Interpolants.TexCoords[UVIndex / 2].xy = InValue;
	}
}



FMaterialPixelParameters GetMaterialPixelParameters(FVertexFactoryInterpolantsVSToPS Interpolants, float4 SvPosition)
{

	FMaterialPixelParameters Result = MakeInitializedMaterialPixelParameters();


	[unroll]
	for(int CoordinateIndex = 0;CoordinateIndex <  1 ;CoordinateIndex++)
	{
		Result.TexCoords[CoordinateIndex] = GetUV(Interpolants, CoordinateIndex);
	}


	float3  TangentToWorld0 = Interpolants.TangentToWorld0.xyz;
	float4  TangentToWorld2 = Interpolants.TangentToWorld2;
	Result.TangentToWorld = AssembleTangentToWorld( TangentToWorld0, TangentToWorld2 );
#line 255 "/Engine/Private/GpuSkinVertexFactory.ush"
	Result.UnMirrored = TangentToWorld2.w;



	Result.VertexColor = 0;

	Result.TwoSidedSign = 1;


	Result.PrimitiveId = Interpolants.PrimitiveId;


	return Result;
}






 Buffer<float4> BoneMatrices;

 Buffer<float4> PreviousBoneMatrices;




struct FVertexFactoryIntermediates
{
	float3 InvNonUniformScale;
	float DeterminantSign;

	FLWCMatrix LocalToWorld;
	FLWCInverseMatrix WorldToLocal;
	FLWCMatrix PrevLocalToWorld;


	float3x4  BlendMatrix;


	float3 UnpackedPosition;


	float3x3 TangentToLocal;


	float4 Color;
#line 312 "/Engine/Private/GpuSkinVertexFactory.ush"
	FSceneDataIntermediates SceneData;
};

FPrimitiveSceneData GetPrimitiveData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.Primitive;
}

FInstanceSceneData GetInstanceData(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceData;
}


FMaterialVertexParameters GetMaterialVertexParameters(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 WorldPosition, float3x3 TangentToLocal)
{
	FMaterialVertexParameters Result = (FMaterialVertexParameters)0;
	Result.SceneData = Intermediates.SceneData;
	Result.WorldPosition = WorldPosition;
	Result.VertexColor = Intermediates.Color;
	Result.TangentToWorld = mul(TangentToLocal, LWCToFloat3x3(Intermediates.LocalToWorld));
	Result.PreSkinnedPosition = Intermediates.UnpackedPosition.xyz;
	Result.PreSkinnedNormal = Input.TangentZ.xyz;


	Result.PrevFrameLocalToWorld = Intermediates.PrevLocalToWorld;




	Result.TexCoords[0] = Input.TexCoords0;
#line 356 "/Engine/Private/GpuSkinVertexFactory.ush"
	return Result;
}
#line 473 "/Engine/Private/GpuSkinVertexFactory.ush"
float3 UnpackedPosition( FVertexFactoryInput Input )
{
		return float3(Input.Position.xyz);
}
#line 509 "/Engine/Private/GpuSkinVertexFactory.ush"
float3x4  GetBoneMatrix(int Index)
{

	float4 A = BoneMatrices[Index * 3];
	float4 B = BoneMatrices[Index * 3 + 1];
	float4 C = BoneMatrices[Index * 3 + 2];
	return  float3x4 (A,B,C);
#line 519 "/Engine/Private/GpuSkinVertexFactory.ush"
}

float3x4  CalcBoneMatrix( FVertexFactoryInput Input )
{
#line 548 "/Engine/Private/GpuSkinVertexFactory.ush"
	float3x4  BoneMatrix = Input.BlendWeights.x * GetBoneMatrix(Input.BlendIndices.x);
	BoneMatrix += Input.BlendWeights.y * GetBoneMatrix(Input.BlendIndices.y);


	BoneMatrix += Input.BlendWeights.z * GetBoneMatrix(Input.BlendIndices.z);
	BoneMatrix += Input.BlendWeights.w * GetBoneMatrix(Input.BlendIndices.w);
	if (NumBoneInfluencesParam >  4 )
	{
		BoneMatrix += Input.BlendWeightsExtra.x * GetBoneMatrix(Input.BlendIndicesExtra.x);
		BoneMatrix += Input.BlendWeightsExtra.y * GetBoneMatrix(Input.BlendIndicesExtra.y);
		BoneMatrix += Input.BlendWeightsExtra.z * GetBoneMatrix(Input.BlendIndicesExtra.z);
		BoneMatrix += Input.BlendWeightsExtra.w * GetBoneMatrix(Input.BlendIndicesExtra.w);
	}


	return BoneMatrix;
}

float3x4  GetPreviousBoneMatrix(int Index)
{

	float4 A = PreviousBoneMatrices[Index * 3 + 0];
	float4 B = PreviousBoneMatrices[Index * 3 + 1];
	float4 C = PreviousBoneMatrices[Index * 3 + 2];
	return  float3x4 (A,B,C);
#line 576 "/Engine/Private/GpuSkinVertexFactory.ush"
}

float3x4  CalcPreviousBoneMatrix( FVertexFactoryInput Input )
{
#line 605 "/Engine/Private/GpuSkinVertexFactory.ush"
	float3x4  BoneMatrix = Input.BlendWeights.x * GetPreviousBoneMatrix(Input.BlendIndices.x);
	BoneMatrix += Input.BlendWeights.y * GetPreviousBoneMatrix(Input.BlendIndices.y);


	BoneMatrix += Input.BlendWeights.z * GetPreviousBoneMatrix(Input.BlendIndices.z);
	BoneMatrix += Input.BlendWeights.w * GetPreviousBoneMatrix(Input.BlendIndices.w);
	if (NumBoneInfluencesParam >  4 )
	{
		BoneMatrix += Input.BlendWeightsExtra.x * GetPreviousBoneMatrix(Input.BlendIndicesExtra.x);
		BoneMatrix += Input.BlendWeightsExtra.y * GetPreviousBoneMatrix(Input.BlendIndicesExtra.y);
		BoneMatrix += Input.BlendWeightsExtra.z * GetPreviousBoneMatrix(Input.BlendIndicesExtra.z);
		BoneMatrix += Input.BlendWeightsExtra.w * GetPreviousBoneMatrix(Input.BlendIndicesExtra.w);
	}


	return BoneMatrix;
}


float3 SkinPosition( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{



	float3 Position = Intermediates.UnpackedPosition;




	Position = mul(Intermediates.BlendMatrix, float4(Position, 1));

	return Position;
}


float3 SkinPreviousPosition( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{



	float3 Position = Intermediates.UnpackedPosition;


	float3x4  BlendMatrix = Intermediates.BlendMatrix;



	if(PerBoneMotionBlur)
	{
		BlendMatrix = CalcPreviousBoneMatrix( Input );
	}



	Position = mul(BlendMatrix, float4(Position, 1));

	return Position;
}

float3x3 SkinTangents( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates )
{
	float3x3 TangentToLocal;



	float3  LocalTangentX = Input.TangentX;

	float4  LocalTangentZ = Input.TangentZ;
#line 775 "/Engine/Private/GpuSkinVertexFactory.ush"
	TangentToLocal[0] = normalize(mul( Intermediates.BlendMatrix, float4(LocalTangentX, 0) ));
	TangentToLocal[2] = normalize(mul( Intermediates.BlendMatrix, float4(LocalTangentZ.xyz, 0) ));



	 TangentToLocal[1] = normalize(cross(TangentToLocal[2], TangentToLocal[0]) * LocalTangentZ.w);




	return TangentToLocal;

}

FVertexFactoryIntermediates GetVertexFactoryIntermediates(FVertexFactoryInput Input)
{
	FVertexFactoryIntermediates Intermediates;
	Intermediates.SceneData =  GetSceneDataIntermediates( Input.InstanceIdOffset, Input.DrawInstanceId) ;
	Intermediates.InvNonUniformScale = GetInstanceData(Intermediates).InvNonUniformScale;
	Intermediates.DeterminantSign = GetInstanceData(Intermediates).DeterminantSign;
	Intermediates.LocalToWorld = GetInstanceData(Intermediates).LocalToWorld;
	Intermediates.WorldToLocal = GetInstanceData(Intermediates).WorldToLocal;
	Intermediates.PrevLocalToWorld = GetInstanceData(Intermediates).PrevLocalToWorld;
	Intermediates.UnpackedPosition = UnpackedPosition(Input);
#line 818 "/Engine/Private/GpuSkinVertexFactory.ush"
	Intermediates.BlendMatrix = CalcBoneMatrix( Input );


	Intermediates.TangentToLocal = SkinTangents(Input, Intermediates);


	Intermediates.Color = Input.Color  .rgba ;

	return Intermediates;
}

float4 CalcWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3 SkinnedPosition = SkinPosition(Input, Intermediates);
#line 840 "/Engine/Private/GpuSkinVertexFactory.ush"
	return TransformLocalToTranslatedWorld(SkinnedPosition, Intermediates.LocalToWorld);
}
#line 849 "/Engine/Private/GpuSkinVertexFactory.ush"
float3x3 VertexFactoryGetTangentToLocal( FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.TangentToLocal;
}

float4 VertexFactoryGetWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	return CalcWorldPosition(Input, Intermediates);
}

float4 VertexFactoryGetRasterizedWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float4 InWorldPosition)
{
	return InWorldPosition;
}

float3 VertexFactoryGetPositionForVertexLighting(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, float3 TranslatedWorldPosition)
{
	return TranslatedWorldPosition;
}

void CalcTangentToWorld(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, out float3 TangentToWorld0, out float4 TangentToWorld2)
{
	float3x3 LocalToWorld = LWCToFloat3x3(Intermediates.LocalToWorld);


	float3  InvScale = Intermediates.InvNonUniformScale;
	LocalToWorld[0] *= InvScale.x;
	LocalToWorld[1] *= InvScale.y;
	LocalToWorld[2] *= InvScale.z;

	float3x3 TangentToWorld = mul(Intermediates.TangentToLocal, LocalToWorld);

	TangentToWorld0 = TangentToWorld[0];
	TangentToWorld2 = float4(TangentToWorld[2], Input.TangentZ.w * Intermediates.DeterminantSign);
}

float3 VertexFactoryGetWorldNormal(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float3 TangentToWorld0;
	float4 TangentToWorld2;
	CalcTangentToWorld(Input, Intermediates, TangentToWorld0, TangentToWorld2);

	return TangentToWorld2.xyz;
}

FVertexFactoryInterpolantsVSToPS VertexFactoryGetInterpolantsVSToPS(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates, FMaterialVertexParameters VertexParameters)
{
	FVertexFactoryInterpolantsVSToPS Interpolants;
	Interpolants = (FVertexFactoryInterpolantsVSToPS)0;


	float2 CustomizedUVs[ 1 ];


	CustomizedUVs[ 1  - 1] = float2(0, 0);

	GetMaterialCustomizedUVs(VertexParameters, CustomizedUVs);
	GetCustomInterpolators(VertexParameters, CustomizedUVs);

	[unroll]
	for (int CoordinateIndex = 0; CoordinateIndex <  1 ; CoordinateIndex++)
	{
		SetUV(Interpolants, CoordinateIndex, CustomizedUVs[CoordinateIndex]);
	}


	Interpolants.TangentToWorld0.w = 0;
	CalcTangentToWorld(Input, Intermediates, Interpolants.TangentToWorld0.xyz, Interpolants.TangentToWorld2);
#line 926 "/Engine/Private/GpuSkinVertexFactory.ush"
	Interpolants.EyeIndex = 0;



	Interpolants.PrimitiveId = Intermediates.SceneData.PrimitiveId;


	return Interpolants;
}


float4 VertexFactoryGetPreviousWorldPosition(FVertexFactoryInput Input, FVertexFactoryIntermediates Intermediates)
{
	float4x4 PreviousLocalToWorldTranslated = LWCMultiplyTranslation(Intermediates.PrevLocalToWorld, ResolvedView.PrevPreViewTranslation);
	float3 PrevSkinnedPosition = SkinPreviousPosition(Input, Intermediates);
#line 951 "/Engine/Private/GpuSkinVertexFactory.ush"
	return mul(float4(PrevSkinnedPosition,1), PreviousLocalToWorldTranslated);
}
#line 1009 "/Engine/Private/GpuSkinVertexFactory.ush"
float4 VertexFactoryGetTranslatedPrimitiveVolumeBounds(FVertexFactoryInterpolantsVSToPS Interpolants)
{
	return 0;
}

uint VertexFactoryGetPrimitiveId(FVertexFactoryInterpolantsVSToPS Interpolants)
{

	return Interpolants.PrimitiveId;
#line 1021 "/Engine/Private/GpuSkinVertexFactory.ush"
}
#line 1023 "/Engine/Private/GpuSkinVertexFactory.ush"
#line 1 "VertexFactoryDefaultInterface.ush"







uint VertexFactoryGetViewIndex(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.ViewIndex;
}

uint VertexFactoryGetInstanceIdLoadIndex(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceIdLoadIndex;
}

FLWCMatrix VertexFactoryGetLocalToWorld(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceData.LocalToWorld;
}

FLWCInverseMatrix VertexFactoryGetWorldToLocal(FVertexFactoryIntermediates Intermediates)
{
	return Intermediates.SceneData.InstanceData.WorldToLocal;
}
#line 1024 "/Engine/Private/GpuSkinVertexFactory.ush"
#line 2 "/Engine/Generated/VertexFactory.ush"
#line 45 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "LightmapCommon.ush"
#line 4 "/Engine/Private/LightmapCommon.ush"
#line 1 "/Engine/Generated/UniformBuffers/PrecomputedLightingBuffer.ush"
#line 5 "/Engine/Private/LightmapCommon.ush"
#line 1 "VolumetricLightmapShared.ush"
#line 25 "/Engine/Private/VolumetricLightmapShared.ush"
float3 ComputeVolumetricLightmapBrickTextureUVs(float3 WorldPosition)
{

	float3 IndirectionVolumeUVs = clamp(WorldPosition * View_VolumetricLightmapWorldToUVScale + View_VolumetricLightmapWorldToUVAdd, 0.0f, .99f);
	float3 IndirectionTextureTexelCoordinate = IndirectionVolumeUVs * View_VolumetricLightmapIndirectionTextureSize;
	float4 BrickOffsetAndSize = View_VolumetricLightmapIndirectionTexture.Load(int4(IndirectionTextureTexelCoordinate, 0));

	float PaddedBrickSize = View_VolumetricLightmapBrickSize + 1;
	return (BrickOffsetAndSize.xyz * PaddedBrickSize + frac(IndirectionTextureTexelCoordinate / BrickOffsetAndSize.w) * View_VolumetricLightmapBrickSize + .5f) * View_VolumetricLightmapBrickTexelSize;
}

float3 GetVolumetricLightmapAmbient(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_VolumetricLightmapBrickAmbientVector,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0).xyz;
}

FOneBandSHVectorRGB GetVolumetricLightmapSH1(float3 BrickTextureUVs)
{
	float3 AmbientVector = GetVolumetricLightmapAmbient(BrickTextureUVs);

	FOneBandSHVectorRGB IrradianceSH;
	IrradianceSH.R.V = AmbientVector.x;
	IrradianceSH.G.V = AmbientVector.y;
	IrradianceSH.B.V = AmbientVector.z;

	return IrradianceSH;
}

void GetVolumetricLightmapSHCoefficients0(float3 BrickTextureUVs, out float3 AmbientVector, out float4 SHCoefficients0Red, out float4 SHCoefficients0Green, out float4 SHCoefficients0Blue)
{
	AmbientVector = GetVolumetricLightmapAmbient(BrickTextureUVs);
	SHCoefficients0Red = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients0,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0) * 2 - 1;
	SHCoefficients0Green = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients2,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0) * 2 - 1;
	SHCoefficients0Blue = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients4,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0) * 2 - 1;


	float4 SHDenormalizationScales0 = float4(
		0.488603f / 0.282095f,
		0.488603f / 0.282095f,
		0.488603f / 0.282095f,
		1.092548f / 0.282095f);

	SHCoefficients0Red = SHCoefficients0Red * AmbientVector.x * SHDenormalizationScales0;
	SHCoefficients0Green = SHCoefficients0Green * AmbientVector.y * SHDenormalizationScales0;
	SHCoefficients0Blue = SHCoefficients0Blue * AmbientVector.z * SHDenormalizationScales0;
}

FTwoBandSHVectorRGB GetVolumetricLightmapSH2(float3 BrickTextureUVs)
{
	float3 AmbientVector;
	float4 SHCoefficients0Red;
	float4 SHCoefficients0Green;
	float4 SHCoefficients0Blue;
	GetVolumetricLightmapSHCoefficients0(BrickTextureUVs, AmbientVector, SHCoefficients0Red, SHCoefficients0Green, SHCoefficients0Blue);

	FTwoBandSHVectorRGB IrradianceSH;

	IrradianceSH.R.V = float4(AmbientVector.x, SHCoefficients0Red.xyz);
	IrradianceSH.G.V = float4(AmbientVector.y, SHCoefficients0Green.xyz);
	IrradianceSH.B.V = float4(AmbientVector.z, SHCoefficients0Blue.xyz);

	return IrradianceSH;
}

FThreeBandSHVectorRGB GetVolumetricLightmapSH3(float3 BrickTextureUVs)
{
	float3 AmbientVector;
	float4 SHCoefficients0Red;
	float4 SHCoefficients0Green;
	float4 SHCoefficients0Blue;
	GetVolumetricLightmapSHCoefficients0(BrickTextureUVs, AmbientVector, SHCoefficients0Red, SHCoefficients0Green, SHCoefficients0Blue);

	float4 SHCoefficients1Red = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients1,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0) * 2 - 1;
	float4 SHCoefficients1Green = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients3,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0) * 2 - 1;
	float4 SHCoefficients1Blue = Texture3DSampleLevel(View_VolumetricLightmapBrickSHCoefficients5,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0) * 2 - 1;

	float4 SHDenormalizationScales1 = float4(
		1.092548f / 0.282095f,
		4.0f * 0.315392f / 0.282095f,
		1.092548f / 0.282095f,
		2.0f * 0.546274f / 0.282095f);

	SHCoefficients1Red = SHCoefficients1Red * AmbientVector.x * SHDenormalizationScales1;
	SHCoefficients1Green = SHCoefficients1Green * AmbientVector.y * SHDenormalizationScales1;
	SHCoefficients1Blue = SHCoefficients1Blue * AmbientVector.z * SHDenormalizationScales1;

	FThreeBandSHVectorRGB IrradianceSH;

	IrradianceSH.R.V0 = float4(AmbientVector.x, SHCoefficients0Red.xyz);
	IrradianceSH.R.V1 = float4(SHCoefficients0Red.w, SHCoefficients1Red.xyz);
	IrradianceSH.R.V2 = SHCoefficients1Red.w;

	IrradianceSH.G.V0 = float4(AmbientVector.y, SHCoefficients0Green.xyz);
	IrradianceSH.G.V1 = float4(SHCoefficients0Green.w, SHCoefficients1Green.xyz);
	IrradianceSH.G.V2 = SHCoefficients1Green.w;

	IrradianceSH.B.V0 = float4(AmbientVector.z, SHCoefficients0Blue.xyz);
	IrradianceSH.B.V1 = float4(SHCoefficients0Blue.w, SHCoefficients1Blue.xyz);
	IrradianceSH.B.V2 = SHCoefficients1Blue.w;

	return IrradianceSH;
}

float3 GetVolumetricLightmapSkyBentNormal(float3 BrickTextureUVs)
{
	float3 SkyBentNormal = Texture3DSampleLevel(View_SkyBentNormalBrickTexture,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0).xyz * 2 - 1;
	return SkyBentNormal;
}

float GetVolumetricLightmapDirectionalLightShadowing(float3 BrickTextureUVs)
{
	return Texture3DSampleLevel(View_DirectionalLightShadowingBrickTexture,  View_SharedBilinearClampedSampler , BrickTextureUVs, 0).x;
}
#line 6 "/Engine/Private/LightmapCommon.ush"
#line 14 "/Engine/Private/LightmapCommon.ush"
#line 1 "LightmapData.ush"
#line 16 "/Engine/Private/LightmapData.ush"
struct FLightmapSceneData
{
	float4 StaticShadowMapMasks;
	float4 InvUniformPenumbraSizes;
	float4 LightMapCoordinateScaleBias;
	float4 ShadowMapCoordinateScaleBias;
	float4 LightMapScale[2];
	float4 LightMapAdd[2];
	uint4 LightmapVTPackedPageTableUniform[2];
	uint4 LightmapVTPackedUniform[5];
};
#line 35 "/Engine/Private/LightmapData.ush"
float4 LoadLightmapDataElement(uint Index)
{




	{ } ;
	return View_LightmapSceneData[Index];

}


FLightmapSceneData GetLightmapData(uint LightmapDataIndex)
{



	FLightmapSceneData LightmapData;
	uint LightmapDataBaseOffset = LightmapDataIndex *  15 ;
	LightmapData.StaticShadowMapMasks = LoadLightmapDataElement(LightmapDataBaseOffset + 0);
	LightmapData.InvUniformPenumbraSizes = LoadLightmapDataElement(LightmapDataBaseOffset + 1);
	LightmapData.LightMapCoordinateScaleBias = LoadLightmapDataElement(LightmapDataBaseOffset + 2);
	LightmapData.ShadowMapCoordinateScaleBias = LoadLightmapDataElement(LightmapDataBaseOffset + 3);
	LightmapData.LightMapScale[0] = LoadLightmapDataElement(LightmapDataBaseOffset + 4);
	LightmapData.LightMapScale[1] = LoadLightmapDataElement(LightmapDataBaseOffset + 5);
	LightmapData.LightMapAdd[0] = LoadLightmapDataElement(LightmapDataBaseOffset + 6);
	LightmapData.LightMapAdd[1] = LoadLightmapDataElement(LightmapDataBaseOffset + 7);
	LightmapData.LightmapVTPackedPageTableUniform[0] = asuint(LoadLightmapDataElement(LightmapDataBaseOffset + 8));
	LightmapData.LightmapVTPackedPageTableUniform[1] = asuint(LoadLightmapDataElement(LightmapDataBaseOffset + 9));

	[unroll]
	for (uint i = 0u; i < 5u; ++i)
	{
		LightmapData.LightmapVTPackedUniform[i] = asuint(LoadLightmapDataElement(LightmapDataBaseOffset + 10 + i));
	}

	return LightmapData;
}
#line 15 "/Engine/Private/LightmapCommon.ush"







float2 ScaleLightmapUV(float2 UV, float2 Scale)
{
	return UV * Scale;
}

FloatDeriv2 ScaleLightmapUV(FloatDeriv2 UV, float2 Scale)
{
	UV.Value *= Scale;
	UV.Ddx *= Scale;
	UV.Ddy *= Scale;
	return UV;
}
#line 211 "/Engine/Private/LightmapCommon.ush"
float4  GetPrecomputedShadowMasks( float  LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters, float3 VolumetricLightmapBrickTextureUVs)
{
#line 244 "/Engine/Private/LightmapCommon.ush"
		float DirectionalLightShadowing = 1.0f;
#line 253 "/Engine/Private/LightmapCommon.ush"
		[branch]
		if ((GetPrimitiveData(MaterialParameters).Flags &  0x4 ) != 0)
		{
#line 261 "/Engine/Private/LightmapCommon.ush"
			DirectionalLightShadowing = GetVolumetricLightmapDirectionalLightShadowing(VolumetricLightmapBrickTextureUVs);
		}


		return  float4 (DirectionalLightShadowing, 1, 1, 1);
#line 272 "/Engine/Private/LightmapCommon.ush"
}


float  GetPrimaryPrecomputedShadowMask( float  LightmapVTPageTableResult, FVertexFactoryInterpolantsVSToPS Interpolants, FMaterialPixelParameters MaterialParameters)
{
#line 311 "/Engine/Private/LightmapCommon.ush"
	return 1.0f;
}
#line 46 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "PlanarReflectionShared.ush"
#line 7 "/Engine/Private/PlanarReflectionShared.ush"
float4  ComputePlanarReflections(float3 TranslatedWorldPosition,  float3  WorldNormal,  float  Roughness, SamplerState SharedClampSampler)
{
	float4  OutPlanarReflection = 0;

	float PlaneDistance = dot( OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane , float4(TranslatedWorldPosition, -1));
	float  DistanceFade = 1 - saturate(abs(PlaneDistance) *  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters .x +  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters .y);

	float3 PlaneOriginToWorldPosition = TranslatedWorldPosition -  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionOrigin .xyz;
	float XAxisDistance = dot(PlaneOriginToWorldPosition,  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis .xyz);
	float  XAxisFade = saturate(( OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionXAxis .w - abs(XAxisDistance)) *  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters .x);
	float YAxisDistance = dot(PlaneOriginToWorldPosition,  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis .xyz);
	float  YAxisFade = saturate(( OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionYAxis .w - abs(YAxisDistance)) *  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters .x);
	DistanceFade *= XAxisFade * YAxisFade;

	float  AngleFade = saturate(dot( OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane .xyz, WorldNormal) *  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2 .x +  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters2 .y);
	float  RoughnessFade = 1 - saturate((Roughness - .2f) * 10.0f);
	float  FinalFade = DistanceFade * AngleFade * RoughnessFade;

	[branch]
	if (FinalFade > 0)
	{

		float3 CameraToPixel = normalize(TranslatedWorldPosition - ResolvedView.TranslatedWorldCameraOrigin);

		float3 MirroredCameraVector = reflect(CameraToPixel, - OpaqueBasePass_Shared_PlanarReflection_ReflectionPlane .xyz);

		float3  MirroredNormal = mul(WorldNormal,  OpaqueBasePass_Shared_PlanarReflection_InverseTransposeMirrorMatrix ).xyz;

		float3  MirroredReflectionVectorOffNormal = reflect(MirroredCameraVector, MirroredNormal);



		float3 VirtualReflectionSpherePosition = TranslatedWorldPosition + MirroredReflectionVectorOffNormal *  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionParameters .z;

		float3 ViewVirtualReflectionSpherePosition = mul(float4(VirtualReflectionSpherePosition, 1), ResolvedView.TranslatedWorldToView).xyz;

		float4 ClipVirtualReflectionSpherePosition = mul(float4(ViewVirtualReflectionSpherePosition, 1),  OpaqueBasePass_Shared_PlanarReflection_ProjectionWithExtraFOV [ResolvedView.StereoPassIndex]);

		uint EyeIndex = 0;


		if ( OpaqueBasePass_Shared_PlanarReflection_bIsStereo )
		{
			EyeIndex = ResolvedView.StereoPassIndex;
		}


		float2  NDC = clamp(ClipVirtualReflectionSpherePosition.xy / ClipVirtualReflectionSpherePosition.w, - OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound ,  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenBound );
		float2  ViewportUV = NDC *  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias [EyeIndex].xy +  OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionScreenScaleBias [EyeIndex].zw;

		float4  PlanarReflectionTextureValue = Texture2DSampleLevel(
			OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture ,

			SharedClampSampler,
#line 64 "/Engine/Private/PlanarReflectionShared.ush"
			ViewportUV,
			0);


		FinalFade *= PlanarReflectionTextureValue.a;
		OutPlanarReflection.rgb = PlanarReflectionTextureValue.rgb * RoughnessFade;
		OutPlanarReflection.a = FinalFade;
	}

	return OutPlanarReflection;
}
#line 47 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "BRDF.ush"
#line 9 "/Engine/Private/BRDF.ush"
struct BxDFContext
{
	float NoV;
	float NoL;
	float VoL;
	float NoH;
	float VoH;
	float XoV;
	float XoL;
	float XoH;
	float YoV;
	float YoL;
	float YoH;

};

void Init( inout BxDFContext Context,  float3  N,  float3  V,  float3  L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );



	Context.XoV = 0.0f;
	Context.XoL = 0.0f;
	Context.XoH = 0.0f;
	Context.YoV = 0.0f;
	Context.YoL = 0.0f;
	Context.YoH = 0.0f;
}

void Init( inout BxDFContext Context,  float3  N,  float3  X,  float3  Y,  float3  V,  float3  L )
{
	Context.NoL = dot(N, L);
	Context.NoV = dot(N, V);
	Context.VoL = dot(V, L);
	float InvLenH = rsqrt( 2 + 2 * Context.VoL );
	Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
	Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );



	Context.XoV = dot(X, V);
	Context.XoL = dot(X, L);
	Context.XoH = (Context.XoL + Context.XoV) * InvLenH;
	Context.YoV = dot(Y, V);
	Context.YoL = dot(Y, L);
	Context.YoH = (Context.YoL + Context.YoV) * InvLenH;
}


void SphereMaxNoH( inout BxDFContext Context, float SinAlpha, bool bNewtonIteration )
{
	if( SinAlpha > 0 )
	{
		float CosAlpha = sqrt( 1 - Pow2( SinAlpha ) );

		float RoL = 2 * Context.NoL * Context.NoV - Context.VoL;
		if( RoL >= CosAlpha )
		{
			Context.NoH = 1;
			Context.XoH = 0;
			Context.YoH = 0;
			Context.VoH = abs( Context.NoV );
		}
		else
		{
			float rInvLengthT = SinAlpha * rsqrt( 1 - RoL*RoL );
			float NoTr = rInvLengthT * ( Context.NoV - RoL * Context.NoL );
#line 87 "/Engine/Private/BRDF.ush"
			float VoTr = rInvLengthT * ( 2 * Context.NoV*Context.NoV - 1 - RoL * Context.VoL );

			if (bNewtonIteration)
			{

				float NxLoV = sqrt( saturate( 1 - Pow2(Context.NoL) - Pow2(Context.NoV) - Pow2(Context.VoL) + 2 * Context.NoL * Context.NoV * Context.VoL ) );

				float NoBr = rInvLengthT * NxLoV;
				float VoBr = rInvLengthT * NxLoV * 2 * Context.NoV;

				float NoLVTr = Context.NoL * CosAlpha + Context.NoV + NoTr;
				float VoLVTr = Context.VoL * CosAlpha + 1 + VoTr;

				float p = NoBr * VoLVTr;
				float q = NoLVTr * VoLVTr;
				float s = VoBr * NoLVTr;

				float xNum = q * ( -0.5 * p + 0.25 * VoBr * NoLVTr );
				float xDenom = p*p + s * (s - 2*p) + NoLVTr * ( (Context.NoL * CosAlpha + Context.NoV) * Pow2(VoLVTr) + q * (-0.5 * (VoLVTr + Context.VoL * CosAlpha) - 0.5) );
				float TwoX1 = 2 * xNum / ( Pow2(xDenom) + Pow2(xNum) );
				float SinTheta = TwoX1 * xDenom;
				float CosTheta = 1.0 - TwoX1 * xNum;
				NoTr = CosTheta * NoTr + SinTheta * NoBr;
				VoTr = CosTheta * VoTr + SinTheta * VoBr;
			}

			Context.NoL = Context.NoL * CosAlpha + NoTr;
#line 119 "/Engine/Private/BRDF.ush"
			Context.VoL = Context.VoL * CosAlpha + VoTr;

			float InvLenH = rsqrt( 2 + 2 * Context.VoL );
			Context.NoH = saturate( ( Context.NoL + Context.NoV ) * InvLenH );
#line 128 "/Engine/Private/BRDF.ush"
			Context.VoH = saturate( InvLenH + InvLenH * Context.VoL );
		}
	}
}
#line 258 "/Engine/Private/BRDF.ush"
float3 Diffuse_Lambert( float3 DiffuseColor )
{
	return DiffuseColor * (1 / PI);
}


float3 Diffuse_Burley( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float FD90 = 0.5 + 2 * VoH * VoH * Roughness;
	float FdV = 1 + (FD90 - 1) * Pow5( 1 - NoV );
	float FdL = 1 + (FD90 - 1) * Pow5( 1 - NoL );
	return DiffuseColor * ( (1 / PI) * FdV * FdL );
}


float3 Diffuse_OrenNayar( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float a = Roughness * Roughness;
	float s = a;
	float s2 = s * s;
	float VoL = 2 * VoH * VoH - 1;
	float Cosri = VoL - NoV * NoL;
	float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
	float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? rcp( max( NoL, NoV ) ) : 1 );
	return DiffuseColor / PI * ( C1 + C2 ) * ( 1 + Roughness * 0.5 );
}


float3 Diffuse_Gotanda( float3 DiffuseColor, float Roughness, float NoV, float NoL, float VoH )
{
	float a = Roughness * Roughness;
	float a2 = a * a;
	float F0 = 0.04;
	float VoL = 2 * VoH * VoH - 1;
	float Cosri = VoL - NoV * NoL;

	float a2_13 = a2 + 1.36053;
	float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - NoV, 1 + rcp(39*a2*a2+1) ) + 1 );

	float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - Pow5( 1 - NoL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (NoL - 1) ) * NoL;
	float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * NoV) ) ) * ( 1 - pow( 1 - NoL, ( 1 - 0.3726732 * NoV * NoV ) / ( 0.188566 + 0.38841 * NoV ) ) );
	float Bp = Cosri < 0 ? 1.4 * NoV * NoL * Cosri : Cosri;
	float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
	return DiffuseColor / PI * Lr;
#line 311 "/Engine/Private/BRDF.ush"
}



float3 Diffuse_Chan( float3 DiffuseColor, float a2, float NoV, float NoL, float VoH, float NoH, float RetroReflectivityWeight)
{

	NoV = saturate(NoV);
	NoL = saturate(NoL);
	VoH = saturate(VoH);
	NoH = saturate(NoH);


	float g = saturate( (1.0 / 18.0) * log2( 2 / a2 - 1 ) );

	float F0 = VoH + Pow5( 1 - VoH );
	float FdV = 1 - 0.75 * Pow5( 1 - NoV );
	float FdL = 1 - 0.75 * Pow5( 1 - NoL );


	float Fd = lerp( F0, FdV * FdL, saturate( 2.2 * g - 0.5 ) );


	float Fb = ( (34.5 * g - 59 ) * g + 24.5 ) * VoH * exp2( -max( 73.2 * g - 21.2, 8.9 ) * sqrt( NoH ) );

	Fb *= RetroReflectivityWeight;

	return DiffuseColor * ( (1 / PI) * ( Fd + Fb ) );
}


float D_Blinn( float a2, float NoH )
{
	float n = 2 / a2 - 2;
	return (n+2) / (2*PI) * PhongShadingPow( NoH, n );
}


float D_Beckmann( float a2, float NoH )
{
	float NoH2 = NoH * NoH;
	return exp( (NoH2 - 1) / (a2 * NoH2) ) / ( PI * a2 * NoH2 * NoH2 );
}



float D_GGX( float a2, float NoH )
{
	float d = ( NoH * a2 - NoH ) * NoH + 1;
	return a2 / ( PI*d*d );
}



float D_GGXaniso( float ax, float ay, float NoH, float XoH, float YoH )
{


	float a2 = ax * ay;
	float3 V = float3(ay * XoH, ax * YoH, a2 * NoH);
	float S = dot(V, V);

	return (1.0f / PI) * a2 * Square(a2 / S);
#line 378 "/Engine/Private/BRDF.ush"
}

float Vis_Implicit()
{
	return 0.25;
}


float Vis_Neumann( float NoV, float NoL )
{
	return 1 / ( 4 * max( NoL, NoV ) );
}


float Vis_Kelemen( float VoH )
{

	return rcp( 4 * VoH * VoH + 1e-5);
}



float Vis_Schlick( float a2, float NoV, float NoL )
{
	float k = sqrt(a2) * 0.5;
	float Vis_SchlickV = NoV * (1 - k) + k;
	float Vis_SchlickL = NoL * (1 - k) + k;
	return 0.25 / ( Vis_SchlickV * Vis_SchlickL );
}



float Vis_Smith( float a2, float NoV, float NoL )
{
	float Vis_SmithV = NoV + sqrt( NoV * (NoV - NoV * a2) + a2 );
	float Vis_SmithL = NoL + sqrt( NoL * (NoL - NoL * a2) + a2 );
	return rcp( Vis_SmithV * Vis_SmithL );
}



float Vis_SmithJointApprox( float a2, float NoV, float NoL )
{
	float a = sqrt(a2);
	float Vis_SmithV = NoL * ( NoV * ( 1 - a ) + a );
	float Vis_SmithL = NoV * ( NoL * ( 1 - a ) + a );
	return 0.5 * rcp( Vis_SmithV + Vis_SmithL );
}


float Vis_SmithJoint(float a2, float NoV, float NoL)
{
	float Vis_SmithV = NoL * sqrt(NoV * (NoV - NoV * a2) + a2);
	float Vis_SmithL = NoV * sqrt(NoL * (NoL - NoL * a2) + a2);
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}


float Vis_SmithJointAniso(float ax, float ay, float NoV, float NoL, float XoV, float XoL, float YoV, float YoL)
{
	float Vis_SmithV = NoL * length(float3(ax * XoV, ay * YoV, NoV));
	float Vis_SmithL = NoV * length(float3(ax * XoL, ay * YoL, NoL));
	return 0.5 * rcp(Vis_SmithV + Vis_SmithL);
}

float3 F_None( float3 SpecularColor )
{
	return SpecularColor;
}


float3 F_Schlick( float3 SpecularColor, float VoH )
{
	float Fc = Pow5( 1 - VoH );



	return saturate( 50.0 * SpecularColor.g ) * Fc + (1 - Fc) * SpecularColor;
}

float3 F_Schlick(float3 F0, float3 F90, float VoH)
{
	float Fc = Pow5(1 - VoH);
	return F90 * Fc + (1 - Fc) * F0;
}

float3 F_Fresnel( float3 SpecularColor, float VoH )
{
	float3 SpecularColorSqrt = sqrt( clamp( float3(0, 0, 0), float3(0.99, 0.99, 0.99), SpecularColor ) );
	float3 n = ( 1 + SpecularColorSqrt ) / ( 1 - SpecularColorSqrt );
	float3 g = sqrt( n*n + VoH*VoH - 1 );
	return 0.5 * Square( (g - VoH) / (g + VoH) ) * ( 1 + Square( ((g+VoH)*VoH - 1) / ((g-VoH)*VoH + 1) ) );
}






void ModifyGGXAnisotropicNormalRoughness(float3 WorldTangent, float Anisotropy, inout float Roughness, inout float3 N, float3 V)
{
	if (abs(Anisotropy) > 0.0f)
	{
		float3 X = WorldTangent;
		float3 Y = normalize(cross(N, X));

		float3 AnisotropicDir = Anisotropy >= 0.0f ? Y : X;
		float3 AnisotropicT = cross(AnisotropicDir, V);
		float3 AnisotropicN = cross(AnisotropicT, AnisotropicDir);

		float AnisotropicStretch = abs(Anisotropy) * saturate(5.0f * Roughness);
		N = normalize(lerp(N, AnisotropicN, AnisotropicStretch));
#line 493 "/Engine/Private/BRDF.ush"
	}
}


void GetAnisotropicRoughness(float Alpha, float Anisotropy, out float ax, out float ay)
{



	ax = max(Alpha * (1.0 + Anisotropy), 0.001f);
	ay = max(Alpha * (1.0 - Anisotropy), 0.001f);
#line 509 "/Engine/Private/BRDF.ush"
}


float2 GetAnisotropicRoughness(float Roughness, float Anisotropy)
{


	float2 Out = saturate(Roughness);
	Anisotropy = clamp(Anisotropy, -1.0, 1.0);
	Out.x = max(Roughness * sqrt(1.0 + Anisotropy), 0.001f);
	Out.y = max(Roughness * sqrt(1.0 - Anisotropy), 0.001f);
	return Out;
}


void GetAnisotropicFactor(float RoughnessX, float RoughnessY, inout float Anisotropy, inout float OriginalRoughness)
{
	const float MinRoughness = 0.001f;
	float r = Pow2(max(RoughnessX, MinRoughness) / max(RoughnessY, MinRoughness));
	Anisotropy = (r - 1.0) / (r + 1.0);
	OriginalRoughness = (RoughnessX + RoughnessY) / (sqrt(1.0 + Anisotropy) + sqrt(1.0 - Anisotropy));
}


Texture2D PreIntegratedGF;
SamplerState PreIntegratedGFSampler;



float3  EnvBRDF(  float3  SpecularColor,  float  Roughness,  float  NoV )
{

	float2 AB = Texture2DSampleLevel( PreIntegratedGF, PreIntegratedGFSampler, float2( NoV, Roughness ), 0 ).rg;


	float3 GF = SpecularColor * AB.x + saturate( 50.0 * SpecularColor.g ) * AB.y;
	return GF;
}

float3  EnvBRDF( float3  F0,  float3  F90,  float  Roughness,  float  NoV)
{

	float2 AB = Texture2DSampleLevel(PreIntegratedGF, PreIntegratedGFSampler, float2(NoV, Roughness), 0).rg;
	float3 GF = F0 * AB.x + F90 * AB.y;
	return GF;
}

float2  EnvBRDFApproxLazarov( float  Roughness,  float  NoV)
{


	const  float4  c0 = { -1, -0.0275, -0.572, 0.022 };
	const  float4  c1 = { 1, 0.0425, 1.04, -0.04 };
	float4  r = Roughness * c0 + c1;
	float  a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;
	float2  AB =  float2 (-1.04, 1.04) * a004 + r.zw;
	return AB;
}

float3  EnvBRDFApprox(  float3  SpecularColor,  float  Roughness,  float  NoV )
{
	float2  AB = EnvBRDFApproxLazarov(Roughness, NoV);



	float F90 = saturate( 50.0 * SpecularColor.g );

	return SpecularColor * AB.x + F90 * AB.y;
}

float3  EnvBRDFApprox( float3  F0,  float3  F90,  float  Roughness,  float  NoV)
{
	float2  AB = EnvBRDFApproxLazarov(Roughness, NoV);
	return F0 * AB.x + F90 * AB.y;
}

float  EnvBRDFApproxNonmetal(  float  Roughness,  float  NoV )
{

	const  float2  c0 = { -1, -0.0275 };
	const  float2  c1 = { 1, 0.0425 };
	float2  r = Roughness * c0 + c1;
	return min( r.x * r.x, exp2( -9.28 * NoV ) ) * r.x + r.y;
}

void EnvBRDFApproxFullyRough(inout  float3  DiffuseColor, inout  float3  SpecularColor)
{

	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;

}
void EnvBRDFApproxFullyRough(inout  float3  DiffuseColor, inout  float  SpecularColor)
{
	DiffuseColor += SpecularColor * 0.45;
	SpecularColor = 0;
}
void EnvBRDFApproxFullyRough(inout  float3  DiffuseColor, inout  float3  F0, inout  float3  F90)
{
	DiffuseColor += F0 * 0.45;
	F0 = F90 = 0;
}


float D_InvBlinn( float a2, float NoH )
{
	float A = 4;
	float Cos2h = NoH * NoH;
	float Sin2h = 1 - Cos2h;

	return rcp( PI * (1 + A*a2) ) * ( 1 + A * exp( -Cos2h / a2 ) );
}

float D_InvBeckmann( float a2, float NoH )
{
	float A = 4;
	float Cos2h = NoH * NoH;
	float Sin2h = 1 - Cos2h;
	float Sin4h = Sin2h * Sin2h;
	return rcp( PI * (1 + A*a2) * Sin4h ) * ( Sin4h + A * exp( -Cos2h / (a2 * Sin2h) ) );
}

float D_InvGGX( float a2, float NoH )
{
	float A = 4;
	float d = ( NoH - a2 * NoH ) * NoH + a2;
	return rcp( PI * (1 + A*a2) ) * ( 1 + 4 * a2*a2 / ( d*d ) );
}

float Vis_Cloth( float NoV, float NoL )
{
	return rcp( 4 * ( NoL + NoV - NoL * NoV ) );
}
#line 48 "/Engine/Private/BasePassPixelShader.usf"
#line 51 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "VelocityCommon.ush"
#line 9 "/Engine/Private/VelocityCommon.ush"
float3 Calculate3DVelocity(float4 PackedVelocityA, float4 PackedVelocityC)
{
	float2 ScreenPos = PackedVelocityA.xy / PackedVelocityA.w - ResolvedView.TemporalAAJitter.xy;
	float2 PrevScreenPos = PackedVelocityC.xy / PackedVelocityC.w - ResolvedView.TemporalAAJitter.zw;

	float DeviceZ = PackedVelocityA.z / PackedVelocityA.w;
	float PrevDeviceZ = PackedVelocityC.z / PackedVelocityC.w;


	float3 Velocity = float3(ScreenPos - PrevScreenPos, DeviceZ - PrevDeviceZ);


	return Velocity;
}
#line 52 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "SphericalGaussian.ush"
#line 7 "/Engine/Private/SphericalGaussian.ush"
struct FSphericalGaussian
{
	float3 Axis;
	float Sharpness;
	float Amplitude;
};

float Evaluate( FSphericalGaussian G, float3 Direction )
{


	return G.Amplitude * exp( G.Sharpness * (dot( G.Axis, Direction ) - 1) );
}


float Integral( FSphericalGaussian G )
{



	return (2*PI) * G.Amplitude / G.Sharpness * ( 1 - exp( -2 * G.Sharpness ) );
}


FSphericalGaussian Normalize( FSphericalGaussian G )
{



	G.Amplitude = G.Sharpness / ( (2*PI) - (2*PI) * exp( -2 * G.Sharpness ) );
	return G;
}


FSphericalGaussian Mul( FSphericalGaussian G0, FSphericalGaussian G1 )
{



	float Lm = G0.Sharpness + G1.Sharpness;
	float3 um = G0.Sharpness * G0.Axis + G1.Sharpness * G1.Axis;
	float umLength = length(um);

	FSphericalGaussian G =
	{
		um / umLength,
		umLength,
		G0.Amplitude * G1.Amplitude * exp( umLength - Lm )
	};

	return G;
}


float Dot( FSphericalGaussian G0, FSphericalGaussian G1 )
{




	float Lm = G0.Sharpness + G1.Sharpness;
	float3 um = G0.Sharpness * G0.Axis + G1.Sharpness * G1.Axis;
	float umLength = length(um);



	return (2*PI) * G0.Amplitude * G1.Amplitude * exp( umLength - Lm ) * ( 1 - exp( -2 * umLength ) ) / umLength;
}


FSphericalGaussian Convolve( FSphericalGaussian G0, FSphericalGaussian G1 )
{
	FSphericalGaussian G =
	{
		G0.Axis,
		( G0.Sharpness * G1.Sharpness ) / ( G0.Sharpness + G1.Sharpness ),
		(2*PI) * ( G0.Amplitude * G1.Amplitude ) / ( G0.Sharpness + G1.Sharpness )
	};

	return G;
}


FSphericalGaussian ToSphericalGaussian( float3 r, float Value )
{


	FSphericalGaussian G;

	float LengthR2 = dot( r, r );
	float InvLengthR = rsqrt( LengthR2 );
	float LengthR = LengthR2 * InvLengthR;

	G.Axis = r * InvLengthR;
	G.Sharpness = LengthR * ( 3 - LengthR2 ) / ( 1 - min( LengthR2, 0.9999 ) );
	G.Amplitude = Value * G.Sharpness / ( (2*PI) - (2*PI) * exp( -2 * G.Sharpness ) );


	return G;
}

FSphericalGaussian Add( FSphericalGaussian G0, FSphericalGaussian G1 )
{




	float exp2L0 = exp( -2 * G0.Sharpness );
	float exp2L1 = exp( -2 * G1.Sharpness );

	float3 r0 = ( (1 + exp2L0) / (1 - exp2L0) - rcp( G0.Sharpness ) ) * G0.Axis;
	float3 r1 = ( (1 + exp2L1) / (1 - exp2L1) - rcp( G1.Sharpness ) ) * G1.Axis;
	float w0 = Integral( G0 );
	float w1 = Integral( G1 );

	float3 r = ( r0*w0 + r1*w1 ) / (w0 + w1);
	float w = w0 + w1;

	return ToSphericalGaussian( r, w );
}


float GetConeAngle( FSphericalGaussian G )
{




	return sqrt( 2 / G.Sharpness );
}



float DotCosineLobe( FSphericalGaussian G, float3 N )
{
	const float muDotN = dot( G.Axis, N );

	const float c0 = 0.36;
	const float c1 = 0.25 / c0;

	float eml = exp( -G.Sharpness );
	float em2l = eml * eml;
	float rl = rcp( G.Sharpness );

	float scale = 1.0f + 2.0f * em2l - rl;
	float bias = (eml - em2l) * rl - em2l;

	float x = sqrt( 1.0 - scale );
	float x0 = c0 * muDotN;
	float x1 = c1 * x;

	float n = x0 + x1;
	float y = ( abs( x0 ) <= x1 ) ? n*n / x : saturate( muDotN );

	return scale * y + bias;
}


FSphericalGaussian ClampedCosine_ToSphericalGaussian( float3 Normal )
{
	FSphericalGaussian G;

	G.Axis = Normal;
	G.Sharpness = 2.133;
	G.Amplitude = 1.17;





	return G;
}

FSphericalGaussian Hemisphere_ToSphericalGaussian( float3 Normal )
{
	FSphericalGaussian G;

	G.Axis = Normal;
	G.Sharpness = 0.81;
	G.Amplitude = 0.81 / ( 1 - exp( -2 * 0.81 ) );

	return G;
}


FSphericalGaussian BentNormalAO_ToSphericalGaussian( float3 BentNormal, float AO )
{



	FSphericalGaussian G;

	G.Axis = BentNormal;







	G.Sharpness = ( 0.75 + 1.25 * sqrt( 1 - AO ) ) / AO;
#line 219 "/Engine/Private/SphericalGaussian.ush"
	const float HemisphereSharpness = 0.81;
	G.Amplitude = HemisphereSharpness / ( 1 - exp( -2 * HemisphereSharpness ) );

	return G;
}
#line 241 "/Engine/Private/SphericalGaussian.ush"
struct FAnisoSphericalGaussian
{
	float3 AxisX;
	float3 AxisY;
	float3 AxisZ;
	float SharpnessX;
	float SharpnessY;
	float Amplitude;
};

float Evaluate( FAnisoSphericalGaussian ASG, float3 Direction )
{
	float L = ASG.SharpnessX * Pow2( dot( Direction, ASG.AxisX ) );
	float u = ASG.SharpnessY * Pow2( dot( Direction, ASG.AxisY ) );
	return ASG.Amplitude * saturate( dot( Direction, ASG.AxisZ ) ) * exp( -L - u );
}

float Dot( FAnisoSphericalGaussian ASG, FSphericalGaussian SG )
{


	float nu = SG.Sharpness * 0.5;

	ASG.Amplitude *= SG.Amplitude;
	ASG.Amplitude *= PI * rsqrt( (nu + ASG.SharpnessX) * (nu + ASG.SharpnessY) );
	ASG.SharpnessX = (nu * ASG.SharpnessX) / (nu + ASG.SharpnessX);
	ASG.SharpnessY = (nu * ASG.SharpnessY) / (nu + ASG.SharpnessY);

	return Evaluate( ASG, SG.Axis );
}
#line 53 "/Engine/Private/BasePassPixelShader.usf"
#line 54 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "ShadingModelsSampling.ush"
#line 8 "/Engine/Private/ShadingModelsSampling.ush"
#line 1 "ShadingModels.ush"
#line 8 "/Engine/Private/ShadingModels.ush"
#line 1 "CapsuleLight.ush"
#line 5 "/Engine/Private/CapsuleLight.ush"
float SmoothMin( float a, float b, float k )
{
	float h = saturate( 0.5 + (0.5 / k) * (b - a) );
	return lerp( b, a, h ) - k * (h - h*h);
}

float SmoothMax( float a, float b, float k )
{
	return SmoothMin( a, b, -k );
}

float SmoothClamp( float x, float Min, float Max, float k )
{
	return SmoothMin( SmoothMax( x, Min, k ), Max, k );

}

struct FCapsuleLight
{
	float3 LightPos[2];
	float Length;
	float Radius;
	float SoftRadius;
	float DistBiasSqr;
};

void ClipToHorizon( inout float3 Line0, inout float3 Line1, float3 N )
{
	float NoP0 = dot( N, Line0 );
	float NoP1 = dot( N, Line1 );
	if( NoP0 < 0 ) Line0 = ( Line0 * NoP1 - Line1 * NoP0 ) / ( NoP1 - NoP0 );
	if( NoP1 < 0 ) Line1 = ( -Line0 * NoP1 + Line1 * NoP0 ) / ( -NoP1 + NoP0 );
}


float3 ClosestPointLineToPoint( float3 Line0, float3 Line1, float Length )
{
	float3 Line01 = Line1 - Line0;
	return Line0 + Line01 * saturate( -dot( Line01, Line0 ) / Pow2( Length ) );

}


float3 ClosestPointLineToRay( float3 Line0, float3 Line1, float Length, float3 R )
{
	float3 L0 = Line0;
	float3 L1 = Line1;
	float3 Line01 = Line1 - Line0;


	float A = Square( Length );
	float B = dot( R, Line01 );
	float t = saturate( dot( Line0, B*R - Line01 ) / (A - B*B) );

	return Line0 + t * Line01;
}

float3 SmallestAnglePointOnLineToRay( float3 Line0, float3 Line1, float Length, float3 R )
{
	float3 L0 = Line0;
	float3 L1 = Line1;
	float3 Line01 = Line1 - Line0;

	float A = Square( Length );
	float B = 2 * dot( Line0, Line01 );
	float C = dot( Line0, Line0 );
	float D = dot( R, Line0 );
	float E = dot( R, Line01 );
	float t = saturate( (B*D - 2*C*E) / (B*E - 2*A*D) );

	return Line0 + t * Line01;
}

float3 LineIrradiance( float3 N, float3 Line0, float3 Line1, float DistanceBiasSqr, out float CosSubtended, out float BaseIrradiance, out float NoL )
{
	float LengthSqr0 = dot( Line0, Line0 );
	float LengthSqr1 = dot( Line1, Line1 );
	float InvLength0 = rsqrt( LengthSqr0 );
	float InvLength1 = rsqrt( LengthSqr1 );
	float InvLength01 = InvLength0 * InvLength1;

	CosSubtended = dot( Line0, Line1 ) * InvLength01;
	BaseIrradiance = InvLength01 / ( CosSubtended * 0.5 + 0.5 + DistanceBiasSqr * InvLength01 );
	NoL = 0.5 * ( dot(N, Line0) * InvLength0 + dot(N, Line1) * InvLength1 );

	float3 VectorIrradiance = ( BaseIrradiance * 0.5 ) * ( Line0 * InvLength0 + Line1 * InvLength1 );
	return VectorIrradiance;
}


float SphereHorizonCosWrap( float NoL, float SinAlphaSqr )
{

	float SinAlpha = sqrt( SinAlphaSqr );

	if( NoL < SinAlpha )
	{
		NoL = max( NoL, -SinAlpha );
#line 120 "/Engine/Private/CapsuleLight.ush"
		NoL = Pow2( SinAlpha + NoL ) / ( 4 * SinAlpha );

	}
#line 127 "/Engine/Private/CapsuleLight.ush"
	return NoL;
}
#line 9 "/Engine/Private/ShadingModels.ush"
#line 1 "RectLight.ush"
#line 17 "/Engine/Private/RectLight.ush"
struct FRect
{
	float3 Origin;
	float3x3 Axis;
	float2 Extent;
	float2 FullExtent;
	float2 Offset;
};


struct FRectTexture
{
#line 43 "/Engine/Private/RectLight.ush"
	Texture2D SourceTexture;
#line 48 "/Engine/Private/RectLight.ush"
};

FRectTexture InitRectTexture(Texture2D SourceTexture)
{
	FRectTexture Output;
#line 67 "/Engine/Private/RectLight.ush"
	Output.SourceTexture = SourceTexture;
#line 72 "/Engine/Private/RectLight.ush"
	return Output;
}

float3 SampleRectTextureInternal(Texture2D RectSourceTexture, float2 RectUV, float Level, bool bIsReference)
{
	float2 TextureSize;
	RectSourceTexture.GetDimensions( TextureSize.x, TextureSize.y );
    Level += log2(max(TextureSize.x, TextureSize.y)) - 2;
	return RectSourceTexture.SampleLevel( View_SharedTrilinearClampedSampler, RectUV, bIsReference ? 0 : Level ).rgb;
}


float3 SampleRectTexture(FRectTexture RectTexture, float2 RectUV, float Level, bool bIsReference=false)
{
#line 100 "/Engine/Private/RectLight.ush"
	return SampleRectTextureInternal(RectTexture.SourceTexture, RectUV, Level, bIsReference);
#line 105 "/Engine/Private/RectLight.ush"
}


float3 RectIrradianceLambert( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{







	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );


	float x0 = LocalPosition.x - Rect.Extent.x;
	float x1 = LocalPosition.x + Rect.Extent.x;
	float y0 = LocalPosition.y - Rect.Extent.y;
	float y1 = LocalPosition.y + Rect.Extent.y;
	float z0 = LocalPosition.z;
	float z0Sqr = z0 * z0;


	float3 v0 = float3( x0, y0, z0 );
	float3 v1 = float3( x1, y0, z0 );
	float3 v2 = float3( x1, y1, z0 );
	float3 v3 = float3( x0, y1, z0 );

	float3 L0 = v0 * rsqrt( dot( v0.xy, v0.xy ) + z0Sqr );
	float3 L1 = v1 * rsqrt( dot( v1.xy, v1.xy ) + z0Sqr );
	float3 L2 = v2 * rsqrt( dot( v2.xy, v2.xy ) + z0Sqr );
	float3 L3 = v3 * rsqrt( dot( v3.xy, v3.xy ) + z0Sqr );
#line 152 "/Engine/Private/RectLight.ush"
	float c01 = dot( L0, L1 );
	float c12 = dot( L1, L2 );
	float c23 = dot( L2, L3 );
	float c30 = dot( L3, L0 );
#line 172 "/Engine/Private/RectLight.ush"
	float w01 = ( 1.5708 - 0.175 * c01 ) * rsqrt( c01 + 1 );
	float w12 = ( 1.5708 - 0.175 * c12 ) * rsqrt( c12 + 1 );
	float w23 = ( 1.5708 - 0.175 * c23 ) * rsqrt( c23 + 1 );
	float w30 = ( 1.5708 - 0.175 * c30 ) * rsqrt( c30 + 1 );










	float3 L;
	L = cross( L1, -w01 * L0 + w12 * L2 );
	L += cross( L3, w30 * L0 + -w23 * L2 );




	L = L.x * Rect.Axis[0] + L.y * Rect.Axis[1] + L.z * Rect.Axis[2];

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;


	L *= InvLength;

	BaseIrradiance = 0.5 * Length;




	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);

	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );

	return L;
}

float3 RectIrradianceApproxKaris( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
	float2 RectLocal;
	RectLocal.x = SmoothClamp( dot( Rect.Axis[0], -Rect.Origin ), -Rect.Extent.x, Rect.Extent.x, 16 );
	RectLocal.y = SmoothClamp( dot( Rect.Axis[1], -Rect.Origin ), -Rect.Extent.y, Rect.Extent.y, 16 );

	float3 ClosestPoint = Rect.Origin;
	ClosestPoint += Rect.Axis[0] * RectLocal.x;
	ClosestPoint += Rect.Axis[1] * RectLocal.y;

	float3 OppositePoint = 2 * Rect.Origin - ClosestPoint;

	float3 L0 = normalize( ClosestPoint );
	float3 L1 = normalize( OppositePoint );
	float3 L = normalize( L0 + L1 );


	float Distance = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float DistanceSqr = Distance * Distance;



	BaseIrradiance = 4 * Rect.Extent.x * Rect.Extent.y * rsqrt( ( (4 / PI) * Square( Rect.Extent.x ) + DistanceSqr ) * ( (4 / PI) * Square( Rect.Extent.y ) + DistanceSqr ) );
	BaseIrradiance *= saturate( dot( Rect.Axis[2], L ) );




	float SinAlphaSqr = BaseIrradiance * (1.0 / PI);

	NoL = SphereHorizonCosWrap( dot( N, L ), SinAlphaSqr );

	return L;
}

float3 RectIrradianceApproxLagarde( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
	float3 L = normalize( Rect.Origin );

	float3 v0 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v1 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v2 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;
	float3 v3 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;

	float3 n0 = normalize( cross( v0, v1 ) );
	float3 n1 = normalize( cross( v1, v2 ) );
	float3 n2 = normalize( cross( v2, v3 ) );
	float3 n3 = normalize( cross( v3, v0 ) );

	float g0 = acos( dot( n0, n1 ) );
	float g1 = acos( dot( n1, n2 ) );
	float g2 = acos( dot( n2, n3 ) );
	float g3 = acos( dot( n3, n0 ) );


	BaseIrradiance = g0 + g1 + g2 + g3 - 2*PI;

	NoL = 0.2 * ( saturate( dot( N, L ) ) +
		saturate( dot( N, normalize(v0) ) ) +
		saturate( dot( N, normalize(v1) ) ) +
		saturate( dot( N, normalize(v2) ) ) +
		saturate( dot( N, normalize(v3) ) ) );

	return L;
}

float3 RectIrradianceApproxDrobot( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
#line 295 "/Engine/Private/RectLight.ush"
	float clampCosAngle = 0.001 + saturate( dot( N, Rect.Axis[2] ) );

	float3 d0 = normalize( -Rect.Axis[2] + N * clampCosAngle );

	float3 d1 = normalize( N - Rect.Axis[2] * clampCosAngle );
	float3 dh = normalize( d0 + d1 );



	float3 PointOnPlane = dh * ( dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], dh ) );

	float3 ClosestPoint = Rect.Origin;
	ClosestPoint += Rect.Axis[0] * clamp( dot( Rect.Axis[0], PointOnPlane - Rect.Origin ), -Rect.Extent.x, Rect.Extent.x );
	ClosestPoint += Rect.Axis[1] * clamp( dot( Rect.Axis[1], PointOnPlane - Rect.Origin ), -Rect.Extent.y, Rect.Extent.y );

	float3 v0 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v1 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y;
	float3 v2 = Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;
	float3 v3 = Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y;

	float3 n0 = normalize( cross( v0, v1 ) );
	float3 n1 = normalize( cross( v1, v2 ) );
	float3 n2 = normalize( cross( v2, v3 ) );
	float3 n3 = normalize( cross( v3, v0 ) );

	float g0 = acos( dot( n0, n1 ) );
	float g1 = acos( dot( n1, n2 ) );
	float g2 = acos( dot( n2, n3 ) );
	float g3 = acos( dot( n3, n0 ) );

	float SolidAngle = g0 + g1 + g2 + g3 - 2*PI;

	float3 L = normalize( ClosestPoint );
#line 340 "/Engine/Private/RectLight.ush"
	BaseIrradiance = SolidAngle;
	NoL = saturate( dot( N, L ) );

	return L;
}


float3 SampleSourceTexture( float3 L, FRect Rect, FRectTexture RectTexture)
{


	L += Rect.Axis[2] * saturate( 0.001 - dot( Rect.Axis[2], L ) );


	float DistToPlane = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * DistToPlane;

	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );


    float2 RectUV = (PointInRect + Rect.Offset) / Rect.FullExtent * float2(0.5, -0.5) + 0.5;

	float Level = log2( DistToPlane * rsqrt( Rect.FullExtent.x * Rect.FullExtent.y ) );

    return SampleRectTexture(RectTexture, RectUV, Level);
#line 370 "/Engine/Private/RectLight.ush"
}

float IntegrateEdge( float3 L0, float3 L1 )
{
	float c01 = dot( L0, L1 );
#line 387 "/Engine/Private/RectLight.ush"
	float w01 = ( 0.8543985 + (0.4965155 + 0.0145206 * abs(c01)) * abs(c01) ) /
				( 3.4175940 + (4.1616724 + abs(c01)) * abs(c01) );

	w01 = c01 > 0 ? w01 : 0.5 * rsqrt( 1 - c01 * c01 ) - w01;


	return w01;
}


float3 PolygonIrradiance( float3 Poly[4] )
{
	float3 L0 = normalize( Poly[0] );
	float3 L1 = normalize( Poly[1] );
	float3 L2 = normalize( Poly[2] );
	float3 L3 = normalize( Poly[3] );









	float w01 = IntegrateEdge( L0, L1 );
	float w12 = IntegrateEdge( L1, L2 );
	float w23 = IntegrateEdge( L2, L3 );
	float w30 = IntegrateEdge( L3, L0 );








	float3 L;
	L = cross( L1, -w01 * L0 + w12 * L2 );
	L += cross( L3, w30 * L0 + -w23 * L2 );




	return L;
}


float3 RectGGXApproxLTC( float Roughness, float3 SpecularColor,  float3  N, float3 V, FRect Rect, FRectTexture RectTexture )
{

	const float3 F0 = SpecularColor;
	const float3 F90 = saturate(50.0 * SpecularColor);


	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	float2 UV = float2( Roughness, sqrt( 1 - NoV ) );
	UV = UV * (63.0 / 64.0) + (0.5 / 64.0);

	float4 LTCMat = View_LTCMatTexture.SampleLevel( View_LTCMatSampler, UV, 0 );
	float4 LTCAmp = View_LTCAmpTexture.SampleLevel( View_LTCAmpSampler, UV, 0 );

	float3x3 LTC = {
		float3( LTCMat.x, 0, LTCMat.z ),
		float3( 0, 1, 0 ),
		float3( LTCMat.y, 0, LTCMat.w )
	};

	float LTCDet = LTCMat.x * LTCMat.w - LTCMat.y * LTCMat.z;

	float4 InvLTCMat = LTCMat / LTCDet;
	float3x3 InvLTC = {
		float3( InvLTCMat.w, 0,-InvLTCMat.z ),
		float3( 0, 1, 0 ),
		float3(-InvLTCMat.y, 0, InvLTCMat.x )
	};


	float3 T1 = normalize( V - N * dot( N, V ) );
	float3 T2 = cross( N, T1 );
	float3x3 TangentBasis = float3x3( T1, T2, N );

	LTC = mul( LTC, TangentBasis );
	InvLTC = mul( transpose( TangentBasis ), InvLTC );

	float3 Poly[4];
	Poly[0] = mul( LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[1] = mul( LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x - Rect.Axis[1] * Rect.Extent.y );
	Poly[2] = mul( LTC, Rect.Origin + Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );
	Poly[3] = mul( LTC, Rect.Origin - Rect.Axis[0] * Rect.Extent.x + Rect.Axis[1] * Rect.Extent.y );


	float3 L = PolygonIrradiance( Poly );

	float LengthSqr = dot( L, L );
	float InvLength = rsqrt( LengthSqr );
	float Length = LengthSqr * InvLength;


	L *= InvLength;




	float SinAlphaSqr = Length;

	float NoL = SphereHorizonCosWrap( L.z, SinAlphaSqr );
	float Irradiance = SinAlphaSqr * NoL;


	Irradiance = -min(-Irradiance, 0.0);
#line 511 "/Engine/Private/RectLight.ush"
	float3 IrradianceScale = F90 * LTCAmp.y + ( LTCAmp.x - LTCAmp.y ) * F0;


	L = mul( InvLTC, L );

	float3 LightColor = SampleSourceTexture( L, Rect, RectTexture );

	return LightColor * Irradiance * IrradianceScale;
}




struct FSphericalRect
{
	float3x3 Axis;

	float x0;
	float x1;
	float y0;
	float y1;
	float z0;

	float b0;
	float b1;
	float k;
	float SolidAngle;
};


FSphericalRect BuildSphericalRect( FRect Rect )
{
	FSphericalRect SphericalRect;

	SphericalRect.Axis = Rect.Axis;

	float3 LocalPosition;
	LocalPosition.x = dot( Rect.Axis[0], Rect.Origin );
	LocalPosition.y = dot( Rect.Axis[1], Rect.Origin );
	LocalPosition.z = dot( Rect.Axis[2], Rect.Origin );

	SphericalRect.x0 = LocalPosition.x - Rect.Extent.x;
	SphericalRect.x1 = LocalPosition.x + Rect.Extent.x;
	SphericalRect.y0 = LocalPosition.y - Rect.Extent.y;
	SphericalRect.y1 = LocalPosition.y + Rect.Extent.y;
	SphericalRect.z0 = -abs( LocalPosition.z );

	SphericalRect.Axis[2] *= LocalPosition.z > 0 ? -1 : 1;

	float3 v0 = float3( SphericalRect.x0, SphericalRect.y0, SphericalRect.z0 );
	float3 v1 = float3( SphericalRect.x1, SphericalRect.y0, SphericalRect.z0 );
	float3 v2 = float3( SphericalRect.x1, SphericalRect.y1, SphericalRect.z0 );
	float3 v3 = float3( SphericalRect.x0, SphericalRect.y1, SphericalRect.z0 );

	float3 n0 = normalize( cross( v0, v1 ) );
	float3 n1 = normalize( cross( v1, v2 ) );
	float3 n2 = normalize( cross( v2, v3 ) );
	float3 n3 = normalize( cross( v3, v0 ) );

	float g0 = acos( -dot( n0, n1 ) );
	float g1 = acos( -dot( n1, n2 ) );
	float g2 = acos( -dot( n2, n3 ) );
	float g3 = acos( -dot( n3, n0 ) );

	SphericalRect.b0 = n0.z;
	SphericalRect.b1 = n2.z;

	SphericalRect.k = 2*PI - g2 - g3;
	SphericalRect.SolidAngle = g0 + g1 - SphericalRect.k;

	return SphericalRect;
}

struct FSphericalRectSample {
	float3 Direction;
	float2 UV;
};

FSphericalRectSample UniformSampleSphericalRectWithUV(float2 E, FSphericalRect Rect)
{
	float au = E.x * Rect.SolidAngle + Rect.k;
	float fu = (cos(au) * Rect.b0 - Rect.b1) / sin(au);
	float cu = rsqrt(fu * fu + Rect.b0 * Rect.b0) * (fu > 0 ? 1 : -1);
	cu = clamp(cu, -1, 1);

	float xu = -(cu * Rect.z0) * rsqrt(1 - cu * cu);
	xu = clamp(xu, Rect.x0, Rect.x1);

	float d = sqrt(xu * xu + Rect.z0 * Rect.z0);
	float h0 = Rect.y0 * rsqrt(d * d + Rect.y0 * Rect.y0);
	float h1 = Rect.y1 * rsqrt(d * d + Rect.y1 * Rect.y1);
	float hv = h0 + E.y * (h1 - h0);
	float yv = (hv * hv < 1 - 1e-6) ? (hv * d) * rsqrt(1 - hv * hv) : Rect.y1;

	FSphericalRectSample Result;
	Result.Direction = mul(float3(xu, yv, Rect.z0), Rect.Axis);
	Result.UV = float2(xu - Rect.x0, yv - Rect.y0) / float2(Rect.x1 - Rect.x0, Rect.y1 - Rect.y0);

	return Result;
}

float3 UniformSampleSphericalRect( float2 E, FSphericalRect Rect )
{
	return UniformSampleSphericalRectWithUV(E, Rect).Direction;
}

float3 RectIrradianceRef( float3 N, FRect Rect, out float BaseIrradiance, out float NoL )
{
	FSphericalRect SphericalRect = BuildSphericalRect( Rect );

	const uint NumSamples = 32;

	float3 L = 0;
	NoL = 0;

	[loop]
	for( uint i = 0; i < NumSamples; i++ )
	{
		float2 E = Hammersley( i, NumSamples, 0 );
		float3 Ls = normalize( UniformSampleSphericalRect( E, SphericalRect ) );

		L += Ls;
		NoL += saturate( dot(N, Ls) );
	}

	BaseIrradiance = SphericalRect.SolidAngle;
	NoL /= NumSamples;

	return normalize(L);
}

FRect GetRect(
	float3 ToLight,
	float3 LightDataDirection,
	float3 LightDataTangent,
	float LightDataSourceRadius,
	float LightDataSourceLength,
	float LightDataRectLightBarnCosAngle,
	float LightDataRectLightBarnLength,
	bool bComputeVisibleRect)
{

	FRect Rect;
	Rect.Origin = ToLight;
	Rect.Axis[1] = LightDataTangent;
	Rect.Axis[2] = LightDataDirection;
	Rect.Axis[0] = cross( Rect.Axis[1], Rect.Axis[2] );
	Rect.Extent = float2(LightDataSourceRadius, LightDataSourceLength);
	Rect.FullExtent = Rect.Extent;
	Rect.Offset = 0;
#line 682 "/Engine/Private/RectLight.ush"
	if (bComputeVisibleRect && LightDataRectLightBarnCosAngle > 0.035f)
	{
		const float3 LightdPdv = -Rect.Axis[1];
		const float3 LightdPdu = -Rect.Axis[0];
		const float2 LightExtent = float2(LightDataSourceRadius, LightDataSourceLength);
		const float BarnLength = LightDataRectLightBarnLength;


		float3 S_Light = mul(Rect.Axis, ToLight);




		const float CosTheta = LightDataRectLightBarnCosAngle;
		const float SinTheta = sqrt(1 - CosTheta * CosTheta);
		const float BarnDepth = min(S_Light.z, CosTheta * BarnLength);
		const float S_ratio = BarnDepth / (CosTheta * BarnLength);
		const float D_B = SinTheta * BarnLength * S_ratio;


		const float2 SignS = sign(S_Light.xy);
		S_Light.xy = SignS * max(abs(S_Light.xy), LightExtent + D_B.xx);


		const float3 C = float3(SignS * (LightExtent + D_B.xx), BarnDepth);



		const float3 SProj = S_Light - C;
		const float CosEta = max(SProj.z, 0.001f);
		const float2 SinEta = abs(SProj.xy);
		const float2 TanEta = abs(SProj.xy) / CosEta;
		const float2 D_S = BarnDepth * TanEta;




		const float2 MinXY = clamp(-LightExtent + (D_S - D_B.xx) * max(0, -SignS), -LightExtent, LightExtent);
		const float2 MaxXY = clamp( LightExtent - (D_S - D_B.xx) * max(0, SignS), -LightExtent, LightExtent);
		const float2 RectOffset = 0.5f * (MinXY + MaxXY);

		Rect.Extent = 0.5f * (MaxXY - MinXY);
		Rect.Origin = Rect.Origin + LightdPdu * RectOffset.x + LightdPdv * RectOffset.y;
		Rect.Offset = -RectOffset;
		Rect.FullExtent = LightExtent;
	}

	return Rect;
}

bool IsRectVisible(FRect Rect)
{

	return Rect.Extent.x != 0 && Rect.Extent.y != 0;
}
#line 10 "/Engine/Private/ShadingModels.ush"
#line 1 "AreaLightCommon.ush"
#line 7 "/Engine/Private/AreaLightCommon.ush"
struct FAreaLight
{
	float SphereSinAlpha;
	float SphereSinAlphaSoft;
	float LineCosSubtended;

	float3 FalloffColor;

	FRect Rect;
	FRectTexture Texture;

	uint IsRectAndDiffuseMicroReflWeight;
};

struct FAreaLightIntegrateContext
{
	FAreaLight AreaLight;
	float3 L;
	float NoL;
	float Falloff;
};

void SetIsRectLight(inout FAreaLight AreaLight, bool bIsRectLight)
{
	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0xFFFFFFFE) | (bIsRectLight ? 0x1 : 0x0);
}

bool IsRectLight(FAreaLight AreaLight)
{
	return (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) == 0x1;
}

void SetAreaLightDiffuseMicroReflWeight(inout FAreaLight AreaLight, float Weight)
{

	AreaLight.IsRectAndDiffuseMicroReflWeight = (AreaLight.IsRectAndDiffuseMicroReflWeight & 0x00000001) | (asuint(Weight) << 1);
}

float GetAreaLightDiffuseMicroReflWeight(FAreaLight AreaLight)
{
	return asfloat(AreaLight.IsRectAndDiffuseMicroReflWeight >> 1);
}

bool IsAreaLight(FAreaLight AreaLight)
{
	return IsRectLight(AreaLight) || GetAreaLightDiffuseMicroReflWeight(AreaLight) < 1.0f;
}

FAreaLightIntegrateContext InitAreaLightIntegrateContext()
{

	FAreaLightIntegrateContext Out;
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 0;
	Out.AreaLight.FalloffColor = 0;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;

	Out.L = 0;
	Out.NoL = 0;
	Out.Falloff = 0;
	return Out;
}
#line 11 "/Engine/Private/ShadingModels.ush"
#line 1 "TransmissionCommon.ush"
#line 9 "/Engine/Private/TransmissionCommon.ush"
#line 1 "SubsurfaceProfileCommon.ush"
#line 32 "/Engine/Private/SubsurfaceProfileCommon.ush"
float4  GetSubsurfaceProfileTexture(uint SampleIndex, uint SubsurfaceProfileInt)
{




	return View_SSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}

float4  GetSubsurfaceProfileTexture(Texture2D InSSProfilesTexture, SamplerState InSSProfilesSampler, float4 InSSProfilesTextureSizeAndInvSize, uint SampleIndex, uint SubsurfaceProfileInt)
{




	return InSSProfilesTexture.Load(int3(SampleIndex, SubsurfaceProfileInt, 0));

}
#line 10 "/Engine/Private/TransmissionCommon.ush"
#line 1 "BurleyNormalizedSSSCommon.ush"
#line 33 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float DecodeWorldUnitScale(float EncodedWorldUnitScale)
{
	return EncodedWorldUnitScale *  1/ 0.02f ;
}

float4 DecodeDiffuseMeanFreePath(float4 EncodedDiffuseMeanFreePath)
{
	return EncodedDiffuseMeanFreePath *  1/ (0.01f*0.2f) ;
}

bool GetSubsurfaceTransmittanceProfileUseBurley(uint SubsurfaceProfileInt)
{

	float Type = View_SSProfilesTexture.Load(int3( ( ( ( ( 0 +1) +1) +1) +1) , SubsurfaceProfileInt, 0)).a;

	return abs(Type -  0 ) < 0.01f;
}

bool GetSubsurfaceProfileUseBurley(uint SubsurfaceProfileInt)
{

	float Type = View_SSProfilesTexture.Load(int3( ( ( ( ( 0 +1) +1) +1) +1) , SubsurfaceProfileInt, 0)).a;

	return abs(Type -  0 ) < 0.01f;
}

bool GetSubsurfaceProfileUseSeparable(uint SubsurfaceProfileInt)
{

	float Type = View_SSProfilesTexture.Load(int3( ( ( ( ( 0 +1) +1) +1) +1) , SubsurfaceProfileInt, 0)).a;

	return abs(Type -  1 ) < 0.01f;
}

inline float3 Burley_Profile(float Radius, float3 Albedo, float3 S3D, float L)
{
	float3 D = 1 / S3D;
	float R = Radius / L;
	const float Inv8Pi = 1.0 / (8 * PI);
	float3 NegRbyD = -R / D;
	return Albedo * max((exp(NegRbyD) + exp(NegRbyD / 3.0)) / (D*L)*Inv8Pi, 0);
}





float GetDiffuseReflectProfile(float D, float Radius)
{


	const float Inv8Pi = 1.0 / (8 * PI);
	float NegRbyD = -Radius / D;
	return (exp(NegRbyD) + exp(NegRbyD / 3.0)) / (D*Radius)*Inv8Pi;
}

float3 GetDiffuseReflectProfileWithDiffuseMeanFreePath(float3 L, float3 S3D, float Radius)
{

	float3 D = 1 / S3D;
	float3 R = Radius / L;
	const float Inv8Pi = 1.0 / (8 * PI);
	float3 NegRbyD = -R / D;
	return max((exp(NegRbyD) + exp(NegRbyD / 3.0)) / (D*L)*Inv8Pi, 0);
}

float GetComponentForScalingFactorEstimation(float4 SurfaceAlbedo)
{
	return SurfaceAlbedo.a;
}

float GetDiffuseMeanFreePathForSampling(float4 DiffuseMeanFreePath)
{
	return DiffuseMeanFreePath.a;
}





float GetPerpendicularScalingFactor(float SurfaceAlbedo)
{

	float Value = abs(SurfaceAlbedo - 0.8);
	return 1.85 - SurfaceAlbedo + 7 * Value * Value * Value;
}

float3 GetPerpendicularScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = abs(SurfaceAlbedo - 0.8);
	return 1.85 - SurfaceAlbedo + 7 * Value * Value * Value;
}



float GetDiffuseSurfaceScalingFactor(float SurfaceAlbedo)
{
	float Value = SurfaceAlbedo - 0.8;
	return 1.9 - SurfaceAlbedo + 3.5 * Value * Value;
}

float3 GetDiffuseSurfaceScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = SurfaceAlbedo - 0.8;
	return 1.9 - SurfaceAlbedo + 3.5 * Value * Value;
}



float GetSearchLightDiffuseScalingFactor(float SurfaceAlbedo)
{
	float Value = SurfaceAlbedo - 0.33;
	return 3.5 + 100 * Value * Value * Value * Value;
}

float3 GetSearchLightDiffuseScalingFactor3D(float3 SurfaceAlbedo)
{
	float3 Value = SurfaceAlbedo - 0.33;
	return 3.5 + 100 * Value * Value * Value * Value;
}

float GetScalingFactor(float A)
{





	float S = GetSearchLightDiffuseScalingFactor(A);

	return S;
}

float3 GetScalingFactor3D(float3 SurfaceAlbedo)
{





	float3 S3D = GetSearchLightDiffuseScalingFactor3D(SurfaceAlbedo);

	return S3D;
}

float3 GetCDF3D(float3 D, float X)
{
	return 1 - 0.25 * exp(-X / D) - 0.75 * exp(-X / (3 * D));
}
#line 205 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
float3 InternalGetBurleyTransmissionProfile(
	float3 SubsurfaceAlebdo,
	float3 MeanFreePathInCm,
	float ThicknessInCm)
{

	const float3 ScalingFactor = GetSearchLightDiffuseScalingFactor3D(SubsurfaceAlebdo);
	const float3 r = ThicknessInCm / MeanFreePathInCm.xyz;
	const float3 Output = 0.25 * SubsurfaceAlebdo * (exp(-ScalingFactor * r) + 3 * exp(-ScalingFactor * r / 3));

	return Output;
}

float3 GetBurleyTransmissionProfile(
	float3 SubsurfaceAlebdo,
	float3 MeanFreePathInCm,
	float ThicknessInCm)
{
	const float TransmissionMFPScaleFactor = 100.f;
	const float3 TransmissionThroughput = InternalGetBurleyTransmissionProfile(SubsurfaceAlebdo, MeanFreePathInCm * TransmissionMFPScaleFactor, ThicknessInCm).xyz;
#line 240 "/Engine/Private/BurleyNormalizedSSSCommon.ush"
	const float FadeDistance = 1.0f - saturate(ThicknessInCm *  32  -  5.0f  * ( 32  - 0.5f));

	return TransmissionThroughput * FadeDistance;
}

struct FBurleyParameter
{
	float4 SurfaceAlbedo;
	float4 DiffuseMeanFreePath;
	float WorldUnitScale;
	float SurfaceOpacity;
};


float4 GetSubsurfaceProfileSurfaceAlbedo(uint SubsurfaceProfileInt)
{
	return View_SSProfilesTexture.Load(int3( ( 0 +1) , SubsurfaceProfileInt, 0));
}

float4 GetSubsurfaceProfileDiffuseMeanFreePath(uint SubsurfaceProfileInt)
{
	return View_SSProfilesTexture.Load(int3( ( ( 0 +1) +1) , SubsurfaceProfileInt, 0));
}

float GetSubsurfaceProfileWorldUnitScale(uint SubsurfaceProfileInt)
{
	return View_SSProfilesTexture.Load(int3( 0 , SubsurfaceProfileInt, 0)).a;
}
#line 11 "/Engine/Private/TransmissionCommon.ush"

struct FTransmissionProfileParams
{
	float ExtinctionScale;
	float NormalScale;
	float ScatteringDistribution;
	float OneOverIOR;
};

FTransmissionProfileParams InitTransmissionProfileParams()
{
	FTransmissionProfileParams Out;
	Out.ExtinctionScale = 1.0f;
	Out.NormalScale = 0.08f;
	Out.ScatteringDistribution = 0.0f;
	Out.OneOverIOR = 1.0f;
	return Out;
}

FTransmissionProfileParams GetTransmissionProfileParams(uint SubsurfaceProfileInt)
{
	FTransmissionProfileParams Result;


	float4 Data = View_SSProfilesTexture.Load(int3( ( ( ( 0 +1) +1) +1) , SubsurfaceProfileInt, 0));

	Result.ExtinctionScale = Data.x;
	Result.NormalScale = Data.y;
	Result.ScatteringDistribution = Data.z;
	Result.OneOverIOR = Data.w;

	return Result;
}

FTransmissionProfileParams GetTransmissionProfileParams(FGBufferData GBufferData)
{

	uint SubsurfaceProfileInt = ExtractSubsurfaceProfileInt(GBufferData);
	return GetTransmissionProfileParams(SubsurfaceProfileInt);
}

float4 GetTransmissionProfile(uint SubsurfaceProfileInt, float Thickness)
{

	const float2 TextureSize = View_SSProfilesTextureSizeAndInvSize.xy;
	float ProfileOffset =  ( ( ( ( ( ( ( 0 +1) +1) +1) +1) +1) +1) + ( 13 + 9 + 6 ) ) ;
	float2 uv = float2((ProfileOffset + Thickness /  5.0f  * ( 32  - 1) + 0.5f), SubsurfaceProfileInt + 0.5f) / (TextureSize.xy);
	return Texture2DSampleLevel(View_SSProfilesTexture, View_SSProfilesTransmissionSampler, uv, 0);
}

float4 GetTransmissionProfile(FGBufferData GBufferData, float Thickness)
{

	return GetTransmissionProfile(ExtractSubsurfaceProfileInt(GBufferData), Thickness);
}

float EncodeThickness(float Thickness)
{
	return 1 - Thickness;
}

float DecodeThickness(float Thickness)
{
	return 1 - Thickness;
}
#line 12 "/Engine/Private/ShadingModels.ush"
#line 1 "HairBsdf.ush"
#line 10 "/Engine/Private/HairBsdf.ush"
struct FHairTransmittanceData
{
	bool bUseLegacyAbsorption;
	bool bUseSeparableR;
	bool bUseBacklit;

	float OpaqueVisibility;
	float3 LocalScattering;
	float3 GlobalScattering;

	uint ScatteringComponent;
};

FHairTransmittanceData InitHairTransmittanceData(bool bMultipleScatterEnable = true)
{
	FHairTransmittanceData o;
	o.bUseLegacyAbsorption = true;
	o.bUseSeparableR = true;
	o.bUseBacklit = false;

	o.OpaqueVisibility = 1;
	o.LocalScattering = 0;
	o.GlobalScattering = 1;
	o.ScatteringComponent =  0x1u  |  0x2u  |  0x4u  | (bMultipleScatterEnable ?  0x20u  : 0);

	return o;
}

FHairTransmittanceData InitHairStrandsTransmittanceData(bool bMultipleScatterEnable = false)
{
	FHairTransmittanceData o = InitHairTransmittanceData(bMultipleScatterEnable);
	o.bUseLegacyAbsorption = false;
	o.bUseBacklit = true;
	return o;
}




float Hair_g(float B, float Theta)
{
	return exp(-0.5 * Pow2(Theta) / (B * B)) / (sqrt(2 * PI) * B);
}

float Hair_F(float CosTheta)
{
	const float n = 1.55;
	const float F0 = Pow2((1 - n) / (1 + n));
	return F0 + (1 - F0) * Pow5(1 - CosTheta);
}

float3 KajiyaKayDiffuseAttenuation(FGBufferData GBuffer, float3 L, float3 V,  float3  N, float Shadow)
{

	float KajiyaDiffuse = 1 - abs(dot(N, L));

	float3 FakeNormal = normalize(V - N * dot(V, N));

	N = FakeNormal;


	float Wrap = 1;
	float NoL = saturate((dot(N, L) + Wrap) / Square(1 + Wrap));
	float DiffuseScatter = (1 / PI) * lerp(NoL, KajiyaDiffuse, 0.33) * GBuffer.Metallic;
	float Luma = Luminance(GBuffer.BaseColor);
	float3 ScatterTint = pow(abs(GBuffer.BaseColor / Luma), 1 - Shadow);
	return sqrt(abs(GBuffer.BaseColor)) * DiffuseScatter * ScatterTint;
}

float3 EvaluateHairMultipleScattering(
	const FHairTransmittanceData TransmittanceData,
	const float Roughness,
	const float3 Fs)
{
	return TransmittanceData.GlobalScattering * (Fs + TransmittanceData.LocalScattering) * TransmittanceData.OpaqueVisibility;
}
#line 310 "/Engine/Private/HairBsdf.ush"
float3 HairShading( FGBufferData GBuffer, float3 L, float3 V,  float3  N, float Shadow, FHairTransmittanceData HairTransmittance, float InBacklit, float Area, uint2 Random )
{



	float ClampedRoughness = clamp(GBuffer.Roughness, 1/255.0f, 1.0f);


	const float Backlit = min(InBacklit, HairTransmittance.bUseBacklit ? GBuffer.CustomData.z : 1);








	const float VoL = dot(V,L);
	const float SinThetaL = clamp(dot(N,L), -1.f, 1.f);
	const float SinThetaV = clamp(dot(N,V), -1.f, 1.f);
	float CosThetaD = cos( 0.5 * abs( asinFast( SinThetaV ) - asinFast( SinThetaL ) ) );



	const float3 Lp = L - SinThetaL * N;
	const float3 Vp = V - SinThetaV * N;
	const float CosPhi = dot(Lp,Vp) * rsqrt( dot(Lp,Lp) * dot(Vp,Vp) + 1e-4 );
	const float CosHalfPhi = sqrt( saturate( 0.5 + 0.5 * CosPhi ) );


	float n = 1.55;

	float n_prime = 1.19 / CosThetaD + 0.36 * CosThetaD;

	float Shift = 0.035;
	float Alpha[] =
	{
		-Shift * 2,
		Shift,
		Shift * 4,
	};
	float B[] =
	{
		Area + Pow2(ClampedRoughness),
		Area + Pow2(ClampedRoughness) / 2,
		Area + Pow2(ClampedRoughness) * 2,
	};

	float3 S = 0;
	if (HairTransmittance.ScatteringComponent &  0x1u )
	{
		const float sa = sin(Alpha[0]);
		const float ca = cos(Alpha[0]);
		float Shift = 2 * sa * (ca * CosHalfPhi * sqrt(1 - SinThetaV * SinThetaV) + sa * SinThetaV);
		float BScale = HairTransmittance.bUseSeparableR ? sqrt(2.0) * CosHalfPhi : 1;
		float Mp = Hair_g(B[0] * BScale, SinThetaL + SinThetaV - Shift);
		float Np = 0.25 * CosHalfPhi;
		float Fp = Hair_F(sqrt(saturate(0.5 + 0.5 * VoL)));
		S += Mp * Np * Fp * (GBuffer.Specular * 2) * lerp(1, Backlit, saturate(-VoL));
	}


	if (HairTransmittance.ScatteringComponent &  0x2u )
	{
		float Mp = Hair_g( B[1], SinThetaL + SinThetaV - Alpha[1] );

		float a = 1 / n_prime;


		float h = CosHalfPhi * ( 1 + a * ( 0.6 - 0.8 * CosPhi ) );




		float f = Hair_F( CosThetaD * sqrt( saturate( 1 - h*h ) ) );
		float Fp = Pow2(1 - f);


		float3 Tp = 0;
		if (HairTransmittance.bUseLegacyAbsorption)
		{
			Tp = pow(abs(GBuffer.BaseColor), 0.5 * sqrt(1 - Pow2(h * a)) / CosThetaD);
		}
		else
		{

			const float3 AbsorptionColor = HairColorToAbsorption(GBuffer.BaseColor);
			Tp = exp(-AbsorptionColor * 2 * abs(1 - Pow2(h * a) / CosThetaD));
		}







		float Np = exp( -3.65 * CosPhi - 3.98 );

		S += Mp * Np * Fp * Tp * Backlit;
	}


	if (HairTransmittance.ScatteringComponent &  0x4u )
	{
		float Mp = Hair_g( B[2], SinThetaL + SinThetaV - Alpha[2] );


		float f = Hair_F( CosThetaD * 0.5 );
		float Fp = Pow2(1 - f) * f;

		float3 Tp = pow(abs(GBuffer.BaseColor), 0.8 / CosThetaD );



		float Np = exp( 17 * CosPhi - 16.78 );

		S += Mp * Np * Fp * Tp;
	}


	if (HairTransmittance.ScatteringComponent &  0x20u )
	{
		S = EvaluateHairMultipleScattering(HairTransmittance, ClampedRoughness, S);
		S += KajiyaKayDiffuseAttenuation(GBuffer, L, V, N, Shadow);
	}

	S = -min(-S, 0.0);
	return S;
}
#line 13 "/Engine/Private/ShadingModels.ush"
#line 1 "ShadingEnergyConservation.ush"
#line 39 "/Engine/Private/ShadingEnergyConservation.ush"
float2 GGXEnergyLookup(float Roughness, float NoV)
{









	return float2(1, 0);

}

float GGXEnergyLookup(float Roughness, float NoV, float Eta)
{








	return 1.0;

}

float2 ClothEnergyLookup(float Roughness, float NoV)
{
#line 82 "/Engine/Private/ShadingEnergyConservation.ush"
	return float2(1, 0);

}

float DiffuseEnergyLookup(float Roughness, float NoV)
{










	return 1.f;

}

struct FBxDFEnergyTerms {
	float3 W;
	float3 E;
};



FBxDFEnergyTerms ComputeFresnelEnergyTerms(float2 E, float3 F0, float3 F90)
{
	FBxDFEnergyTerms Result;


	Result.W = View_bShadingEnergyConservation ? (1.0 + F0 * ((1 - E.x) / E.x)) : 1.0f;



	Result.E = Result.W * (E.x * F0 + E.y * (F90 - F0));
	return Result;
}

FBxDFEnergyTerms ComputeGGXSpecEnergyTerms(float Roughness, float NoV, float3 F0, float3 F90)
{
	FBxDFEnergyTerms Out;





	{
		Out.W = 1.0f;
		Out.E = F0;
	}

	return Out;
}

FBxDFEnergyTerms ComputeGGXSpecEnergyTerms(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g);
	return ComputeGGXSpecEnergyTerms(Roughness, NoV, F0, F90);
}

FBxDFEnergyTerms ComputeClothEnergyTerms(float Roughness, float NoV, float3 F0, float3 F90)
{
	FBxDFEnergyTerms Out;





	{
		Out.W = 1.0f;
		Out.E = F0;
	}

	return Out;
}

FBxDFEnergyTerms ComputeClothEnergyTerms(float Roughness, float NoV, float3 F0)
{
	const float F90 = saturate(50.0 * F0.g);
	return ComputeClothEnergyTerms(Roughness, NoV, F0, F90);
}

FBxDFEnergyTerms ComputeDiffuseEnergyTerms(float Roughness, float NoV)
{
	FBxDFEnergyTerms Out;





	{
		Out.E = 1.0f;
	}

	Out.W = 1.0f;
	return Out;
}


float3 ComputeEnergyPreservation(FBxDFEnergyTerms EnergyTerms)
{




	return 1.0f;

}


float3 ComputeEnergyConservation(FBxDFEnergyTerms EnergyTerms)
{
	return EnergyTerms.W;
}
#line 14 "/Engine/Private/ShadingModels.ush"
#line 52 "/Engine/Private/ShadingModels.ush"
struct FDirectLighting
{
	float3 Diffuse;
	float3 Specular;
	float3 Transmission;
};

struct FShadowTerms
{
	float SurfaceShadow;
	float TransmissionShadow;
	float TransmissionThickness;
	FHairTransmittanceData HairTransmittance;
};
FDirectLighting HairBxDF(FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow)
{
	const float3 BsdfValue = HairShading(GBuffer, L, V, N, Shadow.TransmissionShadow, Shadow.HairTransmittance, 1, 0, uint2(0, 0));

	FDirectLighting Lighting;
	Lighting.Diffuse = 0;
	Lighting.Specular = 0;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * BsdfValue;
	return Lighting;
}

float New_a2( float a2, float SinAlpha, float VoH )
{
	return a2 + 0.25 * SinAlpha * (3.0 * sqrtFast(a2) + SinAlpha) / ( VoH + 0.001 );


}

float EnergyNormalization( inout float a2, float VoH, FAreaLight AreaLight )
{
	if( AreaLight.SphereSinAlphaSoft > 0 )
	{

		a2 = saturate( a2 + Pow2( AreaLight.SphereSinAlphaSoft ) / ( VoH * 3.6 + 0.4 ) );
	}

	float Sphere_a2 = a2;
	float Energy = 1;
	if( AreaLight.SphereSinAlpha > 0 )
	{
		Sphere_a2 = New_a2( a2, AreaLight.SphereSinAlpha, VoH );
		Energy = a2 / Sphere_a2;
	}

	if( AreaLight.LineCosSubtended < 1 )
	{

		float LineCosTwoAlpha = AreaLight.LineCosSubtended;
		float LineTanAlpha = sqrt( ( 1.0001 - LineCosTwoAlpha ) / ( 1 + LineCosTwoAlpha ) );
		float Line_a2 = New_a2( Sphere_a2, LineTanAlpha, VoH );
		Energy *= sqrt( Sphere_a2 / Line_a2 );
#line 113 "/Engine/Private/ShadingModels.ush"
	}

	return Energy;
}

float3 SpecularGGX(float Roughness, float Anisotropy, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float Alpha = Roughness * Roughness;
	float a2 = Alpha * Alpha;

	FAreaLight Punctual = AreaLight;
	Punctual.SphereSinAlpha = 0;
	Punctual.SphereSinAlphaSoft = 0;
	Punctual.LineCosSubtended = 1;
	Punctual.Rect = (FRect)0;
	Punctual.IsRectAndDiffuseMicroReflWeight = 0;

	float Energy = EnergyNormalization(a2, Context.VoH, Punctual);

	float ax = 0;
	float ay = 0;
	GetAnisotropicRoughness(Alpha, Anisotropy, ax, ay);


	float3 D = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH) * Energy;
	float3 Vis = Vis_SmithJointAniso(ax, ay, Context.NoV, NoL, Context.XoV, Context.XoL, Context.YoV, Context.YoL);
	float3 F = F_Schlick( SpecularColor, Context.VoH );

	return (D * Vis) * F;
}

float3 SpecularGGX( float Roughness, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight )
{
	float a2 = Pow4( Roughness );
	float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );


	float D = D_GGX( a2, Context.NoH ) * Energy;
	float Vis = Vis_SmithJointApprox( a2, Context.NoV, NoL );
	float3 F = F_Schlick( SpecularColor, Context.VoH );

	return (D * Vis) * F;
}

float3 DualSpecularGGX(float AverageRoughness, float Lobe0Roughness, float Lobe1Roughness, float LobeMix, float3 SpecularColor, BxDFContext Context, float NoL, FAreaLight AreaLight)
{
	float AverageAlpha2 = Pow4(AverageRoughness);
	float Lobe0Alpha2 = Pow4(Lobe0Roughness);
	float Lobe1Alpha2 = Pow4(Lobe1Roughness);

	float Lobe0Energy = EnergyNormalization(Lobe0Alpha2, Context.VoH, AreaLight);
	float Lobe1Energy = EnergyNormalization(Lobe1Alpha2, Context.VoH, AreaLight);


	float D = lerp(D_GGX(Lobe0Alpha2, Context.NoH) * Lobe0Energy, D_GGX(Lobe1Alpha2, Context.NoH) * Lobe1Energy, LobeMix);
	float Vis = Vis_SmithJointApprox(AverageAlpha2, Context.NoV, NoL);
	float3 F = F_Schlick(SpecularColor, Context.VoH);

	return (D * Vis) * F;
}

FDirectLighting DefaultLitBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;
	FDirectLighting Lighting;




	bool bHasAnisotropy = false;


	float NoV, VoH, NoH;
	[branch]
	if (bHasAnisotropy)
	{
		float3  X = GBuffer.WorldTangent;
		float3  Y = normalize(cross(N, X));
		Init(Context, N, X, Y, V, L);

		NoV = Context.NoV;
		VoH = Context.VoH;
		NoH = Context.NoH;
	}
	else
	{
		Init(Context, N, V, L);

		NoV = Context.NoV;
		VoH = Context.VoH;
		NoH = Context.NoH;

		SphereMaxNoH(Context, AreaLight.SphereSinAlpha, true);
	}

	Context.NoV = saturate(abs( Context.NoV ) + 1e-5);






	Lighting.Diffuse = Diffuse_Lambert(GBuffer.DiffuseColor);

	Lighting.Diffuse *= AreaLight.FalloffColor * (Falloff * NoL);

	[branch]
	if (bHasAnisotropy)
	{

		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.Anisotropy, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}
	else
	{
		if( IsRectLight(AreaLight) )
		{
			Lighting.Specular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		}
		else
		{
			Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX(GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight);
		}
	}

	FBxDFEnergyTerms EnergyTerms = ComputeGGXSpecEnergyTerms(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);


	Lighting.Diffuse *= ComputeEnergyPreservation(EnergyTerms);


	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);

	Lighting.Transmission = 0;
	return Lighting;
}


float3 SimpleShading( float3 DiffuseColor, float3 SpecularColor, float Roughness, float3 L, float3 V,  float3  N )
{
	const float NoV = saturate(dot(N, V));
	const FBxDFEnergyTerms EnergyTerms = ComputeGGXSpecEnergyTerms(Roughness, NoV, SpecularColor);

	float3 H = normalize(V + L);
	float NoH = saturate( dot(N, H) );


	float D = D_GGX( Pow4(Roughness), NoH );
	float Vis = Vis_Implicit();
	float3 F = F_None( SpecularColor );

	return
		Diffuse_Lambert( DiffuseColor ) * ComputeEnergyPreservation(EnergyTerms) +
		(D * Vis) * F * ComputeEnergyConservation(EnergyTerms);
}

float3 CalcThinTransmission(float NoL, float NoV, FGBufferData GBuffer)
{
	float3 Transmission = 1.0;
	float AbsorptionMix = GBuffer.Metallic;
	if (AbsorptionMix > 0.0)
	{

		float NormalizedLayerThickness = 1.0;
		float ThinDistance = NormalizedLayerThickness * (rcp(NoV) + rcp(NoL));



		float3 TransmissionColor = Diffuse_Lambert(GBuffer.BaseColor);
		float3 ExtinctionCoefficient = -log(TransmissionColor) / (2.0 * NormalizedLayerThickness);
		float3 OpticalDepth = ExtinctionCoefficient * max(ThinDistance - 2.0 * NormalizedLayerThickness, 0.0);
		Transmission = saturate(exp(-OpticalDepth));
		Transmission = lerp(1.0, Transmission, AbsorptionMix);
	}

	return Transmission;
}

float RefractBlend(float VoH, float Eta)
{

	float k = 1.0 - Eta * Eta * (1.0 - VoH * VoH);
	return Eta * VoH - sqrt(k);
}

float RefractBlendClearCoatApprox(float VoH)
{

	return (0.63 - 0.22 * VoH) * VoH - 0.745;
}

float3 Refract(float3 V, float3 H, float Eta)
{

	float VoH = dot(V, H);
	return RefractBlend(VoH, Eta) * H - Eta * V;
}

BxDFContext RefractClearCoatContext(BxDFContext Context)
{








	BxDFContext RefractedContext = Context;
	float Eta = 1.0 / 1.5;
	float RefractionBlendFactor = RefractBlendClearCoatApprox(Context.VoH);
	float RefractionProjectionTerm = RefractionBlendFactor * Context.NoH;
	RefractedContext.NoV = clamp(Eta * Context.NoV - RefractionProjectionTerm, 0.001, 1.0);
	RefractedContext.NoL = clamp(Eta * Context.NoL - RefractionProjectionTerm, 0.001, 1.0);
	RefractedContext.VoH = saturate(Eta * Context.VoH - RefractionBlendFactor);
	RefractedContext.VoL = 2.0 * RefractedContext.VoH * RefractedContext.VoH - 1.0;
	RefractedContext.NoH = Context.NoH;
	return RefractedContext;
}

FDirectLighting ClearCoatBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float ClearCoat = GBuffer.CustomData.x;
	const float ClearCoatRoughness = max(GBuffer.CustomData.y, 0.02f);
	const float Film = 1 * ClearCoat;
	const float MetalSpec = 0.9;

	FDirectLighting Lighting = {
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0),
		float3(0.0, 0.0, 0.0)
	};

	BxDFContext Context;
	float3  Nspec = N;

	if ( 0 )
	{
		Nspec = GBuffer.WorldNormal;
	}




	bool bHasAnisotropy = false;


	float3  X = 0;
	float3  Y = 0;






	Init(Context, Nspec, V, L);



	float SphereSinAlpha = AreaLight.SphereSinAlpha;
	float RoughnessCompensation = 1 - Pow2(GBuffer.Roughness);
	float Alpha = Pow2(ClearCoatRoughness);
	RoughnessCompensation = RoughnessCompensation > 0.0 ? (1 - Alpha) / RoughnessCompensation : 0.0;
	AreaLight.SphereSinAlpha = saturate(AreaLight.SphereSinAlpha * RoughnessCompensation);

	SphereMaxNoH(Context, AreaLight.SphereSinAlpha,  0  == 0);
	Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;


	float F0 = 0.04;
	float Fc = Pow5(1 - Context.VoH);
	float F = Fc + (1 - Fc) * F0;

	FBxDFEnergyTerms EnergyTermsCoat = ComputeGGXSpecEnergyTerms(ClearCoatRoughness, Context.NoV, F0);

	if (bIsRect)
	{
		Lighting.Specular = ClearCoat * RectGGXApproxLTC(ClearCoatRoughness, F0, Nspec, V, AreaLight.Rect, AreaLight.Texture);
	}
	else
	{

		float a2 = Pow2(Alpha);
		float ClearCoatEnergy = EnergyNormalization(a2, Context.VoH, AreaLight);
		float D = D_GGX(a2, Context.NoH) * ClearCoatEnergy;
		float Vis = Vis_SmithJointApprox(a2, Context.NoV, NoL);

		float Fr1 = D * Vis * F;
		Lighting.Specular = ClearCoat * AreaLight.FalloffColor * (Falloff * NoL * Fr1);
	}
	Lighting.Specular *= ComputeEnergyConservation(EnergyTermsCoat);



	AreaLight.SphereSinAlpha = SphereSinAlpha;
	Alpha = Pow2(GBuffer.Roughness);







	float FresnelCoeff = 1.0 - F;

	FresnelCoeff *= FresnelCoeff;





	if ( 0 )
	{
		BxDFContext TempContext;

		[branch]
		if (bHasAnisotropy)
		{
			Init(TempContext, N, X, Y, V, L);
		}
		else
		{
			Init(TempContext, Nspec, V, L);
		}


		float3 H = normalize(V + L);
		Context.NoH = saturate(dot(N, H));
		Context.NoV = saturate(dot(N, V));
		Context.NoL = saturate(dot(N, L));
		Context.VoL = saturate(dot(V, L));
		Context.VoH = saturate(dot(V, H));

		Context.XoV = TempContext.XoV;
		Context.XoL = TempContext.XoL;
		Context.XoH = TempContext.XoH;
		Context.YoV = TempContext.YoV;
		Context.YoL = TempContext.YoL;
		Context.YoH = TempContext.YoH;

		if (!bHasAnisotropy)
		{
			bool bNewtonIteration = true;
			SphereMaxNoH(Context, AreaLight.SphereSinAlpha, bNewtonIteration);
		}

		Context.NoV = saturate(abs(Context.NoV) + 1e-5);
	}










	if (bHasAnisotropy)
	{

		X = GBuffer.WorldTangent;
		Y = normalize(cross(N, X));
		Init(Context, Nspec, X, Y, V, L);
	}
	BxDFContext BottomContext = RefractClearCoatContext(Context);
	BottomContext.VoH = bIsRect ? BottomContext.NoV : BottomContext.VoH;

	FBxDFEnergyTerms EnergyTermsBottom = ComputeGGXSpecEnergyTerms(GBuffer.Roughness, BottomContext.NoV, GBuffer.SpecularColor);


	float3 Transmission = CalcThinTransmission(BottomContext.NoL, BottomContext.NoV, GBuffer);


	float3 DefaultDiffuse = (Falloff * NoL) * AreaLight.FalloffColor * Diffuse_Lambert(GBuffer.DiffuseColor) * ComputeEnergyPreservation(EnergyTermsBottom);
	float3 RefractedDiffuse = FresnelCoeff * Transmission * DefaultDiffuse;
	Lighting.Diffuse = lerp(DefaultDiffuse, RefractedDiffuse, ClearCoat);

	if (!bHasAnisotropy && bIsRect)
	{

		float3 DefaultSpecular = RectGGXApproxLTC(GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 RefractedSpecular = FresnelCoeff * Transmission * DefaultSpecular;
		Lighting.Specular += lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}
	else
	{
		float a2 = Pow4(GBuffer.Roughness);
		float D2 = 0;
		float Vis2 = 0;

		[branch]
		if (bHasAnisotropy)
		{
			float ax = 0;
			float ay = 0;
			GetAnisotropicRoughness(Alpha, GBuffer.Anisotropy, ax, ay);

			D2 = D_GGXaniso(ax, ay, Context.NoH, Context.XoH, Context.YoH);
			Vis2 = Vis_SmithJointAniso(ax, ay, BottomContext.NoV, BottomContext.NoL, BottomContext.XoV, BottomContext.XoL, BottomContext.YoV, BottomContext.YoL);
		}
		else
		{
			D2 = D_GGX(a2, BottomContext.NoH);

			Vis2 = Vis_SmithJointApprox(a2, BottomContext.NoV, NoL);
		}
		float3 F = F_Schlick(GBuffer.SpecularColor, BottomContext.VoH);
		float3 F_DefaultLit = F_Schlick(GBuffer.SpecularColor, Context.VoH);

		float Energy = 0;

		[branch]
		if (bHasAnisotropy)
		{
			FAreaLight Punctual = AreaLight;
			Punctual.SphereSinAlpha = 0;
			Punctual.SphereSinAlphaSoft = 0;
			Punctual.LineCosSubtended = 1;
			Punctual.Rect = (FRect)0;
			Punctual.IsRectAndDiffuseMicroReflWeight = 0;

			Energy = EnergyNormalization(a2, Context.VoH, Punctual);
		}
		else
		{
			Energy = EnergyNormalization(a2, Context.VoH, AreaLight);
		}


		float3 CommonSpecular = (Energy * Falloff * NoL * D2 * Vis2) * AreaLight.FalloffColor;
		float3 DefaultSpecular = F_DefaultLit;
		float3 RefractedSpecular = FresnelCoeff * Transmission * F;
		Lighting.Specular += CommonSpecular * lerp(DefaultSpecular, RefractedSpecular, ClearCoat);
	}

	return Lighting;
}


float ApproximateHG(float cosJ, float g)
{
	float g2 = g * g;
	float gcos2 = 1.0f - (g * cosJ);
	gcos2 *= gcos2;

	const float ISO_PHASE_FUNC_Normalized = 0.5;

	return (ISO_PHASE_FUNC_Normalized * (1.0f - g2) / max( 1e-5, gcos2));
}

void GetProfileDualSpecular(FGBufferData GBuffer, out float AverageToRoughness0, out float AverageToRoughness1, out float LobeMix)
{










	AverageToRoughness0 = 1.f;
	AverageToRoughness1 = 1.f;
	LobeMix = 0.f;

}

FDirectLighting SubsurfaceProfileBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	BxDFContext Context;
	Init( Context, N, V, L );
	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	float AverageToRoughness0;
	float AverageToRoughness1;
	float LobeMix;
	GetProfileDualSpecular(GBuffer, AverageToRoughness0, AverageToRoughness1, LobeMix);

	float AverageRoughness = GBuffer.Roughness;
	float Lobe0Roughness = max(saturate(AverageRoughness * AverageToRoughness0), 0.02f);
	float Lobe1Roughness = saturate(AverageRoughness * AverageToRoughness1);



	float Opacity = GBuffer.CustomData.a;
	Lobe0Roughness = lerp(1.0f, Lobe0Roughness, saturate(Opacity * 10.0f));
	Lobe1Roughness = lerp(1.0f, Lobe1Roughness, saturate(Opacity * 10.0f));


	const FBxDFEnergyTerms EnergyTerms = ComputeGGXSpecEnergyTerms(AverageRoughness, Context.NoV, GBuffer.SpecularColor);

	FDirectLighting Lighting;
	Lighting.Diffuse = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Burley( GBuffer.DiffuseColor, GBuffer.Roughness, Context.NoV, NoL, Context.VoH );

	if (IsRectLight(AreaLight))
	{
		float3 Lobe0Specular = RectGGXApproxLTC(Lobe0Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		float3 Lobe1Specular = RectGGXApproxLTC(Lobe1Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture);
		Lighting.Specular = lerp(Lobe0Specular, Lobe1Specular, LobeMix);
	}
	else
	{
		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * DualSpecularGGX(AverageRoughness, Lobe0Roughness, Lobe1Roughness, LobeMix, GBuffer.SpecularColor, Context, NoL, AreaLight);
	}

	Lighting.Diffuse *= ComputeEnergyPreservation(EnergyTerms);
	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);
#line 640 "/Engine/Private/ShadingModels.ush"
	Lighting.Transmission = 0;



	return Lighting;
}

FDirectLighting ClothBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	const float3 FuzzColor = ExtractSubsurfaceColor(GBuffer);
	const float Cloth = saturate(GBuffer.CustomData.a);

	BxDFContext Context;
	Init( Context, N, V, L );
	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, true );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );

	float3 Spec1;
	if(IsRectLight(AreaLight))
		Spec1 = RectGGXApproxLTC( GBuffer.Roughness, GBuffer.SpecularColor, N, V, AreaLight.Rect, AreaLight.Texture );
	else
		Spec1 = AreaLight.FalloffColor * (Falloff * NoL) * SpecularGGX( GBuffer.Roughness, GBuffer.SpecularColor, Context, NoL, AreaLight );

	const FBxDFEnergyTerms EnergyTerms1 = ComputeGGXSpecEnergyTerms(GBuffer.Roughness, Context.NoV, GBuffer.SpecularColor);
	Spec1 *= ComputeEnergyConservation(EnergyTerms1);


	float D2 = D_InvGGX( Pow4( GBuffer.Roughness ), Context.NoH );
	float Vis2 = Vis_Cloth( Context.NoV, NoL );
	float3 F2 = F_Schlick( FuzzColor, Context.VoH );
	float3 Spec2 = AreaLight.FalloffColor * (Falloff * NoL) * (D2 * Vis2) * F2;

	const FBxDFEnergyTerms EnergyTerms2 = ComputeClothEnergyTerms(GBuffer.Roughness, Context.NoV, FuzzColor);
	Spec2 *= ComputeEnergyConservation(EnergyTerms2);

	FDirectLighting Lighting;
	Lighting.Diffuse = AreaLight.FalloffColor * (Falloff * NoL) * Diffuse_Lambert( GBuffer.DiffuseColor );
	Lighting.Specular = lerp( Spec1, Spec2, Cloth );
	Lighting.Transmission = 0;

	Lighting.Diffuse *= lerp(ComputeEnergyPreservation(EnergyTerms1), ComputeEnergyPreservation(EnergyTerms2), Cloth);

	return Lighting;
}

FDirectLighting SubsurfaceBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;

	float3 H = normalize(V + L);



	float InScatter = pow(saturate(dot(L, -V)), 12) * lerp(3, .1f, Opacity);


	float NormalContribution = saturate(dot(N, H) * Opacity + 1 - Opacity);
	float BackScatter = GBuffer.GBufferAO * NormalContribution / (PI * 2);


	Lighting.Transmission = AreaLight.FalloffColor * ( Falloff * lerp(BackScatter, 1, InScatter) ) * SubsurfaceColor;

	return Lighting;
}

FDirectLighting TwoSidedBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);


	float Wrap = 0.5;
	float WrapNoL = saturate( ( -dot(N, L) + Wrap ) / Square( 1 + Wrap ) );


	float VoL = dot(V, L);
	float Scatter = D_GGX( 0.6*0.6, saturate( -VoL ) );

	Lighting.Transmission = AreaLight.FalloffColor * (Falloff * WrapNoL * Scatter) * SubsurfaceColor;

	return Lighting;
}

FDirectLighting EyeBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{









	const float3 IrisNormal = OctahedronToUnitVector( GBuffer.CustomData.yz * 2 - 1 );
	const float IrisDistance = GBuffer.StoredMetallic;
	const float IrisMask = 1.0f - GBuffer.CustomData.w;





	const float3 CausticNormal = normalize(lerp(IrisNormal, -N, IrisMask*IrisDistance));


	BxDFContext Context;
	Init( Context, N, V, L );
	SphereMaxNoH( Context, AreaLight.SphereSinAlpha, false );
	Context.NoV = saturate( abs( Context.NoV ) + 1e-5 );
	const bool bIsRect = IsRectLight(AreaLight);
	Context.VoH = bIsRect ? Context.NoV : Context.VoH;


	float F0 = GBuffer.Specular * 0.08;
	float Fc = Pow5( 1 - Context.VoH );
	float F = Fc + (1 - Fc) * F0;

	const FBxDFEnergyTerms EnergyTerms = ComputeGGXSpecEnergyTerms(GBuffer.Roughness, Context.NoV, F0);

	FDirectLighting Lighting;

	if( bIsRect )
	{
		Lighting.Specular = RectGGXApproxLTC( GBuffer.Roughness, F0, N, V, AreaLight.Rect, AreaLight.Texture );
	}
	else
	{
		float a2 = Pow4( GBuffer.Roughness );
		float Energy = EnergyNormalization( a2, Context.VoH, AreaLight );


		float D = D_GGX( a2, Context.NoH ) * Energy;
		float Vis = Vis_SmithJointApprox( a2, Context.NoV, NoL );

		Lighting.Specular = AreaLight.FalloffColor * (Falloff * NoL) * D * Vis * F;
	}

	float IrisNoL = saturate( dot( IrisNormal, L ) );
	float Power = lerp( 12, 1, IrisNoL );
	float Caustic = 0.8 + 0.2 * ( Power + 1 ) * pow( saturate( dot( CausticNormal, L ) ), Power );
	float Iris = IrisNoL * Caustic;
	float Sclera = NoL;

	Lighting.Specular *= ComputeEnergyConservation(EnergyTerms);





	const float EnergyPreservation = 1.0f - F;


	Lighting.Diffuse = 0;
	Lighting.Transmission = AreaLight.FalloffColor * ( Falloff * lerp( Sclera, Iris, IrisMask ) * EnergyPreservation ) * Diffuse_Lambert( GBuffer.DiffuseColor );
	return Lighting;
}

FDirectLighting PreintegratedSkinBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	FDirectLighting Lighting = DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );

	float3 SubsurfaceColor = ExtractSubsurfaceColor(GBuffer);
	float Opacity = GBuffer.CustomData.a;

	float3 PreintegratedBRDF = Texture2DSampleLevel(View_PreIntegratedBRDF, View_PreIntegratedBRDFSampler, float2(saturate(dot(N, L) * .5 + .5), 1 - Opacity), 0).rgb;
	Lighting.Transmission = AreaLight.FalloffColor * Falloff * PreintegratedBRDF * SubsurfaceColor;

	return Lighting;
}

FDirectLighting IntegrateBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float Falloff, float NoL, FAreaLight AreaLight, FShadowTerms Shadow )
{
	switch( GBuffer.ShadingModelID )
	{
		case  1 :
		case  10 :
		case  11 :
			return DefaultLitBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  2 :
			return SubsurfaceBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  3 :
			return PreintegratedSkinBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  4 :
			return ClearCoatBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  5 :
			return SubsurfaceProfileBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  6 :
			return TwoSidedBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  7 :
			return HairBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  8 :
			return ClothBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		case  9 :
			return EyeBxDF( GBuffer, N, V, L, Falloff, NoL, AreaLight, Shadow );
		default:
			return (FDirectLighting)0;
	}
}

FDirectLighting EvaluateBxDF( FGBufferData GBuffer,  float3  N,  float3  V,  float3  L, float NoL, FShadowTerms Shadow )
{
	FAreaLight AreaLight;
	AreaLight.SphereSinAlpha = 0;
	AreaLight.SphereSinAlphaSoft = 0;
	AreaLight.LineCosSubtended = 1;
	AreaLight.FalloffColor = 1;
	AreaLight.Rect = (FRect)0;
	AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
    AreaLight.Texture = InitRectTexture(View_LTCAmpTexture);

	return IntegrateBxDF( GBuffer, N, V, L, 1, NoL, AreaLight, Shadow );
}
#line 9 "/Engine/Private/ShadingModelsSampling.ush"
#line 38 "/Engine/Private/ShadingModelsSampling.ush"
struct FBxDFSample
{

	float3 L;


	float PDF;



	float3 Weight;


	uint Term;
};





FBxDFSample SampleDefaultLitBxDF(uint TermMask, FGBufferData GBuffer, float3 V, float4 E)
{
	TermMask &=  0x01  |  0x02 ;

	float2 DiskE = UniformSampleDiskConcentric(E.xy);

	float3 N = GBuffer.WorldNormal;
	float3x3 TangentBasis = GetTangentBasis(N);



	FBxDFSample BxDFSample = (FBxDFSample)0;
	if (TermMask ==  0x01 )
	{
		float TangentZ = sqrt(1 - length2(DiskE));

		BxDFSample.L = mul(float3(DiskE, TangentZ), TangentBasis);
		BxDFSample.PDF = TangentZ * rcp(PI);
		BxDFSample.Weight = 1.0;
		BxDFSample.Term =  0x01 ;
	}
	else if (TermMask ==  0x02 )
	{
		float a2 = Pow4(GBuffer.Roughness);

		float3 TangentV = mul(TangentBasis, V);




		float4 TangentH = ImportanceSampleVisibleGGX(DiskE, a2, TangentV);
#line 94 "/Engine/Private/ShadingModelsSampling.ush"
		float HPDF = TangentH.w;

		float3 H = mul(TangentH.xyz, TangentBasis);

		float VoH = saturate(dot(V, H));

		BxDFSample.L = 2 * dot(V, H) * H - V;
		BxDFSample.PDF = RayPDFToReflectionRayPDF(VoH, HPDF);









		BxDFSample.Weight = 1.0;

		BxDFSample.Term =  0x02 ;
	}

	return BxDFSample;
}

FBxDFSample SampleHairBxDF(uint TermMask, FGBufferData GBuffer, float3 V, float4 E)

{
	float3 N = GBuffer.WorldNormal;
	float4 L = UniformSampleSphere(E.xy);
	float NoL = dot(N, L.xyz);




	GBuffer.BaseColor = 1;

	FHairTransmittanceData TransmittanceData = InitHairTransmittanceData(true);
#line 139 "/Engine/Private/ShadingModelsSampling.ush"
	FDirectLighting Lighting;
	const float OpaqueVisibility = 1;
	const float Area = 0;
	const float Backlit = 1;
	Lighting.Diffuse = HairShading(GBuffer, L.xyz, V, N, OpaqueVisibility, TransmittanceData, Backlit, Area, uint2(0, 0));
	Lighting.Transmission = 0;
	Lighting.Specular = 0;

	FBxDFSample BxDFSample;
	BxDFSample.L = L.xyz;
	BxDFSample.PDF = L.w;
	BxDFSample.Weight = (Lighting.Diffuse + Lighting.Specular + Lighting.Transmission) * rcp(BxDFSample.PDF);
	BxDFSample.Term = TermMask;

	return BxDFSample;
}
#line 191 "/Engine/Private/ShadingModelsSampling.ush"
FBxDFSample SampleBxDF(const uint TermMask, FGBufferData GBuffer, float3 V, float4 E)
{
	switch( GBuffer.ShadingModelID )
	{
		case  1 :
		case  10 :
		case  2 :
		case  5 :
		case  3 :
		case  4 :
		case  6 :
		case  9 :
			return SampleDefaultLitBxDF(TermMask, GBuffer, V, E);
		case  7 :
			return SampleHairBxDF(TermMask, GBuffer, V, E);
		default:
			return (FBxDFSample)0;
	}
}

bool SupportsSampleBxDF(uint ShadingModelID)
{
	switch (ShadingModelID)
	{
	case  1 :
	case  10 :
	case  2 :
	case  5 :
	case  3 :
	case  4 :
	case  6 :
	case  9 :
	case  7 :
		return true;
	default:
		return false;
	}
}
#line 55 "/Engine/Private/BasePassPixelShader.usf"
#line 63 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "SSRT/SSRTRayCast.ush"
#line 46 "/Engine/Private/SSRT/SSRTRayCast.ush"
float GetStepScreenFactorToClipAtScreenEdge(float2 RayStartScreen, float2 RayStepScreen)
{

	const float RayStepScreenInvFactor = 0.5 * length(RayStepScreen);
	const float2 S = 1 - max(abs(RayStepScreen + RayStartScreen * RayStepScreenInvFactor) - RayStepScreenInvFactor, 0.0f) / abs(RayStepScreen);


	const float RayStepFactor = min(S.x, S.y) / RayStepScreenInvFactor;

	return RayStepFactor;
}



struct FSSRTRay
{
	float3 RayStartScreen;
	float3 RayStepScreen;

	float CompareTolerance;
};


FSSRTRay InitScreenSpaceRayFromWorldSpace(
	float3 RayOriginTranslatedWorld,
	float3 WorldRayDirection,
	float WorldTMax,
	float SceneDepth,
	float SlopeCompareToleranceScale,
	const bool bExtendRayToScreenBorder,
	out bool bRayWasClipped)
{
	WorldTMax = min(WorldTMax, 1000000);

	float3 ViewRayDirection = mul(float4(WorldRayDirection, 0.0), View_TranslatedWorldToView).xyz;

	float RayEndWorldDistance = ViewRayDirection.z < 0.0 ? min(-0.95 * SceneDepth / ViewRayDirection.z, WorldTMax) : WorldTMax;

	float3 RayEndWorld = RayOriginTranslatedWorld + WorldRayDirection * RayEndWorldDistance;

	float4 RayStartClip = mul(float4(RayOriginTranslatedWorld, 1.0), View_TranslatedWorldToClip);
	float4 RayEndClip = mul(float4(RayEndWorld, 1.0), View_TranslatedWorldToClip);

	float3 RayStartScreen = RayStartClip.xyz * rcp(RayStartClip.w);
	float3 RayEndScreen = RayEndClip.xyz * rcp(RayEndClip.w);

	float4 RayDepthClip = RayStartClip + mul(float4(0, 0, RayEndWorldDistance, 0), View_ViewToClip);
	float3 RayDepthScreen = RayDepthClip.xyz * rcp(RayDepthClip.w);

	FSSRTRay Ray;
	Ray.RayStartScreen = RayStartScreen;
	Ray.RayStepScreen = RayEndScreen - RayStartScreen;

	float ClipToScreenFactor = GetStepScreenFactorToClipAtScreenEdge(RayStartScreen.xy, Ray.RayStepScreen.xy);
	if (!bExtendRayToScreenBorder)
	{
		bRayWasClipped = ClipToScreenFactor < 1.0 || RayEndWorldDistance != WorldTMax;
		ClipToScreenFactor = min(ClipToScreenFactor, 1.0);
	}
	else
	{
		bRayWasClipped = true;
	}

	Ray.RayStepScreen *= ClipToScreenFactor;
	Ray.CompareTolerance = max(abs(Ray.RayStepScreen.z), (RayStartScreen.z - RayDepthScreen.z) * SlopeCompareToleranceScale);

	return Ray;
}

float4 ApplyProjMatrix(float4 V)
{
	return float4(
		V.xy * GetCotanHalfFieldOfView(),
		V.z * View_ViewToClip[2][2] + V.w * View_ViewToClip[3][2],
		V.z);
}



FSSRTRay InitScreenSpaceRay(
	float2 ScreenPos,
	float DeviceZ,
	float3 ViewRayDirection)
{
	float3 RayStartScreen = float3(ScreenPos, DeviceZ);





	float4 RayEndClip = ApplyProjMatrix(float4(ViewRayDirection, 0)) + float4(RayStartScreen, 1);

	float3 RayEndScreen = RayEndClip.xyz * rcp(RayEndClip.w);





	float3 RayDepthScreen = 0.5 * (RayStartScreen + mul(float4(0, 0, 1, 0), View_ViewToClip).xyz);

	FSSRTRay Ray;
	Ray.RayStartScreen = RayStartScreen;
	Ray.RayStepScreen = RayEndScreen - RayStartScreen;

	Ray.RayStepScreen *= GetStepScreenFactorToClipAtScreenEdge(RayStartScreen.xy, Ray.RayStepScreen.xy);





		Ray.CompareTolerance = max(abs(Ray.RayStepScreen.z), (RayStartScreen.z - RayDepthScreen.z) * 4);


	return Ray;
}


struct FSSRTTileInfos
{
	float Directionality[ 8 ];
	float ClosestDeviceZ;
	uint2 Coord;
	float _Padding[5];
};


struct FSSRTCastingSettings
{

	bool bStopWhenUncertain;


	bool bUseTileInfo;


	FSSRTTileInfos TileInfos;
};


FSSRTCastingSettings CreateDefaultCastSettings()
{
	FSSRTCastingSettings Settings;
	Settings.bUseTileInfo = false;
	Settings.bStopWhenUncertain = false;
	Settings.TileInfos = (FSSRTTileInfos)0;
	return Settings;
}

uint ComputeRayDirectionId(FSSRTRay Ray)
{
	float2 RayStepPixel = Ray.RayStepScreen.xy * View_ViewSizeAndInvSize.xy;


	RayStepPixel.y = -RayStepPixel.y;


	float RayDirection = atan2(-RayStepPixel.y, -RayStepPixel.x) + PI;

	uint DirectionId;

	[flatten]
	if (RayDirection < (0.5 * 2 * PI /  8 ) || RayDirection >(7.5 * 2 * PI /  8 ))
	{
		DirectionId = 0;
	}
	else if (RayDirection < (1.5 * 2 * PI /  8 ))
	{
		DirectionId = 1;
	}
	else if (RayDirection < (2.5 * 2 * PI /  8 ))
	{
		DirectionId = 2;
	}
	else if (RayDirection < (3.5 * 2 * PI /  8 ))
	{
		DirectionId = 3;
	}
	else if (RayDirection < (4.5 * 2 * PI /  8 ))
	{
		DirectionId = 4;
	}
	else if (RayDirection < (5.5 * 2 * PI /  8 ))
	{
		DirectionId = 5;
	}
	else if (RayDirection < (6.5 * 2 * PI /  8 ))
	{
		DirectionId = 6;
	}
	else
	{
		DirectionId = 7;
	}
#line 244 "/Engine/Private/SSRT/SSRTRayCast.ush"
	return DirectionId;
}


void CastScreenSpaceRay(
	Texture2D Texture, SamplerState Sampler,
	float StartMipLevel,
	FSSRTCastingSettings CastSettings,
	FSSRTRay Ray,
	float Roughness,
	uint NumSteps, float StepOffset,
	float4 HZBUvFactorAndInvFactor,
	bool bDebugPrint,
	out float3 DebugOutput,
	out float3 OutHitUVz,
	out float Level,
	out bool bFoundHit,
	out bool bUncertain)
{
	DebugOutput = 0;

	const float3 RayStartScreen = Ray.RayStartScreen;
	const float3 RayStepScreen = Ray.RayStepScreen;

	float3 RayStartUVz = float3( (RayStartScreen.xy * float2( 0.5, -0.5 ) + 0.5) * HZBUvFactorAndInvFactor.xy, RayStartScreen.z );
	float3 RayStepUVz = float3( RayStepScreen.xy * float2( 0.5, -0.5 ) * HZBUvFactorAndInvFactor.xy, RayStepScreen.z );

	const float Step = 1.0 / NumSteps;
	float CompareTolerance = Ray.CompareTolerance * Step;

	float LastDiff = 0;
	Level = StartMipLevel;



	RayStepUVz *= Step;
	float3 RayUVz = RayStartUVz + RayStepUVz * StepOffset;
#line 292 "/Engine/Private/SSRT/SSRTRayCast.ush"
	float4 MultipleSampleDepthDiff;
	bool4 bMultipleSampleHit;
#line 309 "/Engine/Private/SSRT/SSRTRayCast.ush"
	uint MaxIteration = NumSteps;
	if (CastSettings.bUseTileInfo)
	{
		uint DirectionId = ComputeRayDirectionId(Ray);

		float DirectionAndle = float(DirectionId) * (2 * PI * rcp(float( 8 )));

		float2 RayPixelDirection = float2(cos(DirectionAndle), sin(DirectionAndle));



		float2 cr = ScreenPosToViewportUV(RayStartScreen.xy) * View_ViewSizeAndInvSize.xy;
		float2 cre = ScreenPosToViewportUV(RayStartScreen.xy + RayStepScreen.xy) * View_ViewSizeAndInvSize.xy;


		float xr = dot(cr, RayPixelDirection) * View_ViewSizeAndInvSize.z;
		float xre = dot(cre, RayPixelDirection) * View_ViewSizeAndInvSize.z;
		float dr = RayStartScreen.z;
		float ar = RayStepScreen.z * View_ViewSizeAndInvSize.x / dot(RayStepScreen.xy * float2(0.5, -0.5) * View_ViewSizeAndInvSize.xy, RayPixelDirection);

		float2 cc = CastSettings.TileInfos.Coord *  8  +  8  / 2;
		float2 c0 = cc - sign(RayPixelDirection) * float( 8  / 2);
		float2 c1 = cc + sign(RayPixelDirection) * float( 8  / 2);
		float x0 = dot(c0, RayPixelDirection) * View_ViewSizeAndInvSize.z;
		float x1 = dot(c1, RayPixelDirection) * View_ViewSizeAndInvSize.z;


		float af = CastSettings.TileInfos.Directionality[DirectionId];
		float df = CastSettings.TileInfos.ClosestDeviceZ;
		float xf = af > 0.0 ? x0 : x1;


		uint UsefulMaxIteration;
		{
			float adiff = ar - af;


			[flatten]
			if (ar > af)
			{
				float x = (df - dr + xr * ar - xf * af) / adiff;


				float UseFulPercent = saturate((x - xr) / (xre - xr));

				UsefulMaxIteration = clamp(uint(NumSteps * UseFulPercent), 0, NumSteps);
			}
			else
			{
				UsefulMaxIteration = NumSteps;
			}
		}





			MaxIteration = UsefulMaxIteration;


		DebugOutput.x = float(MaxIteration) / float(NumSteps);
	}

	uint i;

	bFoundHit = false;
	bUncertain = false;

	[loop]
	for (i = 0; i < MaxIteration; i +=  4 )
	{
		float2 SamplesUV[ 4 ];
		float4 SamplesZ;
		float4 SamplesMip;
#line 409 "/Engine/Private/SSRT/SSRTRayCast.ush"
		{
			[unroll( 4 )]
			for (uint j = 0; j <  4 ; j++)
			{
				SamplesUV[j] = RayUVz.xy + (float(i) + float(j + 1)) * RayStepUVz.xy;
				SamplesZ[j] = RayUVz.z + (float(i) + float(j + 1)) * RayStepUVz.z;
			}

			SamplesMip.xy = Level;
			Level += (8.0 / NumSteps) * Roughness;

			SamplesMip.zw = Level;
			Level += (8.0 / NumSteps) * Roughness;
		}



		float4 SampleDepth;
		{
			[unroll( 4 )]
			for (uint j = 0; j <  4 ; j++)
			{
#line 439 "/Engine/Private/SSRT/SSRTRayCast.ush"
				SampleDepth[j] = Texture.SampleLevel(Sampler, SamplesUV[j], SamplesMip[j]).r;
			}
		}


		MultipleSampleDepthDiff = SamplesZ - SampleDepth;
		bMultipleSampleHit = abs(MultipleSampleDepthDiff + CompareTolerance) < CompareTolerance;


		{
			bool4 bMultipleSampleUncertain = (MultipleSampleDepthDiff + CompareTolerance) < -CompareTolerance;

			[unroll( 4 )]
			for (uint j = 0; j <  4 ; j++)
			{
				bFoundHit = bFoundHit || bMultipleSampleHit[j];
				bool bLocalMultisampleUncertain = bMultipleSampleUncertain[i];
				bUncertain = bUncertain || (bLocalMultisampleUncertain && !bFoundHit);
			}
		}

		[branch]
		if (bFoundHit || (CastSettings.bStopWhenUncertain && bUncertain))
		{
			break;
		}

		LastDiff = MultipleSampleDepthDiff.w;




	}


	[branch]
	if (bFoundHit)
    {
#line 537 "/Engine/Private/SSRT/SSRTRayCast.ush"
        {
            float DepthDiff0 = MultipleSampleDepthDiff[2];
            float DepthDiff1 = MultipleSampleDepthDiff[3];
            float Time0 = 3;

            [flatten]
            if (bMultipleSampleHit[2])
            {
                DepthDiff0 = MultipleSampleDepthDiff[1];
                DepthDiff1 = MultipleSampleDepthDiff[2];
                Time0 = 2;
            }
            [flatten]
            if (bMultipleSampleHit[1])
            {
                DepthDiff0 = MultipleSampleDepthDiff[0];
                DepthDiff1 = MultipleSampleDepthDiff[1];
                Time0 = 1;
            }
            [flatten]
            if (bMultipleSampleHit[0])
            {
                DepthDiff0 = LastDiff;
                DepthDiff1 = MultipleSampleDepthDiff[0];
                Time0 = 0;
            }

			Time0 += float(i);

            float Time1 = Time0 + 1;
#line 594 "/Engine/Private/SSRT/SSRTRayCast.ush"
            float TimeLerp = saturate(DepthDiff0 / (DepthDiff0 - DepthDiff1));
            float IntersectTime = Time0 + TimeLerp;


            OutHitUVz = RayUVz + RayStepUVz * IntersectTime;
        }
#line 608 "/Engine/Private/SSRT/SSRTRayCast.ush"
    }
	else
    {

        OutHitUVz = RayUVz + RayStepUVz * i;
    }

	OutHitUVz.xy *= HZBUvFactorAndInvFactor.zw;
	OutHitUVz.xy = OutHitUVz.xy * float2( 2, -2 ) + float2( -1, 1 );
	OutHitUVz.xy = OutHitUVz.xy * View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz;

}


bool RayCast(
	Texture2D Texture, SamplerState Sampler,
	float3 RayOriginTranslatedWorld, float3 RayDirection,
	float Roughness, float SceneDepth,
	uint NumSteps, float StepOffset,
	float4 HZBUvFactorAndInvFactor,
	bool bDebugPrint,
	out float3 OutHitUVz,
	out float Level)
{



		float SlopeCompareToleranceScale = 4.0f;


	bool bRayWasClipped;
	FSSRTRay Ray = InitScreenSpaceRayFromWorldSpace(
		RayOriginTranslatedWorld, RayDirection,
		SceneDepth,
		SceneDepth,
		SlopeCompareToleranceScale,
		true,
		bRayWasClipped);

	bool bHit;
	bool bUncertain;
	float3 DebugOutput;
	CastScreenSpaceRay(
		Texture, Sampler,
		1.0,
		CreateDefaultCastSettings(),
		Ray,
		Roughness, NumSteps, StepOffset,
		HZBUvFactorAndInvFactor, bDebugPrint,
		DebugOutput,
		OutHitUVz,
		Level,
		bHit,
		bUncertain);

	return bHit;
}

float ComputeHitVignetteFromScreenPos(float2 ScreenPos)
{
	float2 Vignette = saturate(abs(ScreenPos) * 5 - 4);



	return SafeSaturate(1.0 - dot(Vignette, Vignette));
}

void ReprojectHit(float4 PrevScreenPositionScaleBias, float3 HitUVz, out float2 OutPrevUV, out float OutVignette)
{

	float2 ThisScreen = (HitUVz.xy - View_ScreenPositionScaleBias.wz) / View_ScreenPositionScaleBias.xy;
	float4 ThisClip = float4( ThisScreen, HitUVz.z, 1 );
	float4 PrevClip = mul( ThisClip, View_ClipToPrevClip );
	float2 PrevScreen = PrevClip.xy / PrevClip.w;
	float2 PrevUV = PrevScreen.xy * PrevScreenPositionScaleBias.xy + PrevScreenPositionScaleBias.zw;

	OutVignette = min(ComputeHitVignetteFromScreenPos(ThisScreen), ComputeHitVignetteFromScreenPos(PrevScreen));
	OutPrevUV = PrevUV;
}

void ReprojectHit(float4 PrevScreenPositionScaleBias, Texture2D Texture, SamplerState Sampler, float3 HitUVz, out float2 OutPrevUV, out float OutVignette)
{

	float2 ThisScreen = (HitUVz.xy - View_ScreenPositionScaleBias.wz) / View_ScreenPositionScaleBias.xy;
	float4 ThisClip = float4( ThisScreen, HitUVz.z, 1 );
	float4 PrevClip = mul( ThisClip, View_ClipToPrevClip );
	float2 PrevScreen = PrevClip.xy / PrevClip.w;

	float4 EncodedVelocity = Texture.SampleLevel(Sampler, HitUVz.xy, 0);
	if( EncodedVelocity.x > 0.0 )
	{
		PrevScreen = ThisClip.xy - DecodeVelocityFromTexture(EncodedVelocity).xy;
	}

	float2 PrevUV = PrevScreen.xy * PrevScreenPositionScaleBias.xy + PrevScreenPositionScaleBias.zw;

	OutVignette = min(ComputeHitVignetteFromScreenPos(ThisScreen), ComputeHitVignetteFromScreenPos(PrevScreen));
	OutPrevUV = PrevUV;
}

float ComputeRayHitSqrDistance(float3 OriginTranslatedWorld, float3 HitUVz)
{

	float2 HitScreenPos = (HitUVz.xy - View_ScreenPositionScaleBias.wz) / View_ScreenPositionScaleBias.xy;
	float HitSceneDepth = ConvertFromDeviceZ(HitUVz.z);

	float3 HitTranslatedWorld = mul(float4(HitScreenPos * HitSceneDepth, HitSceneDepth, 1), View_ScreenToTranslatedWorld).xyz;

	return length2(OriginTranslatedWorld - HitTranslatedWorld);
}

float4 SampleScreenColor(Texture2D Texture, SamplerState Sampler, float2 UV)
{
	float4 OutColor;

	OutColor.rgb = Texture.SampleLevel( Sampler, UV, 0 ).rgb;

	OutColor.rgb = -min(-OutColor.rgb, 0.0);
	OutColor.a = 1;

	return OutColor;
}

float4 SampleHCBLevel( Texture2D Texture, SamplerState Sampler, float2 UV, float Level, float4 HZBUvFactorAndInvFactor )
{
	float4 OutColor;

	OutColor.rgb = Texture.SampleLevel( Sampler, UV * HZBUvFactorAndInvFactor.xy, Level ).rgb;

	OutColor.rgb = -min(-OutColor.rgb, 0.0);
	OutColor.a = 1;

	return OutColor;
}
#line 64 "/Engine/Private/BasePassPixelShader.usf"
#line 66 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "HeightFogCommon.ush"
#line 36 "/Engine/Private/HeightFogCommon.ush"
static const float FLT_EPSILON = 0.001f;
static const float FLT_EPSILON2 = 0.01f;






float3 ComputeInscatteringColor(float3 CameraToReceiver, float CameraToReceiverLength)
{
	float3  Inscattering =  OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter .xyz;


	[branch]
	if ( OpaqueBasePass_Shared_Fog_ExponentialFogParameters3 .z > 0)
	{
		float FadeAlpha = saturate(CameraToReceiverLength *  OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters .x +  OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters .y);
		float3 CubemapLookupVector = CameraToReceiver;

		CubemapLookupVector.xy = float2(dot(CubemapLookupVector.xy, float2( OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation .y, - OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation .x)), dot(CubemapLookupVector.xy,  OpaqueBasePass_Shared_Fog_SinCosInscatteringColorCubemapRotation .xy));
		float3 DirectionalColor = TextureCubeSampleLevel( OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap ,  OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler , CubemapLookupVector, 0).xyz;
		float3 NonDirectionalColor = TextureCubeSampleLevel( OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap ,  OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler , CubemapLookupVector,  OpaqueBasePass_Shared_Fog_FogInscatteringTextureParameters .z).xyz;
		Inscattering *= lerp(NonDirectionalColor, DirectionalColor, FadeAlpha);
	}
#line 66 "/Engine/Private/HeightFogCommon.ush"
	return Inscattering;
}



float CalculateLineIntegralShared(float FogHeightFalloff, float RayDirectionZ, float RayOriginTerms)
{
	float Falloff = max(-127.0f, FogHeightFalloff * RayDirectionZ);
	float LineIntegral = ( 1.0f - exp2(-Falloff) ) / Falloff;
	float LineIntegralTaylor = log(2.0) - ( 0.5 * Pow2( log(2.0) ) ) * Falloff;

	return RayOriginTerms * ( abs(Falloff) > FLT_EPSILON2 ? LineIntegral : LineIntegralTaylor );
}


float4  GetExponentialHeightFog(float3 WorldPositionRelativeToCamera, float ExcludeDistance)
{
	const  float  MinFogOpacity =  OpaqueBasePass_Shared_Fog_ExponentialFogColorParameter .w;
	const float MaxWorldObserverHeight =  OpaqueBasePass_Shared_Fog_ExponentialFogParameters .z;

	const float3 WorldObserverOrigin = float3( LWCToFloat( GetPrimaryView() .WorldCameraOrigin) .xy, min( LWCToFloat( GetPrimaryView() .WorldCameraOrigin) .z, MaxWorldObserverHeight));

	float3 CameraToReceiver = WorldPositionRelativeToCamera;
	CameraToReceiver.z +=  LWCToFloat( GetPrimaryView() .WorldCameraOrigin) .z - WorldObserverOrigin.z;
	float CameraToReceiverLengthSqr = dot(CameraToReceiver, CameraToReceiver);
	float CameraToReceiverLengthInv = rsqrt(CameraToReceiverLengthSqr);
	float CameraToReceiverLength = CameraToReceiverLengthSqr * CameraToReceiverLengthInv;
	float3  CameraToReceiverNormalized = CameraToReceiver * CameraToReceiverLengthInv;

	float RayOriginTerms =  OpaqueBasePass_Shared_Fog_ExponentialFogParameters .x;
	float RayOriginTermsSecond =  OpaqueBasePass_Shared_Fog_ExponentialFogParameters2 .x;
	float RayLength = CameraToReceiverLength;
	float RayDirectionZ = CameraToReceiver.z;
#line 120 "/Engine/Private/HeightFogCommon.ush"
	ExcludeDistance = max(ExcludeDistance,  OpaqueBasePass_Shared_Fog_ExponentialFogParameters .w);
	if (ExcludeDistance > 0)
	{
		float ExcludeIntersectionTime = ExcludeDistance * CameraToReceiverLengthInv;
		float CameraToExclusionIntersectionZ = ExcludeIntersectionTime * CameraToReceiver.z;
		float ExclusionIntersectionZ = WorldObserverOrigin.z + CameraToExclusionIntersectionZ;
		float ExclusionIntersectionToReceiverZ = CameraToReceiver.z - CameraToExclusionIntersectionZ;


		RayLength = (1.0f - ExcludeIntersectionTime) * CameraToReceiverLength;
		RayDirectionZ = ExclusionIntersectionToReceiverZ;

		float Exponent = max(-127.0f,  OpaqueBasePass_Shared_Fog_ExponentialFogParameters .y * (ExclusionIntersectionZ -  OpaqueBasePass_Shared_Fog_ExponentialFogParameters3 .y));
		RayOriginTerms =  OpaqueBasePass_Shared_Fog_ExponentialFogParameters3 .x * exp2(-Exponent);

		float ExponentSecond = max(-127.0f,  OpaqueBasePass_Shared_Fog_ExponentialFogParameters2 .y * (ExclusionIntersectionZ -  OpaqueBasePass_Shared_Fog_ExponentialFogParameters2 .w));
		RayOriginTermsSecond =  OpaqueBasePass_Shared_Fog_ExponentialFogParameters2 .z * exp2(-ExponentSecond);
	}



	float ExponentialHeightLineIntegralShared = CalculateLineIntegralShared( OpaqueBasePass_Shared_Fog_ExponentialFogParameters .y, RayDirectionZ, RayOriginTerms);

	ExponentialHeightLineIntegralShared+= CalculateLineIntegralShared( OpaqueBasePass_Shared_Fog_ExponentialFogParameters2 .y, RayDirectionZ, RayOriginTermsSecond);


	float ExponentialHeightLineIntegral = ExponentialHeightLineIntegralShared * RayLength;

	float3  InscatteringColor = ComputeInscatteringColor(CameraToReceiver, CameraToReceiverLength);
	float3  DirectionalInscattering = 0;



	[branch]
	if ( OpaqueBasePass_Shared_Fog_InscatteringLightDirection .w >= 0

		&&  OpaqueBasePass_Shared_Fog_ExponentialFogParameters3 .z == 0

	)
	{
#line 176 "/Engine/Private/HeightFogCommon.ush"
		float3  DirectionalLightInscattering =  OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor .xyz * pow(saturate(dot(CameraToReceiverNormalized,  OpaqueBasePass_Shared_Fog_InscatteringLightDirection .xyz)),  OpaqueBasePass_Shared_Fog_DirectionalInscatteringColor .w);



		float DirectionalInscatteringStartDistance =  OpaqueBasePass_Shared_Fog_InscatteringLightDirection .w;
		float DirExponentialHeightLineIntegral = ExponentialHeightLineIntegralShared * max(RayLength - DirectionalInscatteringStartDistance, 0.0f);

		float  DirectionalInscatteringFogFactor = saturate(exp2(-DirExponentialHeightLineIntegral));

		DirectionalInscattering = DirectionalLightInscattering * (1 - DirectionalInscatteringFogFactor);
	}



	float  ExpFogFactor = max(saturate(exp2(-ExponentialHeightLineIntegral)), MinFogOpacity);

	[flatten]
	if ( OpaqueBasePass_Shared_Fog_ExponentialFogParameters3 .w > 0 && CameraToReceiverLength >  OpaqueBasePass_Shared_Fog_ExponentialFogParameters3 .w)
	{
		ExpFogFactor = 1;
		DirectionalInscattering = 0;
	}





		float3  FogColor = (InscatteringColor) * (1 - ExpFogFactor) + DirectionalInscattering;


	return  float4 (FogColor, ExpFogFactor);
}

float4  CalculateHeightFog(float3 WorldPositionRelativeToCamera)
{
	float3 WorldPosition = WorldPositionRelativeToCamera + ResolvedView.TranslatedWorldCameraOrigin -  LWCToFloat(ResolvedView.PreViewTranslation) ;

	float ExcludeDistance = 0;


	float InvCosAngle = length(WorldPositionRelativeToCamera) / dot(WorldPositionRelativeToCamera, View_ViewForward);

	ExcludeDistance = max(View_VolumetricFogMaxDistance * InvCosAngle, 0);


	float4 FogInscatteringAndOpacity = GetExponentialHeightFog(WorldPositionRelativeToCamera, ExcludeDistance);
	return FogInscatteringAndOpacity;
}
#line 231 "/Engine/Private/HeightFogCommon.ush"
float4 CombineVolumetricFog(float4 GlobalFog, float3 VolumeUV, uint EyeIndex)
{
	float4 VolumetricFogLookup = float4(0, 0, 0, 1);


	if ( OpaqueBasePass_Shared_Fog_ApplyVolumetricFog  > 0)
	{

		if (EyeIndex == 0)
		{
			VolumetricFogLookup = Texture3DSampleLevel( OpaqueBasePass_Shared_Fog_IntegratedLightScattering ,  View_SharedBilinearClampedSampler , VolumeUV, 0);
		}
		else
		{
			VolumetricFogLookup = Texture3DSampleLevel( OpaqueBasePass_Shared_FogISR_IntegratedLightScattering ,  View_SharedBilinearClampedSampler , VolumeUV, 0);
		}
#line 250 "/Engine/Private/HeightFogCommon.ush"
	}





	return float4(VolumetricFogLookup.rgb + GlobalFog.rgb * VolumetricFogLookup.a, VolumetricFogLookup.a * GlobalFog.a);
}

float ComputeNormalizedZSliceFromDepth(float SceneDepth)
{
	return log2(SceneDepth * View_VolumetricFogGridZParams.x + View_VolumetricFogGridZParams.y) * View_VolumetricFogGridZParams.z * View_VolumetricFogInvGridSize.z;
}

float3 ComputeVolumeUVFromNDC(float4 NDCPosition)
{
	NDCPosition.xy /= NDCPosition.w;
	return float3(NDCPosition.xy * float2(.5f, -.5f) + .5f, ComputeNormalizedZSliceFromDepth(NDCPosition.w));
}
float3 ComputeVolumeUV_DEPRECATED(float3 WorldPosition, float4x4 WorldToClip)
{
	float4 NDCPosition = mul(float4(WorldPosition, 1), WorldToClip);
	return ComputeVolumeUVFromNDC(NDCPosition);
}
float3 ComputeVolumeUV(FLWCVector3 WorldPosition, FLWCInverseMatrix WorldToClip)
{
	float4 NDCPosition = LWCMultiply(MakeLWCVector4(WorldPosition, 1.0f), WorldToClip);
	return ComputeVolumeUVFromNDC(NDCPosition);
}
#line 67 "/Engine/Private/BasePassPixelShader.usf"
#line 68 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "SkyAtmosphereCommon.ush"
#line 28 "/Engine/Private/SkyAtmosphereCommon.ush"
float2 FromUnitToSubUvs(float2 uv, float4 SizeAndInvSize) { return (uv + 0.5f * SizeAndInvSize.zw) * (SizeAndInvSize.xy / (SizeAndInvSize.xy + 1.0f)); }
float2 FromSubUvsToUnit(float2 uv, float4 SizeAndInvSize) { return (uv - 0.5f * SizeAndInvSize.zw) * (SizeAndInvSize.xy / (SizeAndInvSize.xy - 1.0f)); }


float4 GetAerialPerspectiveLuminanceTransmittance(
	bool ViewIsRealTimeReflectionCapture, float4 CameraAerialPerspectiveVolumeSizeAndInvSize,
	float4 NDC, float3 SampledWorldPos, float3 CameraWorldPos,
	Texture3D<float4> AerialPerspectiveVolumeTexture, SamplerState AerialPerspectiveVolumeTextureSampler,
	float AerialPerspectiveVolumeDepthResolutionInv,
	float AerialPerspectiveVolumeDepthResolution,
	float AerialPerspectiveVolumeStartDepth,
	float AerialPerspectiveVolumeDepthSliceLengthKm,
	float AerialPerspectiveVolumeDepthSliceLengthKmInv,
	float OneOverExposure)
{
	float2 ScreenUv = (NDC.xy / NDC.ww) * float2(0.5f, -0.5f) + 0.5f;

	float tDepth = max(0.0f, length(SampledWorldPos - CameraWorldPos) - AerialPerspectiveVolumeStartDepth);

	float LinearSlice = tDepth * AerialPerspectiveVolumeDepthSliceLengthKmInv;
	float LinearW = LinearSlice * AerialPerspectiveVolumeDepthResolutionInv;
	float NonLinW = sqrt(LinearW);
	float NonLinSlice = NonLinW * AerialPerspectiveVolumeDepthResolution;

	const float HalfSliceDepth = 0.70710678118654752440084436210485f;
	float Weight = 1.0f;
	if (NonLinSlice < HalfSliceDepth)
	{

		Weight = saturate(NonLinSlice*NonLinSlice * 2.0f);
	}


	if (ViewIsRealTimeReflectionCapture)
	{


		float3 WorldDir = normalize(SampledWorldPos - CameraWorldPos);

		float SinPhi = WorldDir.z;
		float CosPhi = sqrt(1.0f - SinPhi * SinPhi);
		ScreenUv.y = WorldDir.z * 0.5f + 0.5f;

		float CosTheta = WorldDir.x / CosPhi;
		float SinTheta = WorldDir.y / CosPhi;
		float Theta = acos(CosTheta);
		Theta = SinTheta < 0.0f ? (PI-Theta) + PI : Theta;
		ScreenUv.x = Theta / (2.0 * PI);

		ScreenUv = FromUnitToSubUvs(ScreenUv, CameraAerialPerspectiveVolumeSizeAndInvSize);
	}


	float4 AP = Texture3DSampleLevel(AerialPerspectiveVolumeTexture, AerialPerspectiveVolumeTextureSampler, float3(ScreenUv, NonLinW), 0.0f);


	AP.rgb *= Weight;
	AP.a = 1.0 - (Weight * (1.0f - AP.a));
#line 95 "/Engine/Private/SkyAtmosphereCommon.ush"
	AP.rgb *= OneOverExposure;

	return AP;
}

float4 GetAerialPerspectiveLuminanceTransmittanceWithFogOver(
	bool ViewIsRealTimeReflectionCapture, float4 CameraAerialPerspectiveVolumeSizeAndInvSize,
	float4 NDC, float3 SampledWorldPos, float3 CameraWorldPos,
	Texture3D<float4> AerialPerspectiveVolumeTexture, SamplerState AerialPerspectiveVolumeTextureSampler,
	float AerialPerspectiveVolumeDepthResolutionInv,
	float AerialPerspectiveVolumeDepthResolution,
	float AerialPerspectiveVolumeStartDepth,
	float AerialPerspectiveVolumeDepthSliceLengthKm,
	float AerialPerspectiveVolumeDepthSliceLengthKmInv,
	float OneOverExposure, float4 FogToApplyOver)
{
	float4 AP = GetAerialPerspectiveLuminanceTransmittance(
		ViewIsRealTimeReflectionCapture, CameraAerialPerspectiveVolumeSizeAndInvSize,
		NDC, SampledWorldPos, CameraWorldPos,
		AerialPerspectiveVolumeTexture, AerialPerspectiveVolumeTextureSampler,
		AerialPerspectiveVolumeDepthResolutionInv,
		AerialPerspectiveVolumeDepthResolution,
		AerialPerspectiveVolumeStartDepth,
		AerialPerspectiveVolumeDepthSliceLengthKm,
		AerialPerspectiveVolumeDepthSliceLengthKmInv,
		OneOverExposure);

	float4 FinalFog;

	FinalFog.rgb = FogToApplyOver.rgb + AP.rgb * FogToApplyOver.a;

	FinalFog.a = FogToApplyOver.a * AP.a;

	return FinalFog;
}

void fromTransmittanceLutUVs(
	out float ViewHeight, out float ViewZenithCosAngle,
	in float BottomRadius, in float TopRadius, in float2 UV)
{
	float Xmu = UV.x;
	float Xr = UV.y;

	float H = sqrt(TopRadius * TopRadius - BottomRadius * BottomRadius);
	float Rho = H * Xr;
	ViewHeight = sqrt(Rho * Rho + BottomRadius * BottomRadius);

	float Dmin = TopRadius - ViewHeight;
	float Dmax = Rho + H;
	float D = Dmin + Xmu * (Dmax - Dmin);
	ViewZenithCosAngle = D == 0.0f ? 1.0f : (H * H - Rho * Rho - D * D) / (2.0f * ViewHeight * D);
	ViewZenithCosAngle = clamp(ViewZenithCosAngle, -1.0f, 1.0f);
}


void getTransmittanceLutUvs(
	in float viewHeight, in float viewZenithCosAngle, in float BottomRadius, in float TopRadius,
	out float2 UV)
{
	float H = sqrt(max(0.0f, TopRadius * TopRadius - BottomRadius * BottomRadius));
	float Rho = sqrt(max(0.0f, viewHeight * viewHeight - BottomRadius * BottomRadius));

	float Discriminant = viewHeight * viewHeight * (viewZenithCosAngle * viewZenithCosAngle - 1.0f) + TopRadius * TopRadius;
	float D = max(0.0f, (-viewHeight * viewZenithCosAngle + sqrt(Discriminant)));

	float Dmin = TopRadius - viewHeight;
	float Dmax = Rho + H;
	float Xmu = (D - Dmin) / (Dmax - Dmin);
	float Xr = Rho / H;

	UV = float2(Xmu, Xr);

}

void SkyViewLutParamsToUv(
	in bool IntersectGround, in float ViewZenithCosAngle, in float3 ViewDir, in float ViewHeight, in float BottomRadius, in float4 SkyViewLutSizeAndInvSize,
	out float2 UV)
{
	float Vhorizon = sqrt(ViewHeight * ViewHeight - BottomRadius * BottomRadius);
	float CosBeta = Vhorizon / ViewHeight;
	float Beta = acosFast4(CosBeta);
	float ZenithHorizonAngle = PI - Beta;
	float ViewZenithAngle = acosFast4(ViewZenithCosAngle);

	if (!IntersectGround)
	{
		float Coord = ViewZenithAngle / ZenithHorizonAngle;
		Coord = 1.0f - Coord;
		Coord = sqrt(Coord);
		Coord = 1.0f - Coord;
		UV.y = Coord * 0.5f;
	}
	else
	{
		float Coord = (ViewZenithAngle - ZenithHorizonAngle) / Beta;
		Coord = sqrt(Coord);
		UV.y = Coord * 0.5f + 0.5f;
	}

	{
		UV.x = (atan2Fast(-ViewDir.y, -ViewDir.x) + PI) / (2.0f * PI);
	}


	UV = FromUnitToSubUvs(UV, SkyViewLutSizeAndInvSize);
}

float3x3 GetSkyViewLutReferential(in float4x4 ViewSkyViewLutReferential)
{
	float3x3 SkyViewLutReferential = (float3x3) ViewSkyViewLutReferential;
	return SkyViewLutReferential;
}

float3 GetAtmosphereTransmittance(
	float3 PlanetCenterToWorldPos, float3 WorldDir, float BottomRadius, float TopRadius,
	Texture2D<float4> TransmittanceLutTexture, SamplerState TransmittanceLutTextureSampler)
{




	const float2 Sol = RayIntersectSphere(PlanetCenterToWorldPos, WorldDir, float4(float3(0.0f, 0.0f, 0.0f), BottomRadius));
	if (Sol.x > 0.0f || Sol.y > 0.0f)
	{
		return 0.0f;
	}

	const float PHeight = length(PlanetCenterToWorldPos);
	const float3 UpVector = PlanetCenterToWorldPos / PHeight;
	const float LightZenithCosAngle = dot(WorldDir, UpVector);
	float2 TransmittanceLutUv;
	getTransmittanceLutUvs(PHeight, LightZenithCosAngle, BottomRadius, TopRadius, TransmittanceLutUv);
	const float3 TransmittanceToLight = Texture2DSampleLevel(TransmittanceLutTexture, TransmittanceLutTextureSampler, TransmittanceLutUv, 0.0f).rgb;
	return TransmittanceToLight;
}

float3 GetLightDiskLuminance(
	float3 PlanetCenterToWorldPos, float3 WorldDir, float BottomRadius, float TopRadius,
	Texture2D<float4> TransmittanceLutTexture, SamplerState TransmittanceLutTextureSampler,
	float3 AtmosphereLightDirection, float AtmosphereLightDiscCosHalfApexAngle, float3 AtmosphereLightDiscLuminance)
{
	const float ViewDotLight = dot(WorldDir, AtmosphereLightDirection);
	const float CosHalfApex = AtmosphereLightDiscCosHalfApexAngle;
	if (ViewDotLight > CosHalfApex)
	{
		const float3 TransmittanceToLight = GetAtmosphereTransmittance(
			PlanetCenterToWorldPos, WorldDir, BottomRadius, TopRadius, TransmittanceLutTexture, TransmittanceLutTextureSampler);


		const float SoftEdge = saturate(2.0f * (ViewDotLight - CosHalfApex) / (1.0f - CosHalfApex));

		return TransmittanceToLight * AtmosphereLightDiscLuminance * SoftEdge;
	}
	return 0.0f;
}





float RayleighPhase(float CosTheta)
{
	float Factor = 3.0f / (16.0f * PI);
	return Factor * (1.0f + CosTheta * CosTheta);
}

float HgPhase(float G, float CosTheta)
{


	float Numer = 1.0f - G * G;
	float Denom = 1.0f + G * G + 2.0f * G * CosTheta;
	return Numer / (4.0f * PI * Denom * sqrt(Denom));
}

float3 GetAlbedo(float3 Scattering, float3 Extinction)
{
	return Scattering / max(0.001f, Extinction);
}

struct MediumSampleRGB
{
	float3 Scattering;
	float3 Absorption;
	float3 Extinction;

	float3 ScatteringMie;
	float3 AbsorptionMie;
	float3 ExtinctionMie;

	float3 ScatteringRay;
	float3 AbsorptionRay;
	float3 ExtinctionRay;

	float3 ScatteringOzo;
	float3 AbsorptionOzo;
	float3 ExtinctionOzo;

	float3 Albedo;
};


MediumSampleRGB SampleMediumRGB(in float3 WorldPos)
{
	const float SampleHeight = max(0.0, (length(WorldPos) - Atmosphere_BottomRadiusKm));

	const float DensityMie = exp(Atmosphere_MieDensityExpScale * SampleHeight);

	const float DensityRay = exp(Atmosphere_RayleighDensityExpScale * SampleHeight);

	const float DensityOzo = SampleHeight < Atmosphere_AbsorptionDensity0LayerWidth ?
		saturate(Atmosphere_AbsorptionDensity0LinearTerm * SampleHeight + Atmosphere_AbsorptionDensity0ConstantTerm) :
		saturate(Atmosphere_AbsorptionDensity1LinearTerm * SampleHeight + Atmosphere_AbsorptionDensity1ConstantTerm);

	MediumSampleRGB s;

	s.ScatteringMie = DensityMie * Atmosphere_MieScattering.rgb;
	s.AbsorptionMie = DensityMie * Atmosphere_MieAbsorption.rgb;
	s.ExtinctionMie = DensityMie * Atmosphere_MieExtinction.rgb;

	s.ScatteringRay = DensityRay * Atmosphere_RayleighScattering.rgb;
	s.AbsorptionRay = 0.0f;
	s.ExtinctionRay = s.ScatteringRay + s.AbsorptionRay;

	s.ScatteringOzo = 0.0f;
	s.AbsorptionOzo = DensityOzo * Atmosphere_AbsorptionExtinction.rgb;
	s.ExtinctionOzo = s.ScatteringOzo + s.AbsorptionOzo;

	s.Scattering = s.ScatteringMie + s.ScatteringRay + s.ScatteringOzo;
	s.Absorption = s.AbsorptionMie + s.AbsorptionRay + s.AbsorptionOzo;
	s.Extinction = s.ExtinctionMie + s.ExtinctionRay + s.ExtinctionOzo;
	s.Albedo = GetAlbedo(s.Scattering, s.Extinction);

	return s;
}
#line 69 "/Engine/Private/BasePassPixelShader.usf"
#line 75 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "ReflectionEnvironmentShared.ush"
#line 21 "/Engine/Private/ReflectionEnvironmentShared.ush"
float  ComputeReflectionCaptureMipFromRoughness( float  Roughness,  float  CubemapMaxMip)
{



	float  LevelFrom1x1 =  1  -  1.2  * log2(max(Roughness, 0.001));
	return CubemapMaxMip - 1 - LevelFrom1x1;
}

float ComputeReflectionCaptureRoughnessFromMip(float Mip,  float  CubemapMaxMip)
{
	float LevelFrom1x1 = CubemapMaxMip - 1 - Mip;
	return exp2( (  1  - LevelFrom1x1 ) /  1.2  );
}



float3 GetSkyLightReflection(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness,  OpaqueBasePass_Shared_Reflection_SkyLightParameters .x);
	float3 Reflection = TextureCubeSampleLevel( OpaqueBasePass_Shared_Reflection_SkyLightCubemap ,  OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler , ReflectionVector, AbsoluteSpecularMip).rgb;

	OutSkyAverageBrightness =  OpaqueBasePass_Shared_Reflection_SkyLightCubemapBrightness  * Luminance( View_SkyLightColor.rgb );
	return Reflection * View_SkyLightColor.rgb;
}

float3 GetSkyLightReflectionSupportingBlend(float3 ReflectionVector, float Roughness, out float OutSkyAverageBrightness)
{
	float3 Reflection = GetSkyLightReflection(ReflectionVector, Roughness, OutSkyAverageBrightness);

	[branch]
	if ( OpaqueBasePass_Shared_Reflection_SkyLightParameters .w > 0)
	{
		float AbsoluteSpecularMip = ComputeReflectionCaptureMipFromRoughness(Roughness,  OpaqueBasePass_Shared_Reflection_SkyLightParameters .x);
		float3 BlendDestinationReflection = TextureCubeSampleLevel( OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap ,  OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler , ReflectionVector, AbsoluteSpecularMip).rgb;

		Reflection = lerp(Reflection, BlendDestinationReflection * View_SkyLightColor.rgb,  OpaqueBasePass_Shared_Reflection_SkyLightParameters .w);
	}

	return Reflection;
}

bool ShouldSkyLightApplyPrecomputedBentNormalShadowing() {
	return View_SkyLightApplyPrecomputedBentNormalShadowingFlag != 0.0f;
}

bool ShouldSkyLightAffectReflection() {
	return View_SkyLightAffectReflectionFlag != 0.0f;
}

bool ShouldSkyLightAffectGlobalIllumination() {
	return View_SkyLightAffectGlobalIlluminationFlag != 0.0f;
}
#line 79 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkySHDiffuse(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1.0f);

	float3 Intermediate0, Intermediate1, Intermediate2;
	Intermediate0.x = dot( View_SkyIrradianceEnvironmentMap [0], NormalVector);
	Intermediate0.y = dot( View_SkyIrradianceEnvironmentMap [1], NormalVector);
	Intermediate0.z = dot( View_SkyIrradianceEnvironmentMap [2], NormalVector);

	float4 vB = NormalVector.xyzz * NormalVector.yzzx;
	Intermediate1.x = dot( View_SkyIrradianceEnvironmentMap [3], vB);
	Intermediate1.y = dot( View_SkyIrradianceEnvironmentMap [4], vB);
	Intermediate1.z = dot( View_SkyIrradianceEnvironmentMap [5], vB);

	float vC = NormalVector.x * NormalVector.x - NormalVector.y * NormalVector.y;
	Intermediate2 =  View_SkyIrradianceEnvironmentMap [6].xyz * vC;


	return max(0, Intermediate0 + Intermediate1 + Intermediate2);
}
#line 105 "/Engine/Private/ReflectionEnvironmentShared.ush"
float3 GetSkySHDiffuseSimple(float3 Normal)
{
	float4 NormalVector = float4(Normal, 1);

	float3 Intermediate0;
	Intermediate0.x = dot( View_SkyIrradianceEnvironmentMap [0], NormalVector);
	Intermediate0.y = dot( View_SkyIrradianceEnvironmentMap [1], NormalVector);
	Intermediate0.z = dot( View_SkyIrradianceEnvironmentMap [2], NormalVector);


	return max(0, Intermediate0);
}



float3 GetOffSpecularPeakReflectionDir(float3 Normal, float3 ReflectionVector, float Roughness)
{
	float a = Square(Roughness);
	return lerp( Normal, ReflectionVector, (1 - a) * ( sqrt(1 - a) + a ) );
}

float GetSpecularOcclusion(float NoV, float RoughnessSq, float AO)
{
	return saturate( pow( NoV + AO, RoughnessSq ) - 1 + AO );
}

float3 GetLookupVectorForBoxCapture(float3 ReflectionVector, float3 WorldPosition, float4 BoxCapturePositionAndRadius, float4x4 RelativeWorldToBox, float4 BoxScales, float3 LocalCaptureOffset, out float DistanceAlpha)
{

	float3 LocalRayStart = mul(float4(WorldPosition - BoxCapturePositionAndRadius.xyz, 1), RelativeWorldToBox).xyz;
	float3 LocalRayDirection = mul(float4(ReflectionVector, 0), RelativeWorldToBox).xyz;

	float3 InvRayDir = rcp(LocalRayDirection);


	float3 FirstPlaneIntersections = -InvRayDir - LocalRayStart * InvRayDir;

	float3 SecondPlaneIntersections = InvRayDir - LocalRayStart * InvRayDir;

	float3 FurthestPlaneIntersections = max(FirstPlaneIntersections, SecondPlaneIntersections);


	float Intersection = min(FurthestPlaneIntersections.x, min(FurthestPlaneIntersections.y, FurthestPlaneIntersections.z));


	float3 IntersectPosition = WorldPosition + Intersection * ReflectionVector;
	float3 ProjectedCaptureVector = IntersectPosition - (BoxCapturePositionAndRadius.xyz + LocalCaptureOffset);




	float BoxDistance = ComputeDistanceFromBoxToPoint(-(BoxScales.xyz - .5f * BoxScales.w), BoxScales.xyz - .5f * BoxScales.w, LocalRayStart * BoxScales.xyz);


	DistanceAlpha = 1.0 - smoothstep(0, .7f * BoxScales.w, BoxDistance);

	return ProjectedCaptureVector;
}

float3 GetLookupVectorForSphereCapture(float3 ReflectionVector, float3 WorldPosition, float4 SphereCapturePositionAndRadius, float NormalizedDistanceToCapture, float3 LocalCaptureOffset, inout float DistanceAlpha)
{
	float3 ProjectedCaptureVector = ReflectionVector;
	float ProjectionSphereRadius = SphereCapturePositionAndRadius.w;
	float SphereRadiusSquared = ProjectionSphereRadius * ProjectionSphereRadius;

	float3 LocalPosition = WorldPosition - SphereCapturePositionAndRadius.xyz;
	float LocalPositionSqr = dot(LocalPosition, LocalPosition);


	float3 QuadraticCoef;
	QuadraticCoef.x = 1;
	QuadraticCoef.y = dot(ReflectionVector, LocalPosition);
	QuadraticCoef.z = LocalPositionSqr - SphereRadiusSquared;

	float Determinant = QuadraticCoef.y * QuadraticCoef.y - QuadraticCoef.z;


	[flatten]
	if (Determinant >= 0)
	{
		float FarIntersection = sqrt(Determinant) - QuadraticCoef.y;

		float3 LocalIntersectionPosition = LocalPosition + FarIntersection * ReflectionVector;
		ProjectedCaptureVector = LocalIntersectionPosition - LocalCaptureOffset;



		float x = saturate( 2.5 * NormalizedDistanceToCapture - 1.5 );
		DistanceAlpha = 1 - x*x*(3 - 2*x);
	}
	return ProjectedCaptureVector;
}

float ComputeMixingWeight(float IndirectIrradiance, float AverageBrightness, float Roughness)
{

	float MixingAlpha = smoothstep(0, 1, saturate(Roughness * View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.x + View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.y));





	float MixingWeight = IndirectIrradiance / max(AverageBrightness, .0001f);

	MixingWeight = min(MixingWeight, View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight.z);

	return lerp(1.0f, MixingWeight, MixingAlpha);
}
#line 76 "/Engine/Private/BasePassPixelShader.usf"
#line 96 "/Engine/Private/BasePassPixelShader.usf"
float NormalCurvatureToRoughness(float3 WorldNormal)
{
    float3 dNdx = ddx(WorldNormal);
    float3 dNdy = ddy(WorldNormal);
    float x = dot(dNdx, dNdx);
    float y = dot(dNdy, dNdy);
    float CurvatureApprox = pow(max(x, y), View_NormalCurvatureToRoughnessScaleBias.z);
	return saturate(CurvatureApprox * View_NormalCurvatureToRoughnessScaleBias.x + View_NormalCurvatureToRoughnessScaleBias.y);
}
#line 110 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "ShadingModelsMaterial.ush"
#line 12 "/Engine/Private/ShadingModelsMaterial.ush"
void SetGBufferForShadingModel(
	in out FGBufferData GBuffer,
	in out FMaterialPixelParameters MaterialParameters,
	const float Opacity,
	const  float3  BaseColor,
	const  float  Metallic,
	const  float  Specular,
	const float Roughness,
	const float Anisotropy,
	const float3 SubsurfaceColor,
	const float SubsurfaceProfile,
	const float Dither,
	const uint ShadingModel)
{
	GBuffer.WorldNormal = MaterialParameters.WorldNormal;
	GBuffer.WorldTangent = MaterialParameters.WorldTangent;
	GBuffer.BaseColor = BaseColor;
	GBuffer.Metallic = Metallic;
	GBuffer.Specular = Specular;
	GBuffer.Roughness = Roughness;
	GBuffer.Anisotropy = Anisotropy;
	GBuffer.ShadingModelID = ShadingModel;




	if (false)
	{
	}
#line 56 "/Engine/Private/ShadingModelsMaterial.ush"
	else if (ShadingModel ==  5 )
	{


		if (Opacity >  0.10 )

		{
			GBuffer.CustomData.rgb = EncodeSubsurfaceProfile(SubsurfaceProfile);
			GBuffer.CustomData.a = Opacity;


			uint SubsurfaceProfileUInt = uint(SubsurfaceProfile * 255.0f + 0.5f);
			float MaterialRoughnessToAverage = GetSubsurfaceProfileTexture( ( ( ( ( ( 0 +1) +1) +1) +1) +1) , SubsurfaceProfileUInt).w *  2.0f ;



			MaterialRoughnessToAverage = lerp(1.0f, MaterialRoughnessToAverage, saturate((Opacity -  0.10 ) * 10.0f));

			GBuffer.Roughness = saturate(GBuffer.Roughness * MaterialRoughnessToAverage);
		}

		else
		{
			GBuffer.ShadingModelID =  1 ;
			GBuffer.CustomData = 0;
		}

	}
#line 194 "/Engine/Private/ShadingModelsMaterial.ush"
}
#line 111 "/Engine/Private/BasePassPixelShader.usf"
#line 153 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "ThinTranslucentCommon.ush"
#line 154 "/Engine/Private/BasePassPixelShader.usf"
#line 156 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "ForwardLightingCommon.ush"
#line 10 "/Engine/Private/ForwardLightingCommon.ush"
#line 1 "DeferredLightingCommon.ush"
#line 10 "/Engine/Private/DeferredLightingCommon.ush"
#line 1 "DynamicLightingCommon.ush"
#line 9 "/Engine/Private/DynamicLightingCommon.ush"
float3 GetDeferredLightTranslatedWorldPosition()
{
	return DeferredLightUniforms_TranslatedWorldPosition;
}
#line 18 "/Engine/Private/DynamicLightingCommon.ush"
float RadialAttenuationMask(float3 WorldLightVector)
{
	float NormalizeDistanceSquared = dot(WorldLightVector, WorldLightVector);
	return 1.0f - saturate(NormalizeDistanceSquared);
}
float RadialAttenuation(float3 WorldLightVector,  float  FalloffExponent)
{

	return pow(RadialAttenuationMask(WorldLightVector), FalloffExponent);
#line 48 "/Engine/Private/DynamicLightingCommon.ush"
}
#line 56 "/Engine/Private/DynamicLightingCommon.ush"
float SpotAttenuationMask(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	return saturate((dot(L, -SpotDirection) - SpotAngles.x) * SpotAngles.y);
}
float SpotAttenuation(float3 L, float3 SpotDirection, float2 SpotAngles)
{
	float ConeAngleFalloff = Square(SpotAttenuationMask(L, SpotDirection, SpotAngles));
	return ConeAngleFalloff;
}


float CalcLightAttenuation(float3 TranslatedWorldPosition, out float3 WorldLightVector)
{
	WorldLightVector = DeferredLightUniforms_Direction;
	float DistanceAttenuation = 1;
#line 89 "/Engine/Private/DynamicLightingCommon.ush"
	float SpotFalloff = 1;
#line 94 "/Engine/Private/DynamicLightingCommon.ush"
	return SpotFalloff * DistanceAttenuation;
}

float3 GetNormalizedLightVector(float3 TranslatedWorldPosition)
{

	float3 Ret = DeferredLightUniforms_Direction;
#line 106 "/Engine/Private/DynamicLightingCommon.ush"
	return Ret;
}

float GetLightInfluenceMask(float3 TranslatedWorldPosition)
{
	float LightMask = 1;

	if (DeferredLightUniforms_InvRadius > 0)
	{
		float3 ToLight = GetDeferredLightTranslatedWorldPosition() - TranslatedWorldPosition;
		float DistanceSqr = dot(ToLight, ToLight);
		float3 L = ToLight * rsqrt(DistanceSqr);

		if (DeferredLightUniforms_FalloffExponent == 0)
		{
			LightMask = saturate(1 - Square(DistanceSqr * Square(DeferredLightUniforms_InvRadius)));

		}
		else
		{
			LightMask = RadialAttenuationMask(ToLight * DeferredLightUniforms_InvRadius);
		}

		if (DeferredLightUniforms_SpotAngles.x > -2.0f)
		{
			LightMask *= SpotAttenuationMask(L, -DeferredLightUniforms_Direction, DeferredLightUniforms_SpotAngles);
		}
	}

	return LightMask > 0.0f ? 1.0f : 0.0f;
}
#line 11 "/Engine/Private/DeferredLightingCommon.ush"
#line 1 "IESLightProfilesCommon.ush"
#line 8 "/Engine/Private/IESLightProfilesCommon.ush"
Texture2D IESTexture;
SamplerState IESTextureSampler;


float ComputeLightProfileMultiplier(float3 WorldPosition, float3 LightPosition, float3 LightDirection, float3 LightTangent)
{
#line 35 "/Engine/Private/IESLightProfilesCommon.ush"
	return 1.0f;

}
#line 12 "/Engine/Private/DeferredLightingCommon.ush"
#line 1 "CapsuleLightIntegrate.ush"
#line 10 "/Engine/Private/CapsuleLightIntegrate.ush"
#line 1 "CapsuleLightSampling.ush"
#line 7 "/Engine/Private/CapsuleLightSampling.ush"
float SqrtOneMinusX(float x)
{
	return x < 0.01 ? 1 - x * (0.5 + x * 0.125) : sqrt(1 - x);
}



struct FCapsuleSphericalBounds
{
	FSphericalRect SphericalRect;
	float3 ConeAxis;
	float ConeSinThetaMax2;
	float ConeSolidAngle;
};


float GetCapsuleBoundsSolidAngle(FCapsuleSphericalBounds Bounds)
{
	return min(Bounds.SphericalRect.SolidAngle, Bounds.ConeSolidAngle);
}


float4 SampleCapsuleBounds(FCapsuleSphericalBounds Bounds, float2 E)
{
	if (Bounds.ConeSolidAngle < Bounds.SphericalRect.SolidAngle)
	{
		return float4(TangentToWorld(UniformSampleConeRobust(E, Bounds.ConeSinThetaMax2).xyz, Bounds.ConeAxis), Bounds.ConeSolidAngle);
	}
	else
	{
		return float4(normalize(UniformSampleSphericalRect(E, Bounds.SphericalRect)), Bounds.SphericalRect.SolidAngle);
	}
}


FCapsuleSphericalBounds CapsuleGetSphericalBounds(float3 Origin, float3 Axis, float Radius, float Length)
{
	float h = dot(Axis, Origin);
	float3 ClosestPointOnAxis = Origin - Axis * h;

	float DistanceToAxisSqr = dot(ClosestPointOnAxis, ClosestPointOnAxis);
	float RadiusSqr = Pow2(Radius);

	if (DistanceToAxisSqr <= RadiusSqr)
	{

		float3 CapCenter = Origin - Axis * Length * 0.5 * sign(h);
		float LightDistanceSquared = dot(CapCenter, CapCenter);
		float SinThetaMax2 = saturate(RadiusSqr / LightDistanceSquared);

		FCapsuleSphericalBounds Result;
		Result.SphericalRect = (FSphericalRect)0;
		Result.SphericalRect.SolidAngle =  (asfloat(0x7F800000)) ;
		Result.ConeAxis = normalize(CapCenter);
		Result.ConeSinThetaMax2 = SinThetaMax2;
		Result.ConeSolidAngle = UniformConeSolidAngle(SinThetaMax2);
		return Result;
	}


	FRect Rect;
	Rect.Origin = Origin;
	Rect.Axis[1] = Axis;
	Rect.Axis[2] = normalize(-ClosestPointOnAxis);
	Rect.Axis[0] = cross(Rect.Axis[1], Rect.Axis[2]);

	float SinCylinderAngle = Radius * rsqrt(DistanceToAxisSqr);

	float RectRadius = Radius * rsqrt(1 - Pow2(SinCylinderAngle));

	float Extension[2];
	for (int i = 0; i < 2; i++)
	{
		float hi = Length * (i > 0 ? 0.5 : -0.5);
		float3 PointPos = Origin + Axis * hi;

		float InverseDist = rsqrt(dot(PointPos, PointPos));

		float SinSphereAngle = saturate(Radius * InverseDist);
		float CosSphereAngle = SqrtOneMinusX(Pow2(SinSphereAngle));

		float CosAxisAngle = -dot(Axis, PointPos) * InverseDist;
		CosAxisAngle = sign(CosAxisAngle * hi) * saturate(abs(CosAxisAngle));
		float SinAxisAngle = SqrtOneMinusX(Pow2(CosAxisAngle));

		float CosExtension = SinAxisAngle * CosSphereAngle + CosAxisAngle * SinSphereAngle;
		Extension[i] = Radius / CosExtension;
	}

	float Translate = 0.5 * (Extension[1] - Extension[0]);
	float Extend = 0.5 * (Extension[0] + Extension[1]);

	Rect.Origin += Translate * Rect.Axis[1];
	Rect.Extent = float2(RectRadius, 0.5 * Length + Extend);


	float3 R0 = Rect.Origin - Rect.Axis[1] * Rect.Extent.y;
	float3 R1 = Rect.Origin + Rect.Axis[1] * Rect.Extent.y;
	float InvDistR0 = rsqrt(dot(R0, R0));
	float InvDistR1 = rsqrt(dot(R1, R1));

	FCapsuleSphericalBounds Result;
	Result.SphericalRect = BuildSphericalRect(Rect);
	Result.ConeAxis = normalize(lerp(R0, R1, saturate(InvDistR1 / (InvDistR0 + InvDistR1))));
	Result.ConeSinThetaMax2 = saturate(0.5 - 0.5 * dot(R0, R1) * InvDistR0 * InvDistR1);
	Result.ConeSolidAngle = UniformConeSolidAngle(Result.ConeSinThetaMax2);
	return Result;
}




float CapsuleIntersect(float3 Rd, float3 Center, float3 Axis, float Radius2, float Length)
{
	float3 ba = Axis;
	float3 oa = -Center;
	float bard = dot(ba, Rd);
	float baoa = dot(ba, oa);
	float rdoa = dot(Rd, oa);
	float oaoa = dot(oa, oa);
	float a = 1 - bard * bard;
	float b = rdoa - baoa * bard;
	float c = oaoa - baoa * baoa - Radius2;
	float h = b * b - a * c;
	if (h >= 0.0)
	{
		float t = (-b - sqrt(h)) / a;
		float y = baoa + t * bard;

		if (abs(y) < 0.5 * Length)
		{
			return t;
		}


		float3 oc = oa - (sign(y) * 0.5 * Length) * ba;
		b = dot(Rd, oc);
		h = Radius2 - length2(oc - b * Rd);
		if (h > 0.0)
		{
			return -b - sqrt(h);
		}
	}
	return -1.0;
}



float CapsuleTest(float3 Rd, float3 Center, float3 Axis, float Radius2, float Length)
{

	float B = dot(Rd, Axis);
	float t = clamp(dot(Center, B * Rd - Axis) / (1 - B * B), -0.5 * Length, 0.5 * Length);
	float3 ToSphere = Center + t * Axis;
	float3 C = cross(Rd, ToSphere);
	return dot(C, C) <= Radius2 ? length(ToSphere) : -1.0;
}
#line 11 "/Engine/Private/CapsuleLightIntegrate.ush"


Texture2D DummyRectLightTextureForCapsuleCompilerWarning;


float IntegrateLight( FCapsuleLight Capsule, bool bInverseSquared )
{
	float Falloff;

	[branch]
	if( Capsule.Length > 0 )
	{
		float NoL;
		float LineCosSubtended = 1;
		LineIrradiance( 0, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float3 ToLight = Capsule.LightPos[0];
		float DistSqr = dot( ToLight, ToLight );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );
	}

	Falloff = bInverseSquared ? Falloff : 1;

	return Falloff;
}

FAreaLightIntegrateContext CreateCapsuleIntegrateContext(float Roughness,  float3  N,  float3  V, FCapsuleLight Capsule, bool bInverseSquared )
{
	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();

	float NoL;
	float Falloff;
	float LineCosSubtended = 1;







	[branch]
	if( Capsule.Length > 0 )
	{
		LineIrradiance( N, Capsule.LightPos[0], Capsule.LightPos[1], Capsule.DistBiasSqr, LineCosSubtended, Falloff, NoL );
	}
	else
	{
		float DistSqr = dot( Capsule.LightPos[0], Capsule.LightPos[0] );
		Falloff = rcp( DistSqr + Capsule.DistBiasSqr );

		float3 L = Capsule.LightPos[0] * rsqrt( DistSqr );
		NoL = dot( N, L );
	}

	if( Capsule.Radius > 0 )
	{

		float SinAlphaSqr = saturate( Pow2( Capsule.Radius ) * Falloff );
		NoL = SphereHorizonCosWrap( NoL, SinAlphaSqr );
	}

	NoL = saturate( NoL );
	Falloff = bInverseSquared ? Falloff : 1;

	float3 ToLight = Capsule.LightPos[0];
	if( Capsule.Length > 0 )
	{
		float3 R = reflect( -V, N );
#line 90 "/Engine/Private/CapsuleLightIntegrate.ush"
		ToLight = ClosestPointLineToRay( Capsule.LightPos[0], Capsule.LightPos[1], Capsule.Length, R );
	}

	float DistSqr = dot( ToLight, ToLight );
	float InvDist = rsqrt( DistSqr );
	float3 L = ToLight * InvDist;

	Roughness = max( Roughness, View_MinRoughness );
	float a = Pow2( Roughness );



	const float SizeFadesOutDiffuseMicroRefl = 20.0;

	Out.AreaLight.SphereSinAlpha = saturate( Capsule.Radius * InvDist * (1 - a) );
	Out.AreaLight.SphereSinAlphaSoft = saturate( Capsule.SoftRadius * InvDist );
	Out.AreaLight.LineCosSubtended = LineCosSubtended;
	Out.AreaLight.FalloffColor = 1;
	Out.AreaLight.Rect = (FRect)0;
	Out.AreaLight.Texture = InitRectTexture(DummyRectLightTextureForCapsuleCompilerWarning);
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, false);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, saturate(1.0f - max(Capsule.Length, Capsule.Radius) / SizeFadesOutDiffuseMicroRefl));
	Out.NoL = NoL;
	Out.Falloff = Falloff;
	Out.L = L;
	return Out;
}


FDirectLighting IntegrateBxDF( FGBufferData GBuffer,  float3  N,  float3  V, FCapsuleLight Capsule, FShadowTerms Shadow, bool bInverseSquared )
{
	GBuffer.Roughness = max( GBuffer.Roughness, View_MinRoughness );
	FAreaLightIntegrateContext Context = CreateCapsuleIntegrateContext(GBuffer.Roughness, N, V, Capsule, bInverseSquared);
	return IntegrateBxDF( GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow );
}

FDirectLighting IntegrateBxDF( FGBufferData GBuffer,  float3  N,  float3  V, FCapsuleLight Capsule, FShadowTerms Shadow, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	Capsule.Radius = max( 1, Capsule.Radius );

	const float SphereArea = (4*PI) * Pow2( Capsule.Radius );
	const float CylinderArea = (2*PI) * Capsule.Radius * Capsule.Length;
	const float SurfaceArea = SphereArea + CylinderArea;
	const float SurfaceColor = 4.0 / SurfaceArea;

	float3 ToLight = 0.5 * ( Capsule.LightPos[0] + Capsule.LightPos[1] );
	float3 CapsuleAxis = normalize( Capsule.LightPos[1] - Capsule.LightPos[0] );

	float DistanceSqr = dot( ToLight, ToLight );
	float3 ConeAxis = ToLight * rsqrt( DistanceSqr );
	float SineConeSqr = saturate(Pow2(Capsule.Radius) / DistanceSqr);

	FCapsuleSphericalBounds CapsuleBounds = CapsuleGetSphericalBounds(ToLight, CapsuleAxis, Capsule.Radius, Capsule.Length);

	const uint NumSets = 3;
	const uint NumSamples[ NumSets ] =
	{
		0,
		16,
		16,
	};

	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );

	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;



			float3 L, H;
			if( Set == 0 )
			{
				L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
				H = normalize(V + L);
			}
			else if( Set == 1 )
			{
				H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
				L = 2 * dot( V, H ) * H - V;
			}
			else
			{
#line 231 "/Engine/Private/CapsuleLightIntegrate.ush"
				if( Capsule.Length > 0 )
				{
					float3 ToArea = SampleCapsuleBounds(CapsuleBounds, E).xyz;
					L = normalize( ToArea );
					H = normalize( V + L );
				}
				else
				{
					L = TangentToWorld( UniformSampleConeRobust( E, SineConeSqr).xyz, ConeAxis );
					H = normalize(V + L);
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{
				{
					if (CapsuleTest(L, ToLight, CapsuleAxis, Pow2(Capsule.Radius), Capsule.Length) > 0)
					{

						continue;
					}
				}

				float PDF[] =
				{
					NoL / PI,
					D_GGX(Pow4(GBuffer.Roughness), NoH) * NoH / (4 * VoH),
					1.0 / GetCapsuleBoundsSolidAngle(CapsuleBounds)
				};

				if( Capsule.Length == 0 )
				{
					PDF[2] = 1.0 / UniformConeSolidAngle(SineConeSqr);
				}


				float InvWeight = 0;
				[unroll]  for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];

				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse += SurfaceColor * Weight * LightingSample.Diffuse;
				Lighting.Specular += SurfaceColor * Weight * LightingSample.Specular;
				Lighting.Transmission += SurfaceColor * Weight * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}
#line 13 "/Engine/Private/DeferredLightingCommon.ush"
#line 1 "RectLightIntegrate.ush"










float3 ClampToRect( float3 L, FRect Rect )
{





	float3 PointOnPlane = L * ( dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L ) );


	float2 PointInRect;
	PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
	PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );


	PointInRect = clamp( PointInRect, -Rect.Extent, Rect.Extent );

	float3 ToRect = Rect.Origin;
	ToRect += PointInRect.x * Rect.Axis[0];
	ToRect += PointInRect.y * Rect.Axis[1];

	return normalize( ToRect );
}

bool RayHitRect( float3 L, FRect Rect )
{

	float t = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
	float3 PointOnPlane = L * t;

	bool InExtentX = abs( dot( Rect.Axis[0], PointOnPlane - Rect.Origin ) ) <= Rect.Extent.x;
	bool InExtentY = abs( dot( Rect.Axis[1], PointOnPlane - Rect.Origin ) ) <= Rect.Extent.y;

	return t >= 0 && InExtentX && InExtentY;
}

float IntegrateLight( FRect Rect, FRectTexture SourceTexture )
{

	if (Rect.Extent.x == 0 || Rect.Extent.y == 0) return 0;

	float NoL;
	float Falloff;




	float3 L = RectIrradianceLambert( 0, Rect, Falloff, NoL );
#line 67 "/Engine/Private/RectLightIntegrate.ush"
	float3 FalloffColor = SampleSourceTexture( L, Rect, SourceTexture);

	return Falloff;
}

FAreaLightIntegrateContext CreateRectIntegrateContext( float Roughness,  float3  N,  float3  V, FRect Rect, FRectTexture SourceTexture )
{
	float NoL = 0;
	float Falloff = 0;

	FAreaLightIntegrateContext Out = InitAreaLightIntegrateContext();




	float3 L = RectIrradianceLambert( N, Rect, Falloff, NoL );
#line 91 "/Engine/Private/RectLightIntegrate.ush"
	float3 FalloffColor = SampleSourceTexture( L, Rect, SourceTexture );
#line 241 "/Engine/Private/RectLightIntegrate.ush"
	Out.AreaLight.SphereSinAlpha = 0;
	Out.AreaLight.SphereSinAlphaSoft = 0;
	Out.AreaLight.LineCosSubtended = 1;
	Out.AreaLight.FalloffColor = FalloffColor;
	Out.AreaLight.Rect = Rect;
	Out.AreaLight.Texture = SourceTexture;
	Out.AreaLight.IsRectAndDiffuseMicroReflWeight = 0;
	SetIsRectLight(Out.AreaLight, true);
	SetAreaLightDiffuseMicroReflWeight(Out.AreaLight, 0.0);
	Out.L = L;
	Out.NoL = NoL;
	Out.Falloff = Falloff;

	return Out;
}

FDirectLighting IntegrateBxDF(FGBufferData GBuffer,  float3  N,  float3  V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture)
{

	FDirectLighting Out = (FDirectLighting)0;
	if (IsRectVisible(Rect))
	{
		FAreaLightIntegrateContext Context = CreateRectIntegrateContext(GBuffer.Roughness, N, V, Rect, SourceTexture);
#line 267 "/Engine/Private/RectLightIntegrate.ush"
		Out = IntegrateBxDF(GBuffer, N, V, Context.L, Context.Falloff, Context.NoL, Context.AreaLight, Shadow);
	}
	return Out;
}

FDirectLighting IntegrateBxDF( FGBufferData GBuffer,  float3  N,  float3  V, FRect Rect, FShadowTerms Shadow, FRectTexture SourceTexture, uint2 SVPos )
{
	FDirectLighting Lighting = (FDirectLighting)0;

	const float SurfaceArea = 4 * Rect.Extent.x * Rect.Extent.y;
	const float SurfaceColor = 2.0 / SurfaceArea;


	if( dot( Rect.Axis[2], Rect.Origin ) < 0 )
		return Lighting;


	if (!IsRectVisible(Rect))
		return Lighting;

	FSphericalRect SphericalRect = BuildSphericalRect( Rect );

	const uint NumSets = 4;
	const uint NumSamples[ NumSets ] =
	{
		0,
		16,
		0,
		16,
	};

	uint2 SobolBase = SobolPixel( SVPos );
	uint2 SobolFrame = SobolIndex( SobolBase, View_StateFrameIndexMod8, 3 );

	[unroll]
	for( uint Set = 0; Set < NumSets; Set++ )
	{
		[loop]
		for( uint i = 0; i < NumSamples[ Set ]; i++ )
		{
			uint2 Random = Rand3DPCG16( uint3( SVPos.xy, View_Random ^ Set ) ).xy;

			float2 E = float2( SobolIndex( SobolFrame, i << 3 ) ) / 0x10000;



			float3 L, H;
			switch( Set )
			{
				case 0:
				{
					L = TangentToWorld( CosineSampleHemisphere( E ).xyz, N );
					H = normalize( V + L );
					break;
				}
				case 1:
				{
					H = TangentToWorld( ImportanceSampleGGX( E, Pow4(GBuffer.Roughness) ).xyz, N );
					L = 2 * dot( V, H ) * H - V;
					break;
				}
				case 2:
				{
					float3 ToArea = Rect.Origin;
					ToArea += (E.x * 2 - 1) * Rect.Axis[0] * Rect.Extent.x;
					ToArea += (E.y * 2 - 1) * Rect.Axis[1] * Rect.Extent.y;
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
				case 3:
				{
					float3 ToArea = UniformSampleSphericalRect( E, SphericalRect );
					L = normalize( ToArea );
					H = normalize( V + L );
					break;
				}
			}

			float NoL = saturate( dot(N, L) );
			float NoH = saturate( dot(N, H) );
			float VoH = saturate( dot(V, H) );

			if( NoL > 0 && VoH > 0 )
			{

				float t = dot( Rect.Axis[2], Rect.Origin ) / dot( Rect.Axis[2], L );
				float3 PointOnPlane = L * t;

				float2 PointInRect;
				PointInRect.x = dot( Rect.Axis[0], PointOnPlane - Rect.Origin );
				PointInRect.y = dot( Rect.Axis[1], PointOnPlane - Rect.Origin );

				float2 RectUV = PointInRect / Rect.Extent * float2( 0.5, -0.5 ) + 0.5;
				float3 LightColor = SampleRectTexture(SourceTexture, RectUV, 0, true);

				if( Set == 0 || Set == 1 )
				{
					bool InExtentX = abs( PointInRect.x ) <= Rect.Extent.x;
					bool InExtentY = abs( PointInRect.y ) <= Rect.Extent.y;

					[branch]
					if( t < 0 || !InExtentX || !InExtentY )
					{

						continue;
					}
				}

				float PDF[] =
				{
					NoL * (1 / PI),
					D_GGX( Pow4(GBuffer.Roughness), NoH ) * NoH / (4 * VoH),
					dot( PointOnPlane, PointOnPlane ) / ( SurfaceArea * abs( dot( L, Rect.Axis[2] ) ) ),
					1.0 / SphericalRect.SolidAngle,
				};


				float InvWeight = 0;
				[unroll]  for( uint j = 0; j < NumSets; j++ )
				{
					InvWeight += Square( PDF[j] * NumSamples[j] );
				}
				float Weight = rcp( InvWeight ) * PDF[Set] * NumSamples[Set];

				FDirectLighting LightingSample = EvaluateBxDF( GBuffer, N, V, L, NoL, Shadow );

				Lighting.Diffuse += ( LightColor * Weight ) * LightingSample.Diffuse;
				Lighting.Specular += ( LightColor * Weight ) * LightingSample.Specular;
				Lighting.Transmission += ( LightColor * Weight ) * LightingSample.Transmission;
			}
		}
	}

	return Lighting;
}
#line 14 "/Engine/Private/DeferredLightingCommon.ush"
#line 29 "/Engine/Private/DeferredLightingCommon.ush"
struct FDeferredLightData
{
	float3 TranslatedWorldPosition;
	float InvRadius;
	float3 Color;
	float FalloffExponent;
	float3 Direction;
	float3 Tangent;
    float SoftSourceRadius;
	float2 SpotAngles;
	float SourceRadius;
	float SourceLength;
	float SpecularScale;
	float ContactShadowLength;

	float ContactShadowNonShadowCastingIntensity;
	float2 DistanceFadeMAD;
	float4 ShadowMapChannelMask;

	bool ContactShadowLengthInWS;

	bool bInverseSquared;

	bool bRadialLight;

	bool bSpotLight;
	bool bRectLight;

	uint ShadowedBits;
	float RectLightBarnCosAngle;
	float RectLightBarnLength;
	FHairTransmittanceData HairTransmittance;
};


struct FSimpleDeferredLightData
{
	float3 TranslatedWorldPosition;
	float InvRadius;
	float3 Color;
	float FalloffExponent;

	bool bInverseSquared;
};




float DistanceFromCameraFade(float SceneDepth, FDeferredLightData LightData)
{

	float Fade = saturate(SceneDepth * LightData.DistanceFadeMAD.x + LightData.DistanceFadeMAD.y);
	return Fade * Fade;
}



float ShadowRayCast(
	float3 RayOriginTranslatedWorld, float3 RayDirection, float RayLength,
	int NumSteps, float StepOffset, out bool bOutHitCastContactShadow )
{
	float4 RayStartClip = mul( float4( RayOriginTranslatedWorld, 1 ), View_TranslatedWorldToClip );
	float4 RayDirClip = mul( float4( RayDirection * RayLength, 0 ), View_TranslatedWorldToClip );
	float4 RayEndClip = RayStartClip + RayDirClip;

	float3 RayStartScreen = RayStartClip.xyz / RayStartClip.w;
	float3 RayEndScreen = RayEndClip.xyz / RayEndClip.w;

	float3 RayStepScreen = RayEndScreen - RayStartScreen;

	float3 RayStartUVz = float3( RayStartScreen.xy * View_ScreenPositionScaleBias.xy + View_ScreenPositionScaleBias.wz, RayStartScreen.z );
	float3 RayStepUVz = float3( RayStepScreen.xy * View_ScreenPositionScaleBias.xy, RayStepScreen.z );

	float4 RayDepthClip = RayStartClip + mul( float4( 0, 0, RayLength, 0 ), View_ViewToClip );
	float3 RayDepthScreen = RayDepthClip.xyz / RayDepthClip.w;

	const float Step = 1.0 / NumSteps;


	const float CompareTolerance = abs( RayDepthScreen.z - RayStartScreen.z ) * Step * 2;

	float SampleTime = StepOffset * Step + Step;

	float FirstHitTime = -1.0;

	const float StartDepth = SceneTexturesStruct_SceneDepthTexture.SampleLevel(  SceneTexturesStruct_PointClampSampler , RayStartUVz.xy, 0 ).r;

	[unroll]
	for( int i = 0; i < NumSteps; i++ )
	{
		float3 SampleUVz = RayStartUVz + RayStepUVz * SampleTime;
		float SampleDepth = SceneTexturesStruct_SceneDepthTexture.SampleLevel(  SceneTexturesStruct_PointClampSampler , SampleUVz.xy, 0 ).r;

		float DepthDiff = SampleUVz.z - SampleDepth;
		bool Hit = abs( DepthDiff + CompareTolerance ) < CompareTolerance;

		Hit = Hit && ( SampleDepth != StartDepth );

		FirstHitTime = (Hit && FirstHitTime < 0.0) ? SampleTime : FirstHitTime;

		SampleTime += Step;
	}

	float HitDistance = -1.0;
	bOutHitCastContactShadow = false;
	if ( FirstHitTime > 0.0 )
	{

		float3 SampleUVz = RayStartUVz + RayStepUVz * FirstHitTime;










		FGBufferData SampleGBuffer = GetGBufferData( SampleUVz.xy );
		bOutHitCastContactShadow = CastContactShadow(SampleGBuffer);



		float3 HitUVz = RayStartUVz + RayStepUVz * FirstHitTime;
		bool bValidUV = all( 0.0 < HitUVz.xy && HitUVz.xy < 1.0 );
		HitDistance = bValidUV ? ( FirstHitTime * RayLength ) : -1.0;
	}


	return HitDistance;
}
#line 166 "/Engine/Private/DeferredLightingCommon.ush"
void GetShadowTerms(float SceneDepth, float4 PrecomputedShadowFactors, uint ShadingModelID, float ContactShadowOpacity, FDeferredLightData LightData, float3 TranslatedWorldPosition, float3 L, float4 LightAttenuation, float Dither, inout FShadowTerms Shadow)
{
	float ContactShadowLength = 0.0f;
	const float ContactShadowLengthScreenScale = View_ClipToView[1][1] * SceneDepth;

	[branch]
	if (LightData.ShadowedBits)
	{





		float UsesStaticShadowMap = dot(LightData.ShadowMapChannelMask, float4(1, 1, 1, 1));
		float StaticShadowing = lerp(1, dot(PrecomputedShadowFactors, LightData.ShadowMapChannelMask), UsesStaticShadowMap);

		if (LightData.bRadialLight)
		{


			Shadow.SurfaceShadow = LightAttenuation.z * StaticShadowing;


			Shadow.TransmissionShadow = LightAttenuation.w * StaticShadowing;

			Shadow.TransmissionThickness = LightAttenuation.w;
		}
		else
		{




			float DynamicShadowFraction = DistanceFromCameraFade(SceneDepth, LightData);

			Shadow.SurfaceShadow = lerp(LightAttenuation.x, StaticShadowing, DynamicShadowFraction);

			Shadow.TransmissionShadow = min(lerp(LightAttenuation.y, StaticShadowing, DynamicShadowFraction), LightAttenuation.w);

			Shadow.SurfaceShadow *= LightAttenuation.z;
			Shadow.TransmissionShadow *= LightAttenuation.z;


			Shadow.TransmissionThickness = min(LightAttenuation.y, LightAttenuation.w);
		}

		[flatten]
		if (LightData.ShadowedBits > 1 && LightData.ContactShadowLength > 0)
		{
			ContactShadowLength = LightData.ContactShadowLength * (LightData.ContactShadowLengthInWS ? 1.0f : ContactShadowLengthScreenScale);
		}
	}
#line 276 "/Engine/Private/DeferredLightingCommon.ush"
	Shadow.HairTransmittance = LightData.HairTransmittance;
	Shadow.HairTransmittance.OpaqueVisibility = Shadow.SurfaceShadow;
}

float GetLocalLightAttenuation(
	float3 TranslatedWorldPosition,
	FDeferredLightData LightData,
	inout float3 ToLight,
	inout float3 L)
{
	ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;

	float DistanceSqr = dot( ToLight, ToLight );
	L = ToLight * rsqrt( DistanceSqr );

	float LightMask;
	if (LightData.bInverseSquared)
	{
		LightMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );
	}
	else
	{
		LightMask = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}

	if (LightData.bSpotLight)
	{
		LightMask *= SpotAttenuation(L, -LightData.Direction, LightData.SpotAngles);
	}

	if( LightData.bRectLight )
	{

		LightMask = dot( LightData.Direction, L ) < 0 ? 0 : LightMask;
	}

	return LightMask;
}



FRect GetRect(float3 ToLight, FDeferredLightData LightData)
{
	return GetRect(
		ToLight,
		LightData.Direction,
		LightData.Tangent,
		LightData.SourceRadius,
		LightData.SourceLength,
		LightData.RectLightBarnCosAngle,
		LightData.RectLightBarnLength,
		1 );
}

FCapsuleLight GetCapsule( float3 ToLight, FDeferredLightData LightData )
{
	FCapsuleLight Capsule;
	Capsule.Length = LightData.SourceLength;
	Capsule.Radius = LightData.SourceRadius;
	Capsule.SoftRadius = LightData.SoftSourceRadius;
	Capsule.DistBiasSqr = 1;
	Capsule.LightPos[0] = ToLight - 0.5 * Capsule.Length * LightData.Tangent;
	Capsule.LightPos[1] = ToLight + 0.5 * Capsule.Length * LightData.Tangent;
	return Capsule;
}


FDeferredLightingSplit GetDynamicLightingSplit(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, uint ShadingModelID,
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, FRectTexture SourceTexture,
	inout float SurfaceShadow)
{
	FLightAccumulator LightAccumulator = (FLightAccumulator)0;

	float3 V = -CameraVector;
	float3 N = GBuffer.WorldNormal;
	[branch]  if( GBuffer.ShadingModelID ==  4  &&  0 )
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 2) - (256.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		N = OctahedronToUnitVector(oct1);
	}

	float3 L = LightData.Direction;
	float3 ToLight = L;

	float LightMask = 1;
	if (LightData.bRadialLight)
	{
		LightMask = GetLocalLightAttenuation( TranslatedWorldPosition, LightData, ToLight, L );
	}

	LightAccumulator.EstimatedCost += 0.3f;

	[branch]
	if( LightMask > 0 )
	{
		FShadowTerms Shadow;
		Shadow.SurfaceShadow = AmbientOcclusion;
		Shadow.TransmissionShadow = 1;
		Shadow.TransmissionThickness = 1;
		Shadow.HairTransmittance.OpaqueVisibility = 1;
		const float ContactShadowOpacity = GBuffer.CustomData.a;
		GetShadowTerms(GBuffer.Depth, GBuffer.PrecomputedShadowFactors, GBuffer.ShadingModelID, ContactShadowOpacity,
			LightData, TranslatedWorldPosition, L, LightAttenuation, Dither, Shadow);
		SurfaceShadow = Shadow.SurfaceShadow;

		LightAccumulator.EstimatedCost += 0.3f;

		[branch]
		if( Shadow.SurfaceShadow + Shadow.TransmissionShadow > 0 )
		{
			const bool bNeedsSeparateSubsurfaceLightAccumulation = UseSubsurfaceProfile(GBuffer.ShadingModelID);
			float3 LightColor = LightData.Color;
#line 409 "/Engine/Private/DeferredLightingCommon.ush"
			FDirectLighting Lighting;

			if (LightData.bRectLight)
			{
				FRect Rect = GetRect( ToLight, LightData );




					Lighting = IntegrateBxDF( GBuffer, N, V, Rect, Shadow, SourceTexture);

			}
			else
			{
				FCapsuleLight Capsule = GetCapsule( ToLight, LightData );




					Lighting = IntegrateBxDF( GBuffer, N, V, Capsule, Shadow, LightData.bInverseSquared );

			}

			Lighting.Specular *= LightData.SpecularScale;

			LightAccumulator_AddSplit( LightAccumulator, Lighting.Diffuse, Lighting.Specular, Lighting.Diffuse, LightColor * LightMask * Shadow.SurfaceShadow, bNeedsSeparateSubsurfaceLightAccumulation );
			LightAccumulator_AddSplit( LightAccumulator, Lighting.Transmission, 0.0f, Lighting.Transmission, LightColor * LightMask * Shadow.TransmissionShadow, bNeedsSeparateSubsurfaceLightAccumulation );

			LightAccumulator.EstimatedCost += 0.4f;

		}
	}

	return LightAccumulator_GetResultSplit(LightAccumulator);
}

float4 GetDynamicLighting(
	float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBuffer, float AmbientOcclusion, uint ShadingModelID,
	FDeferredLightData LightData, float4 LightAttenuation, float Dither, uint2 SVPos, FRectTexture SourceTexture,
	inout float SurfaceShadow)
{
	FDeferredLightingSplit SplitLighting = GetDynamicLightingSplit(
		TranslatedWorldPosition, CameraVector, GBuffer, AmbientOcclusion, ShadingModelID,
		LightData, LightAttenuation, Dither, SVPos, SourceTexture,
		SurfaceShadow);

	return SplitLighting.SpecularLighting + SplitLighting.DiffuseLighting;
}
#line 463 "/Engine/Private/DeferredLightingCommon.ush"
float3 GetSimpleDynamicLighting(float3 TranslatedWorldPosition, float3 CameraVector, float3 WorldNormal, float AmbientOcclusion, float3 DiffuseColor, float3 SpecularColor, float Roughness, FSimpleDeferredLightData LightData)
{
	float3 V = -CameraVector;
	float3 N = WorldNormal;
	float3 ToLight = LightData.TranslatedWorldPosition - TranslatedWorldPosition;
	float DistanceAttenuation = 1;

	float DistanceSqr = dot( ToLight, ToLight );
	float3 L = ToLight * rsqrt( DistanceSqr );
	float NoL = saturate( dot( N, L ) );

	if (LightData.bInverseSquared)
	{

		DistanceAttenuation = 1 / ( DistanceSqr + 1 );

		float LightRadiusMask = Square( saturate( 1 - Square( DistanceSqr * Square(LightData.InvRadius) ) ) );
		DistanceAttenuation *= LightRadiusMask;
	}
	else
	{
		DistanceAttenuation = RadialAttenuation(ToLight * LightData.InvRadius, LightData.FalloffExponent);
	}

	float3 OutLighting = 0;

	[branch]
	if (DistanceAttenuation > 0)
	{
		const float3 LightColor = LightData.Color;


		float Attenuation = DistanceAttenuation * AmbientOcclusion;





			OutLighting += LightColor * (NoL * Attenuation) * SimpleShading(DiffuseColor, SpecularColor, max(Roughness, .04f), L, V, N);

	}

	return OutLighting;
}
#line 11 "/Engine/Private/ForwardLightingCommon.ush"
#line 1 "LightGridCommon.ush"
#line 22 "/Engine/Private/LightGridCommon.ush"
struct FLightGridData
{
	uint LightGridPixelSizeShift;
	float3 LightGridZParams;
	int3 CulledGridSize;
};

FLightGridData GetLightGridData(uint EyeIndex)
{
	FLightGridData Result;


	[branch]
	if (EyeIndex == 0)
	{


		Result.LightGridPixelSizeShift =  OpaqueBasePass_Shared_Forward_LightGridPixelSizeShift ;
		Result.LightGridZParams =  OpaqueBasePass_Shared_Forward_LightGridZParams ;
		Result.CulledGridSize =  OpaqueBasePass_Shared_Forward_CulledGridSize ;


	}
	else
	{
		Result.LightGridPixelSizeShift =  OpaqueBasePass_Shared_ForwardISR_LightGridPixelSizeShift ;
		Result.LightGridZParams =  OpaqueBasePass_Shared_ForwardISR_LightGridZParams ;
		Result.CulledGridSize =  OpaqueBasePass_Shared_ForwardISR_CulledGridSize ;
	}


	return Result;
}

uint3 ComputeLightGridCellCoordinate(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	uint ZSlice = (uint)(max(0, log2(SceneDepth * GridData.LightGridZParams.x + GridData.LightGridZParams.y) * GridData.LightGridZParams.z));
	ZSlice = min(ZSlice, (uint)(GridData.CulledGridSize.z - 1));
	return uint3(PixelPos >> GridData.LightGridPixelSizeShift, ZSlice);
}

uint ComputeLightGridCellIndex(uint3 GridCoordinate, uint EyeIndex)
{
	const FLightGridData GridData = GetLightGridData(EyeIndex);
	return (GridCoordinate.z * GridData.CulledGridSize.y + GridCoordinate.y) * GridData.CulledGridSize.x + GridCoordinate.x;
}

uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth, uint EyeIndex)
{
	return ComputeLightGridCellIndex(ComputeLightGridCellCoordinate(PixelPos, SceneDepth, EyeIndex), EyeIndex);
}

uint ComputeLightGridCellIndex(uint2 PixelPos, float SceneDepth)
{
	return ComputeLightGridCellIndex(PixelPos, SceneDepth, 0);
}
#line 88 "/Engine/Private/LightGridCommon.ush"
uint GetNumLocalLights(uint EyeIndex)
{

	return (EyeIndex == 0) ?  OpaqueBasePass_Shared_Forward_NumLocalLights  :  OpaqueBasePass_Shared_ForwardISR_NumLocalLights ;
#line 95 "/Engine/Private/LightGridCommon.ush"
}

struct FCulledLightsGridData
{
	uint NumLocalLights;
	uint DataStartIndex;
};

FCulledLightsGridData GetCulledLightsGrid(uint GridIndex, uint EyeIndex)
{
	FCulledLightsGridData Result;


	[branch]
	if (EyeIndex == 0)
	{


		Result.NumLocalLights = min( OpaqueBasePass_Shared_Forward_NumCulledLightsGrid [GridIndex *  2  + 0],  OpaqueBasePass_Shared_Forward_NumLocalLights );
		Result.DataStartIndex =  OpaqueBasePass_Shared_Forward_NumCulledLightsGrid [GridIndex *  2  + 1];


	}
	else
	{
		Result.NumLocalLights = min( OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid [GridIndex *  2  + 0],  OpaqueBasePass_Shared_ForwardISR_NumLocalLights );
		Result.DataStartIndex =  OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid [GridIndex *  2  + 1];
	}


	return Result;
}

struct FDirectionalLightData
{
	uint HasDirectionalLight;
	uint DirectionalLightShadowMapChannelMask;
	float2 DirectionalLightDistanceFadeMAD;
	float3 DirectionalLightColor;
	float3 DirectionalLightDirection;
};

FDirectionalLightData GetDirectionalLightData(uint EyeIndex)
{
	FDirectionalLightData Result;


	[branch]
	if (EyeIndex == 0)
	{


		Result.HasDirectionalLight =  OpaqueBasePass_Shared_Forward_HasDirectionalLight ;
		Result.DirectionalLightShadowMapChannelMask =  OpaqueBasePass_Shared_Forward_DirectionalLightShadowMapChannelMask ;
		Result.DirectionalLightDistanceFadeMAD =  OpaqueBasePass_Shared_Forward_DirectionalLightDistanceFadeMAD ;
		Result.DirectionalLightColor =  OpaqueBasePass_Shared_Forward_DirectionalLightColor ;
		Result.DirectionalLightDirection =  OpaqueBasePass_Shared_Forward_DirectionalLightDirection ;


	}
	else
	{
		Result.HasDirectionalLight =  OpaqueBasePass_Shared_ForwardISR_HasDirectionalLight ;
		Result.DirectionalLightShadowMapChannelMask =  OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowMapChannelMask ;
		Result.DirectionalLightDistanceFadeMAD =  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDistanceFadeMAD ;
		Result.DirectionalLightColor =  OpaqueBasePass_Shared_ForwardISR_DirectionalLightColor ;
		Result.DirectionalLightDirection =  OpaqueBasePass_Shared_ForwardISR_DirectionalLightDirection ;
	}


	return Result;
}

struct FLocalLightData
{
	float4 LightPositionAndInvRadius;
	float4 LightColorAndFalloffExponent;
	float4 SpotAnglesAndSourceRadiusPacked;
    float4 LightDirectionAndShadowMask;
    float4 LightTangentAndSoftSourceRadius;
	float4 RectBarnDoorAndVirtualShadowMapId;

	bool bClusteredDeferredSupported;

	bool bIsSimpleLight;

	int VirtualShadowMapId;

};

FLocalLightData GetLocalLightData(uint GridIndex, uint EyeIndex)
{
	FLocalLightData Result;


	[branch]
	if (EyeIndex == 0)
	{

		uint LocalLightIndex =  OpaqueBasePass_Shared_Forward_CulledLightDataGrid [GridIndex];
		uint LocalLightBaseIndex = LocalLightIndex *  6 ;
		Result.bClusteredDeferredSupported = LocalLightIndex <  OpaqueBasePass_Shared_Forward_ClusteredDeferredSupportedEndIndex ;
		Result.bIsSimpleLight = LocalLightIndex <  OpaqueBasePass_Shared_Forward_SimpleLightsEndIndex ;
		Result.LightPositionAndInvRadius =  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer [LocalLightBaseIndex + 0];
		Result.LightColorAndFalloffExponent =  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer [LocalLightBaseIndex + 1];
		Result.LightDirectionAndShadowMask =  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer [LocalLightBaseIndex + 2];
		Result.SpotAnglesAndSourceRadiusPacked =  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer [LocalLightBaseIndex + 3];
		Result.LightTangentAndSoftSourceRadius =  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer [LocalLightBaseIndex + 4];
		Result.RectBarnDoorAndVirtualShadowMapId =  OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer [LocalLightBaseIndex + 5];
		Result.VirtualShadowMapId = int(Result.RectBarnDoorAndVirtualShadowMapId.z);

	}
	else
	{
		uint LocalLightIndex =  OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid [GridIndex];
		uint LocalLightBaseIndex = LocalLightIndex *  6 ;
		Result.bClusteredDeferredSupported = LocalLightIndex <  OpaqueBasePass_Shared_ForwardISR_ClusteredDeferredSupportedEndIndex ;
		Result.bIsSimpleLight = LocalLightIndex <  OpaqueBasePass_Shared_ForwardISR_SimpleLightsEndIndex ;
		Result.LightPositionAndInvRadius =  OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer [LocalLightBaseIndex + 0];
		Result.LightColorAndFalloffExponent =  OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer [LocalLightBaseIndex + 1];
		Result.LightDirectionAndShadowMask =  OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer [LocalLightBaseIndex + 2];
		Result.SpotAnglesAndSourceRadiusPacked =  OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer [LocalLightBaseIndex + 3];
		Result.LightTangentAndSoftSourceRadius =  OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer [LocalLightBaseIndex + 4];
		Result.RectBarnDoorAndVirtualShadowMapId =  OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer [LocalLightBaseIndex + 5];
		Result.VirtualShadowMapId = int(Result.RectBarnDoorAndVirtualShadowMapId.z);
	}


	return Result;
}
#line 229 "/Engine/Private/LightGridCommon.ush"
float4 UnpackShadowMapChannelMask(uint ShadowMapChannelMaskPacked)
{
	return float4((ShadowMapChannelMaskPacked & 1) ? 1.0f : 0.0f, (ShadowMapChannelMaskPacked & 2) ? 1.0f : 0.0f, (ShadowMapChannelMaskPacked & 4) ? 1.0f : 0.0f, (ShadowMapChannelMaskPacked & 8) ? 1.0f : 0.0f);
}
#line 238 "/Engine/Private/LightGridCommon.ush"
uint4 InitializePackedShadowMask()
{
	return uint(0xffffffff).xxxx;
}

uint GetPackedShadowMaskMaxLightCount()
{
	return VirtualShadowMap_PackedShadowMaskMaxLightCount;
}

void PackShadowMask(inout uint4 InOutShadowMask, float InShadowFactor, uint InLightIndex)
{
	uint Value = ~uint(round(InShadowFactor * 15.0f)) & 15U;
	uint Dword = InLightIndex / 8;

	InOutShadowMask.x ^= (Dword == 0U) ? (Value << (InLightIndex ) * 4U) : 0U;
	InOutShadowMask.y ^= (Dword == 1U) ? (Value << (InLightIndex - 8U) * 4U) : 0U;
	InOutShadowMask.z ^= (Dword == 2U) ? (Value << (InLightIndex - 16U) * 4U) : 0U;
	InOutShadowMask.w ^= (Dword == 3U) ? (Value << (InLightIndex - 24U) * 4U) : 0U;


}

float UnpackShadowMask(uint4 InShadowMask, uint InLightIndex)
{
	uint Dword = InLightIndex / 8;
	return ((InShadowMask[Dword] >> (InLightIndex - Dword*8U) * 4U) & 15U) / 15.0f;

}


float UnpackShadowMask(uint4 InShadowMask, uint InLightIndex, float Dither)
{
	float ShadowFactor = UnpackShadowMask(InShadowMask, InLightIndex);
	if (ShadowFactor > 0.0f && ShadowFactor < 1.0f)
	{
		ShadowFactor = saturate(ShadowFactor + (Dither - 0.5f) * (1.0f / 16.0f));
	}
	return ShadowFactor;
}
#line 12 "/Engine/Private/ForwardLightingCommon.ush"
#line 14 "/Engine/Private/ForwardLightingCommon.ush"
#line 1 "ForwardShadowingCommon.ush"
#line 7 "/Engine/Private/ForwardShadowingCommon.ush"
#line 1 "ShadowFilteringCommon.ush"
#line 9 "/Engine/Private/ShadowFilteringCommon.ush"
#line 1 "PixelQuadMessagePassing.ush"
#line 15 "/Engine/Private/PixelQuadMessagePassing.ush"
struct FPQMPContext
{

	float2 PixelPos;


	float2 QuadVector;
};



FPQMPContext PQMPInit(float2 SvPosition)
{
	FPQMPContext PQMP;

	PQMP.PixelPos = floor(2.0 * frac(SvPosition * 0.5));
	uint2 ScreenPos = uint2(SvPosition);
	PQMP.QuadVector = float2( float(ScreenPos.x & 1) * 2.0 - 1.0, float(ScreenPos.y & 1) * 2.0 - 1.0);
#line 37 "/Engine/Private/PixelQuadMessagePassing.ush"
	return PQMP;
}



float PQMPAverage(FPQMPContext PQMP, float v)
{

	v = v + (0.5 - PQMP.PixelPos.x) * ddx_fine(v);
	return v + (0.5 - PQMP.PixelPos.y) * ddy_fine(v);
#line 50 "/Engine/Private/PixelQuadMessagePassing.ush"
}

float2 PQMPAverage(FPQMPContext PQMP, float2 v)
{

	v = v + (0.5 - PQMP.PixelPos.x) * ddx_fine(v);
	return v + (0.5 - PQMP.PixelPos.y) * ddy_fine(v);
#line 60 "/Engine/Private/PixelQuadMessagePassing.ush"
}



float PQMPReadX(FPQMPContext PQMP, float v)
{




		float dX = ddx_fine(v);
		return v - (dX * PQMP.QuadVector.x);
#line 76 "/Engine/Private/PixelQuadMessagePassing.ush"
}


float PQMPReadY(FPQMPContext PQMP, float v)
{




		float dY = ddy_fine(v);
		return v - (dY * PQMP.QuadVector.y);
#line 91 "/Engine/Private/PixelQuadMessagePassing.ush"
}

float2 PQMPReadX(FPQMPContext PQMP, float2 v)
{
	return float2( PQMPReadX(PQMP, v.x), PQMPReadX(PQMP, v.y));
}

float2 PQMPReadY(FPQMPContext PQMP, float2 v)
{
	return float2( PQMPReadY(PQMP, v.x), PQMPReadY(PQMP, v.y));
}

float3 PQMPReadX(FPQMPContext PQMP, float3 v)
{
	return float3( PQMPReadX(PQMP, v.x), PQMPReadX(PQMP, v.y), PQMPReadX(PQMP, v.z));
}

float3 PQMPReadY(FPQMPContext PQMP, float3 v)
{
	return float3( PQMPReadY(PQMP, v.x), PQMPReadY(PQMP, v.y), PQMPReadY(PQMP, v.z));
}
#line 10 "/Engine/Private/ShadowFilteringCommon.ush"


struct FPCFSamplerSettings
{
	Texture2D ShadowDepthTexture;
	SamplerState ShadowDepthTextureSampler;



	float4 ShadowBufferSize;


	float SceneDepth;

	float TransitionScale;


	bool bSubsurface;


	bool bTreatMaxDepthUnshadowed;


	float DensityMulConstant;


	float2 ProjectionDepthBiasParameters;
};





float PCF2x2(float2 Fraction, float3 Values0, float3 Values1, float3 Values2)
{
	float3 Results;

	Results.x = Values0.x * (1.0f - Fraction.x);
	Results.y = Values1.x * (1.0f - Fraction.x);
	Results.z = Values2.x * (1.0f - Fraction.x);
	Results.x += Values0.y;
	Results.y += Values1.y;
	Results.z += Values2.y;
	Results.x += Values0.z * Fraction.x;
	Results.y += Values1.z * Fraction.x;
	Results.z += Values2.z * Fraction.x;

	return saturate(0.25f * dot(Results,  float3 (1.0f - Fraction.y, 1.0f, Fraction.y)));
}






float PCF3x3(float2 Fraction, float4 Values0, float4 Values1, float4 Values2, float4 Values3)
{
	float4 Results;

	Results.x = Values0.x * (1.0f - Fraction.x);
	Results.y = Values1.x * (1.0f - Fraction.x);
	Results.z = Values2.x * (1.0f - Fraction.x);
	Results.w = Values3.x * (1.0f - Fraction.x);
	Results.x += Values0.y;
	Results.y += Values1.y;
	Results.z += Values2.y;
	Results.w += Values3.y;
	Results.x += Values0.z;
	Results.y += Values1.z;
	Results.z += Values2.z;
	Results.w += Values3.z;
	Results.x += Values0.w * Fraction.x;
	Results.y += Values1.w * Fraction.x;
	Results.z += Values2.w * Fraction.x;
	Results.w += Values3.w * Fraction.x;

	return saturate(dot(Results, float4(1.0f - Fraction.y, 1.0f, 1.0f, Fraction.y)) * (1.0f / 9.0f));
}








float PCF3x3gather(float2 Fraction, float4 Values0, float4 Values1, float4 Values2, float4 Values3)
{
	float4 Results;

	Results.x = Values0.w * (1.0 - Fraction.x);
	Results.y = Values0.x * (1.0 - Fraction.x);
	Results.z = Values2.w * (1.0 - Fraction.x);
	Results.w = Values2.x * (1.0 - Fraction.x);
	Results.x += Values0.z;
	Results.y += Values0.y;
	Results.z += Values2.z;
	Results.w += Values2.y;
	Results.x += Values1.w;
	Results.y += Values1.x;
	Results.z += Values3.w;
	Results.w += Values3.x;
	Results.x += Values1.z * Fraction.x;
	Results.y += Values1.y * Fraction.x;
	Results.z += Values3.z * Fraction.x;
	Results.w += Values3.y * Fraction.x;

	return dot( Results, float4( 1.0 - Fraction.y, 1.0, 1.0, Fraction.y) * ( 1.0 / 9.0) );
}


float2 HorizontalPCF5x2(float2 Fraction, float4 Values00, float4 Values20, float4 Values40)
{
	float Results0;
	float Results1;

	Results0 = Values00.w * (1.0 - Fraction.x);
	Results1 = Values00.x * (1.0 - Fraction.x);
	Results0 += Values00.z;
	Results1 += Values00.y;
	Results0 += Values20.w;
	Results1 += Values20.x;
	Results0 += Values20.z;
	Results1 += Values20.y;
	Results0 += Values40.w;
	Results1 += Values40.x;
	Results0 += Values40.z * Fraction.x;
	Results1 += Values40.y * Fraction.x;

	return float2(Results0, Results1);
}


float PCF1x1(float2 Fraction, float4 Values00)
{
	float2 HorizontalLerp00 = lerp(Values00.wx, Values00.zy, Fraction.xx);

	return lerp(HorizontalLerp00.x, HorizontalLerp00.y, Fraction.y);
}



float4 FastExp(float4 x)
{
	return exp2(1.442695f * x);
}

float3 FastExp(float3 x)
{
	return exp2(1.442695f * x);
}

float4 CalculateOcclusion(float4 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{



		float4 Thickness = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float4 Occlusion = saturate(FastExp(-Thickness * Settings.DensityMulConstant));

		return ShadowmapDepth > .99f ? 1 : Occlusion;
	}
	else
	{



		float TransitionScale = Settings.TransitionScale;



		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float4 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

float3 CalculateOcclusion(float3 ShadowmapDepth, FPCFSamplerSettings Settings)
{
	if (Settings.bSubsurface)
	{



		float3 Thickness = max(Settings.SceneDepth - ShadowmapDepth, 0);
		float3 Occlusion = saturate(FastExp(-Thickness * Settings.DensityMulConstant));

		return ShadowmapDepth > .99f ? 1 : Occlusion;
	}
	else
	{



		float TransitionScale = Settings.TransitionScale;



		float ConstantFactor = (Settings.SceneDepth * TransitionScale - 1);
		float3 ShadowFactor = saturate(ShadowmapDepth * TransitionScale - ConstantFactor);

		[flatten]
		if (Settings.bTreatMaxDepthUnshadowed)
		{
			ShadowFactor = saturate(ShadowFactor + (ShadowmapDepth > .99f));
		}

		return ShadowFactor;
	}
}

float3 FetchRowOfThree(float2 Sample00TexelCenter, float VerticalOffset, FPCFSamplerSettings Settings)
{
	float3 Values;
	Values.x = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(0, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.y = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(1, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.z = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(2, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	return CalculateOcclusion(Values, Settings);
}

float4 FetchRowOfFour(float2 Sample00TexelCenter, float VerticalOffset, FPCFSamplerSettings Settings)
{
	float4 Values;
	Values.x = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(0, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.y = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(1, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.z = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(2, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.w = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(3, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	return CalculateOcclusion(Values, Settings);
}

float3 FetchRowOfThreeAfterFour(float2 Sample00TexelCenter, float VerticalOffset, FPCFSamplerSettings Settings)
{
	float3 Values;
	Values.x = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(4, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.y = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(5, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	Values.z = Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, (Sample00TexelCenter + float2(6, VerticalOffset)) * Settings.ShadowBufferSize.zw, 0).r;
	return CalculateOcclusion(Values, Settings);
}

float Manual3x3PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{

	{
		float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;
		float2 Fraction = frac(TexelPos);
		float2 TexelCorner = floor(TexelPos);



		float2 SamplePos = (TexelCorner + 1.0f) * Settings.ShadowBufferSize.zw;
		float4 SampleValues0 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-1, -1)), Settings);
		float4 SampleValues1 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(1, -1)), Settings);
		float4 SampleValues2 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-1, 1)), Settings);
		float4 SampleValues3 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(1, 1)), Settings);
		return PCF3x3gather(Fraction, SampleValues0, SampleValues1, SampleValues2, SampleValues3);
	}
}

float Manual5x5PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{

	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;
	float2 Fraction = frac(TexelPos);


	float2 SamplePos = (floor(TexelPos) + 1.0f) * Settings.ShadowBufferSize.zw;

	float4 Values00 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-2, -2)), Settings);
	float4 Values20 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(0, -2)), Settings);
	float4 Values40 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(2, -2)), Settings);

	float2 Row0 = HorizontalPCF5x2(Fraction, Values00, Values20, Values40);
	float Results = Row0.x * (1.0f - Fraction.y) + Row0.y;

	float4 Values02 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-2, 0)), Settings);
	float4 Values22 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(0, 0)), Settings);
	float4 Values42 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(2, 0)), Settings);

	float2 Row1 = HorizontalPCF5x2(Fraction, Values02, Values22, Values42);
	Results += Row1.x + Row1.y;

	float4 Values04 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(-2, 2)), Settings);
	float4 Values24 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(0, 2)), Settings);
	float4 Values44 = CalculateOcclusion(Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, SamplePos, int2(2, 2)), Settings);

	float2 Row2 = HorizontalPCF5x2(Fraction, Values04, Values24, Values44);
	Results += Row2.x + Row2.y * Fraction.y;

	return 0.04f * Results;
}


float Manual2x2PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy;
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos) + 0.5f;

	float2 Sample00TexelCenter = TexelCenter - float2(1, 1);

	float3 SamplesValues0 = FetchRowOfThree(Sample00TexelCenter, 0, Settings);
	float3 SamplesValues1 = FetchRowOfThree(Sample00TexelCenter, 1, Settings);
	float3 SamplesValues2 = FetchRowOfThree(Sample00TexelCenter, 2, Settings);

	return PCF2x2(Fraction, SamplesValues0, SamplesValues1, SamplesValues2);
}


float Manuax2PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy;
	float2 Fraction = frac(TexelPos);
	float2 TexelCenter = floor(TexelPos) + 0.5f;

	float2 Sample00TexelCenter = TexelCenter - float2(1, 1);

	float3 SamplesValues0 = FetchRowOfThree(Sample00TexelCenter, 0, Settings);
	float3 SamplesValues1 = FetchRowOfThree(Sample00TexelCenter, 1, Settings);
	float3 SamplesValues2 = FetchRowOfThree(Sample00TexelCenter, 2, Settings);

	return PCF2x2(Fraction, SamplesValues0, SamplesValues1, SamplesValues2);
}

float ManualNoFiltering(float2 ShadowPosition, FPCFSamplerSettings Settings)
{

	return CalculateOcclusion(Texture2DSampleLevel(Settings.ShadowDepthTexture, Settings.ShadowDepthTextureSampler, ShadowPosition, 0).rrr, Settings).r;
}

float Manual1x1PCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{
	float2 TexelPos = ShadowPosition * Settings.ShadowBufferSize.xy - 0.5f;
	float2 Fraction = frac(TexelPos);


	float4 Samples;



	float2 QuadCenter = floor(TexelPos) + 1.0f;
	Samples = Settings.ShadowDepthTexture.Gather(Settings.ShadowDepthTextureSampler, QuadCenter * Settings.ShadowBufferSize.zw);

	float4 Values00 = CalculateOcclusion(Samples, Settings);
	return PCF1x1(Fraction, Values00);
}


float ManualPCF(float2 ShadowPosition, FPCFSamplerSettings Settings)
{








	return Manual5x5PCF(ShadowPosition, Settings);

}
#line 8 "/Engine/Private/ForwardShadowingCommon.ush"

float ComputeDirectionalLightStaticShadowing(float3 TranslatedWorldPosition)
{
	float ShadowFactor = 1;

	[branch]
	if ( OpaqueBasePass_Shared_Forward_DirectionalLightUseStaticShadowing  > 0)
	{

		float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPosition, 1),  OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToStaticShadow );
		float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;


		if (all(ShadowUVs >= 0 && ShadowUVs <= 1))
		{
#line 40 "/Engine/Private/ForwardShadowingCommon.ush"
				float ShadowDepth = Texture2DSampleLevel( OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap ,  OpaqueBasePass_Shared_Forward_StaticShadowmapSampler , ShadowUVs, 0).x;
				ShadowFactor = HomogeneousShadowPosition.z < ShadowDepth || ShadowDepth > .99f;

		}
	}

	return ShadowFactor;
}
#line 53 "/Engine/Private/ForwardShadowingCommon.ush"
uint GetForwardLightingCascadeIndex(float4 CascadeEndDepths, float SceneDepth)
{
	float4 Count = float4(SceneDepth.xxxx >= CascadeEndDepths);
	return uint(Count.x + Count.y + Count.z + Count.w);
}

float ComputeDirectionalLightDynamicShadowing(float3 TranslatedWorldPosition, float SceneDepth, inout bool bShadowingFromValidUVArea)
{
	float ShadowFactor = 1;
	bShadowingFromValidUVArea = false;

	const uint NumCascades =  OpaqueBasePass_Shared_Forward_NumDirectionalLightCascades ;
	if (NumCascades > 0)
	{
		uint CascadeIndex = GetForwardLightingCascadeIndex( OpaqueBasePass_Shared_Forward_CascadeEndDepths , SceneDepth);
		if (CascadeIndex < NumCascades)
		{

			float4 HomogeneousShadowPosition = mul(float4(TranslatedWorldPosition, 1),  OpaqueBasePass_Shared_Forward_DirectionalLightTranslatedWorldToShadowMatrix [CascadeIndex]);
			float2 ShadowUVs = HomogeneousShadowPosition.xy / HomogeneousShadowPosition.w;
			float4 ShadowmapMinMax =  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapMinMax [CascadeIndex];


			if (all(ShadowUVs >= ShadowmapMinMax.xy && ShadowUVs <= ShadowmapMinMax.zw))
			{

				FPCFSamplerSettings Settings;
				Settings.ShadowDepthTexture =  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas ;
				Settings.ShadowDepthTextureSampler =  OpaqueBasePass_Shared_Forward_ShadowmapSampler ;
				Settings.ShadowBufferSize =  OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlasBufferSize ;
				Settings.SceneDepth = 1 - HomogeneousShadowPosition.z;
				Settings.TransitionScale = 4000;
				Settings.bSubsurface = false;
				Settings.bTreatMaxDepthUnshadowed = false;
				Settings.DensityMulConstant = 0;
				Settings.ProjectionDepthBiasParameters = float2(0, 0);

				ShadowFactor = Manual1x1PCF(ShadowUVs, Settings);
#line 98 "/Engine/Private/ForwardShadowingCommon.ush"
				bShadowingFromValidUVArea = true;
			}
		}
	}

	return ShadowFactor;
}
#line 15 "/Engine/Private/ForwardLightingCommon.ush"
#line 38 "/Engine/Private/ForwardLightingCommon.ush"
float PrevSceneColorPreExposureInv;

void UpdateNearestSample(float Z, float2 UV, float FullResZ, inout float MinDist, inout float2 NearestUV)
{
    float DepthDelta = abs(Z - FullResZ);

	[flatten]
    if (DepthDelta < MinDist)
    {
        MinDist = DepthDelta;
        NearestUV = UV;
    }
}

float2 CalculateNearestResolvedDepthScreenUV(float2 ScreenUV, float SceneDepth)
{
	float2 EffectiveScreenUV = ScreenUV;

	if (View_NumSceneColorMSAASamples > 1)
	{
		int2 IntScreenUV = int2(trunc(ScreenUV * View_BufferSizeAndInvSize.xy));

		float DeferredShadowingDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV, 0)).r);
		float RelativeDepthThreshold = .01f;




		if (abs(DeferredShadowingDepth - SceneDepth) / SceneDepth > RelativeDepthThreshold)
		{
			float2 TexelSize = View_BufferSizeAndInvSize.zw;
			float MinDist = 1.e8f;

			float2 LeftUV = ScreenUV + float2(-TexelSize.x, 0);
			float LeftDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x - 1, IntScreenUV.y, 0)).r);
			UpdateNearestSample(LeftDepth, LeftUV, SceneDepth, MinDist, EffectiveScreenUV);

			float2 UpUV = ScreenUV + float2(0, TexelSize.y);
			float UpDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x, IntScreenUV.y + 1, 0)).r);
			UpdateNearestSample(UpDepth, UpUV, SceneDepth, MinDist, EffectiveScreenUV);

			float2 RightUV = ScreenUV + float2(TexelSize.x, 0);
			float RightDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x + 1, IntScreenUV.y, 0)).r);
			UpdateNearestSample(RightDepth, RightUV, SceneDepth, MinDist, EffectiveScreenUV);

			float2 BottomUV = ScreenUV + float2(0, -TexelSize.y);
			float BottomDepth = ConvertFromDeviceZ(OpaqueBasePass_ResolvedSceneDepthTexture.Load(int3(IntScreenUV.x, IntScreenUV.y - 1, 0)).r);
			UpdateNearestSample(BottomDepth, BottomUV, SceneDepth, MinDist, EffectiveScreenUV);
		}
	}

	return EffectiveScreenUV;
}

float4 GetForwardDynamicShadowFactors(float2 ScreenUV)
{
	int2 IntScreenUV = int2(trunc(ScreenUV * View_BufferSizeAndInvSize.xy));
	float4 Value = 1.0f;

	[branch]
	if (OpaqueBasePass_UseForwardScreenSpaceShadowMask)
	{
		Value = OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture.Load(int3(IntScreenUV, 0));
	}
	return DecodeLightAttenuation(Value);
}

float GetIndirectOcclusion(float2 ScreenUV, bool bHasDynamicIndirectShadowCasterRepresentation)
{
	float IndirectOcclusion;

	uint IndirectOcclusionWidth, IndirectOcclusionHeight;
	OpaqueBasePass_IndirectOcclusionTexture.GetDimensions(IndirectOcclusionWidth, IndirectOcclusionHeight);

    int2 IntScreenUV = int2(trunc(ScreenUV * float2(IndirectOcclusionWidth, IndirectOcclusionHeight)));
	IndirectOcclusion = OpaqueBasePass_IndirectOcclusionTexture.Load(int3(IntScreenUV, 0)).x;


	IndirectOcclusion = lerp(1, IndirectOcclusion, bHasDynamicIndirectShadowCasterRepresentation ? View_IndirectCapsuleSelfShadowingIntensity : 1);

	return IndirectOcclusion;
}

FDeferredLightingSplit GetForwardDirectLightingSplit(uint GridIndex, float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBufferData, float2 ScreenUV, uint PrimitiveId, uint EyeIndex, float Dither, float InDirectionalLightCloudShadow, inout float OutDirectionalLightShadow)
{
	float3 WorldPosition = TranslatedWorldPosition -  LWCToFloat( GetPrimaryView() .PreViewTranslation) ;

	float4 DynamicShadowFactors = 1;


		DynamicShadowFactors = GetForwardDynamicShadowFactors(ScreenUV);


	FDeferredLightingSplit DirectLighting;
	DirectLighting.DiffuseLighting = 0;
	DirectLighting.SpecularLighting = 0;

	float SpecularScale = 1;
#line 141 "/Engine/Private/ForwardLightingCommon.ush"
	uint LightingChannelMask = GetPrimitive_LightingChannelMask(PrimitiveId);

	const FDirectionalLightData DirectionalLightData = GetDirectionalLightData(EyeIndex);
	FRectTexture RectTexture = InitRectTexture( OpaqueBasePass_Shared_Forward_DummyRectLightSourceTexture );

	[branch]
	if (DirectionalLightData.HasDirectionalLight)
	{
		FDeferredLightData LightData = (FDeferredLightData)0;
		LightData.Color = DirectionalLightData.DirectionalLightColor;
		LightData.FalloffExponent = 0;
		LightData.Direction = DirectionalLightData.DirectionalLightDirection;
		LightData.DistanceFadeMAD = DirectionalLightData.DirectionalLightDistanceFadeMAD;
		LightData.bRadialLight = false;
		LightData.SpecularScale = SpecularScale;

		LightData.ShadowedBits = (DirectionalLightData.DirectionalLightShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;

		LightData.ShadowMapChannelMask = UnpackShadowMapChannelMask(DirectionalLightData.DirectionalLightShadowMapChannelMask);
		LightData.HairTransmittance = InitHairTransmittanceData();
#line 171 "/Engine/Private/ForwardLightingCommon.ush"
			float4 PreviewShadowMapChannelMask = UnpackShadowMapChannelMask(DirectionalLightData.DirectionalLightShadowMapChannelMask >> 4);
			float DynamicShadowing = dot(PreviewShadowMapChannelMask, DynamicShadowFactors);




			float PerObjectShadowing = LightData.DistanceFadeMAD.y < 0.0f ? 1.0f : DynamicShadowing;
			float WholeSceneShadowing = LightData.DistanceFadeMAD.y < 0.0f ? DynamicShadowing : 1.0f;

			float4 LightAttenuation = float4(WholeSceneShadowing.xx, PerObjectShadowing.xx);
#line 204 "/Engine/Private/ForwardLightingCommon.ush"
		FDeferredLightingSplit NewLighting = GetDynamicLightingSplit(TranslatedWorldPosition, -CameraVector, GBufferData, 1, GBufferData.ShadingModelID, LightData, LightAttenuation, Dither, uint2(0,0), RectTexture, OutDirectionalLightShadow);

		[flatten]
		if ((DirectionalLightData.DirectionalLightShadowMapChannelMask >> 8) & LightingChannelMask)
		{
#line 215 "/Engine/Private/ForwardLightingCommon.ush"
			DirectLighting.DiffuseLighting += NewLighting.DiffuseLighting;
			DirectLighting.SpecularLighting += NewLighting.SpecularLighting;
		}
	}



	const FCulledLightsGridData CulledLightsGrid = GetCulledLightsGrid(GridIndex, EyeIndex);




	const uint NumLocalLights = min(CulledLightsGrid.NumLocalLights, GetNumLocalLights(EyeIndex));

	[loop]
	for (uint LocalLightListIndex = 0; LocalLightListIndex < NumLocalLights; LocalLightListIndex++)
	{
		const FLocalLightData LocalLight = GetLocalLightData(CulledLightsGrid.DataStartIndex + LocalLightListIndex, EyeIndex);

		FDeferredLightData LightData = (FDeferredLightData)0;
		LightData.TranslatedWorldPosition = LocalLight.LightPositionAndInvRadius.xyz;
		LightData.InvRadius = LocalLight.LightPositionAndInvRadius.w;
		LightData.Color = LocalLight.LightColorAndFalloffExponent.xyz;
		LightData.FalloffExponent = LocalLight.LightColorAndFalloffExponent.w;
		LightData.Direction = LocalLight.LightDirectionAndShadowMask.xyz;
		LightData.SpotAngles = LocalLight.SpotAnglesAndSourceRadiusPacked.xy;
		LightData.SourceRadius = LocalLight.SpotAnglesAndSourceRadiusPacked.z;
		LightData.SourceLength = f16tof32(asuint(LocalLight.SpotAnglesAndSourceRadiusPacked.w));
        LightData.Tangent = LocalLight.LightTangentAndSoftSourceRadius.xyz;
        LightData.SoftSourceRadius = LocalLight.LightTangentAndSoftSourceRadius.w;
		LightData.bInverseSquared = LightData.FalloffExponent == 0;
		LightData.bRadialLight = true;
		LightData.bSpotLight = LightData.SpotAngles.x > -2.0f;
		LightData.SpecularScale = SpecularScale;
		LightData.HairTransmittance = InitHairTransmittanceData();
#line 258 "/Engine/Private/ForwardLightingCommon.ush"
		uint LightTypeAndPackedShadowMapChannelMask = asuint(LocalLight.LightDirectionAndShadowMask.w);



		uint LightType = LightTypeAndPackedShadowMapChannelMask >> 16;

		LightData.ShadowedBits = (LightTypeAndPackedShadowMapChannelMask & 0xFF) != 0 ? 1 : 0;

		LightData.ShadowMapChannelMask = UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask);
		float4 PreviewShadowMapChannelMask = UnpackShadowMapChannelMask(LightTypeAndPackedShadowMapChannelMask >> 4);
		float DynamicShadowing = dot(PreviewShadowMapChannelMask, DynamicShadowFactors);
		float4 LightAttenuation = float4(1, 1, DynamicShadowing.x, DynamicShadowing.x);
		float SurfaceShadow = 1.0f;
		FDeferredLightingSplit NewLighting = GetDynamicLightingSplit(TranslatedWorldPosition, -CameraVector, GBufferData, 1, GBufferData.ShadingModelID, LightData, LightAttenuation, Dither, uint2(0,0), RectTexture, SurfaceShadow);

		[flatten]
		if ((LightTypeAndPackedShadowMapChannelMask >> 8) & LightingChannelMask)
		{
			DirectLighting.DiffuseLighting += NewLighting.DiffuseLighting;
			DirectLighting.SpecularLighting += NewLighting.SpecularLighting;
		}
	}




	if ( OpaqueBasePass_Shared_Forward_DirectLightingShowFlag  == 0)
	{
		DirectLighting.DiffuseLighting = 0.0f;
		DirectLighting.SpecularLighting = 0.0f;
	}

	return DirectLighting;
}

float3 GetForwardDirectLighting(uint GridIndex, float3 TranslatedWorldPosition, float3 CameraVector, FGBufferData GBufferData, float2 ScreenUV, uint PrimitiveId, uint EyeIndex, float Dither, float InDirectionalLightCloudShadow, inout float OutDirectionalLightShadow)
{
	FDeferredLightingSplit Ret = GetForwardDirectLightingSplit(GridIndex, TranslatedWorldPosition, CameraVector, GBufferData, ScreenUV, PrimitiveId, EyeIndex, Dither, InDirectionalLightCloudShadow, OutDirectionalLightShadow);

	return Ret.DiffuseLighting.rgb + Ret.SpecularLighting.rgb;
}

float3 GetForwardDirectLightingForVertexLighting(uint GridIndex, float3 TranslatedWorldPosition, float SceneDepth, float3 WorldNormal, uint EyeIndex, float InDirectionalLightCloudShadow)
{
	float3 DirectLighting = 0;

	float3 DiffuseColor = 1.0f;

	const FDirectionalLightData DirectionalLightData = GetDirectionalLightData(EyeIndex);

	[branch]
	if (DirectionalLightData.HasDirectionalLight)
	{
		float3 N = WorldNormal;
		float3 L = DirectionalLightData.DirectionalLightDirection;
		float NoL = saturate(dot(N, L));

		float3 LightColor = DirectionalLightData.DirectionalLightColor;
#line 321 "/Engine/Private/ForwardLightingCommon.ush"
		float ShadowFactor = ComputeDirectionalLightStaticShadowing(TranslatedWorldPosition);
		bool bUnused = false;
		ShadowFactor *= ComputeDirectionalLightDynamicShadowing(TranslatedWorldPosition, SceneDepth, bUnused);
#line 330 "/Engine/Private/ForwardLightingCommon.ush"
		float3 DiffuseLighting = Diffuse_Lambert(DiffuseColor);
		DirectLighting += LightColor * (NoL * ShadowFactor) * DiffuseLighting;
	}

	const FCulledLightsGridData CulledLightsGrid = GetCulledLightsGrid(GridIndex, EyeIndex);



	const uint NumLocalLights = min(CulledLightsGrid.NumLocalLights, GetNumLocalLights(EyeIndex));

	[loop]
	for (uint LocalLightListIndex = 0; LocalLightListIndex < NumLocalLights; LocalLightListIndex++)
	{
		const FLocalLightData LocalLight = GetLocalLightData(CulledLightsGrid.DataStartIndex + LocalLightListIndex, EyeIndex);

		FSimpleDeferredLightData LightData = (FSimpleDeferredLightData)0;
		LightData.TranslatedWorldPosition = LocalLight.LightPositionAndInvRadius.xyz;
		LightData.InvRadius = LocalLight.LightPositionAndInvRadius.w;
		LightData.Color = LocalLight.LightColorAndFalloffExponent.xyz;
		LightData.FalloffExponent = LocalLight.LightColorAndFalloffExponent.w;
		LightData.bInverseSquared = LightData.FalloffExponent == 0;


		float3 CameraVector = 0;
		float3 SpecularColor = 0;
		float Roughness = 1.0f;
		DirectLighting += GetSimpleDynamicLighting(TranslatedWorldPosition, CameraVector, WorldNormal, 1, DiffuseColor, SpecularColor, Roughness, LightData);
	}


	if ( OpaqueBasePass_Shared_Forward_DirectLightingShowFlag  == 0)
	{
		DirectLighting = 0.0f;
	}

	return DirectLighting;
}

uint MortonCode( uint x )
{


	x = (x ^ (x << 2)) & 0x33333333;
	x = (x ^ (x << 1)) & 0x55555555;
	return x;
}
#line 386 "/Engine/Private/ForwardLightingCommon.ush"
#line 1 "ReflectionEnvironmentComposite.ush"
#line 9 "/Engine/Private/ReflectionEnvironmentComposite.ush"
float3 CompositeReflectionCapturesAndSkylightTWS(
	float CompositeAlpha,
	float3 TranslatedWorldPosition,
	float3 RayDirection,
	float Roughness,
	float IndirectIrradiance,
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight,
	uint EyeIndex)
{
	float Mip = ComputeReflectionCaptureMipFromRoughness(Roughness, View_ReflectionCubemapMaxMip);
	float4 ImageBasedReflections = float4(0, 0, 0, CompositeAlpha);
	float2 CompositedAverageBrightness = float2(0.0f, 1.0f);
#line 124 "/Engine/Private/ReflectionEnvironmentComposite.ush"
	float3 ProjectedCaptureVector = RayDirection;

	FLWCVector3 SingleCaptureWorldPosition = MakeLWCVector3(ReflectionCapture_TilePosition[SingleCaptureIndex].xyz, ReflectionCapture_PositionAndRadius[SingleCaptureIndex].xyz);
	float3 SingleCaptureTranslatedWorldPosition = LWCToFloat(LWCAdd(SingleCaptureWorldPosition,  GetPrimaryView() .PreViewTranslation));
	float SingleCaptureRadius = ReflectionCapture_PositionAndRadius[SingleCaptureIndex].w;

	float4 SingleCaptureOffsetAndAverageBrightness = ReflectionCapture_CaptureOffsetAndAverageBrightness[SingleCaptureIndex];
	float SingleCaptureBrightness = ReflectionCapture_CaptureProperties[SingleCaptureIndex].x;
	float SingleCaptureArrayIndex = ReflectionCapture_CaptureProperties[SingleCaptureIndex].y;
#line 149 "/Engine/Private/ReflectionEnvironmentComposite.ush"
	float4 Sample = TextureCubeArraySampleLevel( OpaqueBasePass_Shared_Reflection_ReflectionCubemap ,  OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler , ProjectedCaptureVector, SingleCaptureArrayIndex, Mip);

	Sample.rgb *= SingleCaptureBrightness;
	ImageBasedReflections = float4(Sample.rgb, 1 - Sample.a);

	float AverageBrightness = SingleCaptureOffsetAndAverageBrightness.w;
	CompositedAverageBrightness.x += AverageBrightness * CompositedAverageBrightness.y;
	CompositedAverageBrightness.y = 0;



	ImageBasedReflections.rgb *= View_PrecomputedIndirectSpecularColorScale;
	CompositedAverageBrightness.x *= Luminance( View_PrecomputedIndirectSpecularColorScale );
#line 193 "/Engine/Private/ReflectionEnvironmentComposite.ush"
	ImageBasedReflections.rgb *= ComputeMixingWeight(IndirectIrradiance, CompositedAverageBrightness.x, Roughness);


	ImageBasedReflections.rgb += ImageBasedReflections.a * ExtraIndirectSpecular;

	return ImageBasedReflections.rgb;
}

float3 CompositeReflectionCapturesAndSkylightTWS(
	float CompositeAlpha,
	float3 TranslatedWorldPosition,
	float3 RayDirection,
	float Roughness,
	float IndirectIrradiance,
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight)
{
	return CompositeReflectionCapturesAndSkylightTWS(
		CompositeAlpha,
		TranslatedWorldPosition,
		RayDirection,
		Roughness,
		IndirectIrradiance,
		IndirectSpecularOcclusion,
		ExtraIndirectSpecular,
		NumCapturesAffectingTile,
		CaptureDataStartIndex,
		SingleCaptureIndex,
		bCompositeSkylight,
		0);
}

float3 CompositeReflectionCapturesAndSkylight(
	float CompositeAlpha,
	float3 WorldPosition,
	float3 RayDirection,
	float Roughness,
	float IndirectIrradiance,
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight)
{
	return CompositeReflectionCapturesAndSkylightTWS(
		CompositeAlpha,
		WorldPosition +  LWCToFloat( GetPrimaryView() .PreViewTranslation) ,
		RayDirection,
		Roughness,
		IndirectIrradiance,
		IndirectSpecularOcclusion,
		ExtraIndirectSpecular,
		NumCapturesAffectingTile,
		CaptureDataStartIndex,
		SingleCaptureIndex,
		bCompositeSkylight,
		0);
}

float3 CompositeReflectionCapturesAndSkylight(
	float CompositeAlpha,
	float3 WorldPosition,
	float3 RayDirection,
	float Roughness,
	float IndirectIrradiance,
	float IndirectSpecularOcclusion,
	float3 ExtraIndirectSpecular,
	uint NumCapturesAffectingTile,
	uint CaptureDataStartIndex,
	int SingleCaptureIndex,
	bool bCompositeSkylight,
	uint EyeIndex)
{
	return CompositeReflectionCapturesAndSkylightTWS(
		CompositeAlpha,
		WorldPosition +  LWCToFloat( GetPrimaryView() .PreViewTranslation) ,
		RayDirection,
		Roughness,
		IndirectIrradiance,
		IndirectSpecularOcclusion,
		ExtraIndirectSpecular,
		NumCapturesAffectingTile,
		CaptureDataStartIndex,
		SingleCaptureIndex,
		bCompositeSkylight,
		EyeIndex);
}
#line 387 "/Engine/Private/ForwardLightingCommon.ush"

float3  GetImageBasedReflectionSpecular(FMaterialPixelParameters MaterialParameters, float3 RayDirection,  float  Roughness,  float  IndirectIrradiance, uint GridIndex, int SingleCaptureIndex, uint EyeIndex)
{
	float3 SpecularIBL;
#line 411 "/Engine/Private/ForwardLightingCommon.ush"
	{
		uint NumLocalReflectionCaptures = 0;
		uint DataStartIndex = 0;
#line 437 "/Engine/Private/ForwardLightingCommon.ush"
		const bool bCompositeSkylight = true;
		SpecularIBL = CompositeReflectionCapturesAndSkylightTWS(
			1.0f,
			MaterialParameters.WorldPosition_CamRelative,
			RayDirection,
			Roughness,
			IndirectIrradiance,
			1.0f,
			0.0f,
			NumLocalReflectionCaptures,
			DataStartIndex,
			SingleCaptureIndex,
			bCompositeSkylight,
			EyeIndex);
	}
#line 495 "/Engine/Private/ForwardLightingCommon.ush"
	float3 SpecularLighting = SpecularIBL.rgb;
#line 510 "/Engine/Private/ForwardLightingCommon.ush"
	return SpecularLighting;
}

float3  GetImageBasedReflectionLighting(FMaterialPixelParameters MaterialParameters,  float  Roughness,  float3  SpecularColor,  float  IndirectIrradiance, uint GridIndex, int SingleCaptureIndex, uint EyeIndex)
{
	float3 N = MaterialParameters.WorldNormal;
	float3 V = MaterialParameters.CameraVector;

	float3 RayDirection = 2 * dot(V, N) * N - V;
	float  NoV = saturate(dot(N, V));

	const float3 SpecularLighting = GetImageBasedReflectionSpecular(MaterialParameters, RayDirection, Roughness, IndirectIrradiance, GridIndex, SingleCaptureIndex, EyeIndex);




	SpecularColor = EnvBRDFApprox(SpecularColor, Roughness, NoV);

	return SpecularLighting * SpecularColor;
}

float3  GetImageBasedReflectionLighting(FMaterialPixelParameters MaterialParameters,  float  Roughness,  float3  SpecularColor,  float  IndirectIrradiance, uint GridIndex, int SingleCaptureIndex)
{
	return GetImageBasedReflectionLighting(MaterialParameters, Roughness, SpecularColor, IndirectIrradiance, GridIndex, SingleCaptureIndex, 0);
}
#line 157 "/Engine/Private/BasePassPixelShader.usf"
#line 309 "/Engine/Private/BasePassPixelShader.usf"
void GetSkyLighting(FMaterialPixelParameters MaterialParameters,  float  LightmapVTPageTableResult, bool bEvaluateBackface, float3 WorldNormal,  float2  LightmapUV, uint LightmapDataIndex, float3 SkyOcclusionUV3D, out float3 OutDiffuseLighting, out float3 OutSubsurfaceLighting)
{
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;
#line 346 "/Engine/Private/BasePassPixelShader.usf"
	if ( OpaqueBasePass_Shared_UseBasePassSkylight  > 0)
	{
#line 420 "/Engine/Private/BasePassPixelShader.usf"
	}
}
#line 432 "/Engine/Private/BasePassPixelShader.usf"
void GetPrecomputedIndirectLightingAndSkyLight(
	FMaterialPixelParameters MaterialParameters,
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants  BasePassInterpolants,
	float  LightmapVTPageTableResult,
	bool bEvaluateBackface,
	float3 DiffuseDir,
	float3 VolumetricLightmapBrickTextureUVs,
	out float3 OutDiffuseLighting,
	out float3 OutSubsurfaceLighting,
	out float OutIndirectIrradiance)
{
	OutIndirectIrradiance = 0;
	OutDiffuseLighting = 0;
	OutSubsurfaceLighting = 0;
	float2  SkyOcclusionUV = ( float2 )0;
	uint SkyOcclusionDataIndex = 0u;
#line 481 "/Engine/Private/BasePassPixelShader.usf"
				FThreeBandSHVectorRGB IrradianceSH = GetVolumetricLightmapSH3(VolumetricLightmapBrickTextureUVs);



			FThreeBandSHVector DiffuseTransferSH = CalcDiffuseTransferSH3(DiffuseDir, 1);
			OutDiffuseLighting = max(float3(0,0,0), DotSH3(IrradianceSH, DiffuseTransferSH)) / PI;
#line 614 "/Engine/Private/BasePassPixelShader.usf"
	OutDiffuseLighting *= View_PrecomputedIndirectLightingColorScale;
	OutSubsurfaceLighting *= View_PrecomputedIndirectLightingColorScale;

	float3 SkyDiffuseLighting;
	float3 SkySubsurfaceLighting;
	GetSkyLighting(MaterialParameters, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, SkyOcclusionUV, SkyOcclusionDataIndex, VolumetricLightmapBrickTextureUVs, SkyDiffuseLighting, SkySubsurfaceLighting);

	OutSubsurfaceLighting += SkySubsurfaceLighting;


	OutDiffuseLighting += SkyDiffuseLighting;


		OutIndirectIrradiance = Luminance(OutDiffuseLighting);

}
#line 675 "/Engine/Private/BasePassPixelShader.usf"
void ApplyPixelDepthOffsetForBasePass(inout FMaterialPixelParameters MaterialParameters, FPixelMaterialInputs PixelMaterialInputs, inout  FSharedBasePassInterpolants  BasePassInterpolants, out float OutDepth)
{
	float PixelDepthOffset = ApplyPixelDepthOffsetToMaterialParameters(MaterialParameters, PixelMaterialInputs, OutDepth);
#line 682 "/Engine/Private/BasePassPixelShader.usf"
}

float DotSpecularSG( float Roughness, float3 N, float3 V, FSphericalGaussian LightSG )
{
	float a = Pow2( max( 0.02, Roughness ) );
	float a2 = a*a;

	float3 L = LightSG.Axis;
	float3 H = normalize(V + L);

	float NoV = saturate( abs( dot(N, V) ) + 1e-5 );

	FSphericalGaussian NDF;
	NDF.Axis = N;
	NDF.Sharpness = 2 / a2;
	NDF.Amplitude = rcp( PI * a2 );
#line 753 "/Engine/Private/BasePassPixelShader.usf"
	{

		float SharpnessX = LightSG.Sharpness * 2 * Pow2( NoV );
		float SharpnessY = LightSG.Sharpness * 2;

		float nu = NDF.Sharpness * 0.5;

		FSphericalGaussian ConvolvedNDF;
		ConvolvedNDF.Axis = NDF.Axis;
		ConvolvedNDF.Sharpness = 2 * (nu * SharpnessY) / (nu + SharpnessY);
		ConvolvedNDF.Amplitude = NDF.Amplitude * LightSG.Amplitude;
		ConvolvedNDF.Amplitude *= PI * rsqrt( (nu + SharpnessX) * (nu + SharpnessY) );




		return Evaluate( ConvolvedNDF, H );
	}

}

float3 GetBentNormalZero(in FMaterialPixelParameters MaterialParameters)
{

	return GetBentNormal0(MaterialParameters);
#line 781 "/Engine/Private/BasePassPixelShader.usf"
}

void ApplyBentNormal(
	in float3 CameraVector, in float3 WorldNormal, in float3x3 TangentToWorld, in float3 BentNormal0,
	in float Roughness, inout float3 BentNormal, inout float DiffOcclusion, inout float SpecOcclusion)
{


		BentNormal = normalize( TransformTangentVectorToWorld(TangentToWorld, BentNormal0) );
#line 794 "/Engine/Private/BasePassPixelShader.usf"
	FSphericalGaussian HemisphereSG = Hemisphere_ToSphericalGaussian(WorldNormal);
	FSphericalGaussian NormalSG = ClampedCosine_ToSphericalGaussian(WorldNormal);
	FSphericalGaussian VisibleSG = BentNormalAO_ToSphericalGaussian( BentNormal, DiffOcclusion );
	FSphericalGaussian DiffuseSG = Mul( NormalSG, VisibleSG );

	float VisibleCosAngle = sqrt( 1 - DiffOcclusion );


	BentNormal = DiffuseSG.Axis;

	DiffOcclusion = saturate( Integral( DiffuseSG ) * 0.42276995 );


	float3 N = WorldNormal;
	float3 V = CameraVector;

	SpecOcclusion = DotSpecularSG( Roughness, N, V, VisibleSG );
	SpecOcclusion /= DotSpecularSG( Roughness, N, V, HemisphereSG );

	SpecOcclusion = saturate( SpecOcclusion );

}

uint GetDiffuseIndirectSampleOcclusion(FGBufferData GBuffer, FMaterialPixelParameters MaterialParameters, float2 SvPosition, float MaterialAO)
{
	uint DiffuseIndirectSampleOcclusion = 0;
#line 857 "/Engine/Private/BasePassPixelShader.usf"
	return DiffuseIndirectSampleOcclusion;
}
#line 883 "/Engine/Private/BasePassPixelShader.usf"
void FPixelShaderInOut_MainPS(
	FVertexFactoryInterpolantsVSToPS Interpolants,
	FSharedBasePassInterpolants  BasePassInterpolants,
	in FPixelShaderIn In,
	inout FPixelShaderOut Out)
{

	const uint EyeIndex = Interpolants.EyeIndex;
	ResolvedView = ResolveView(EyeIndex);
#line 898 "/Engine/Private/BasePassPixelShader.usf"
	float4 OutVelocity = 0;


	float4 OutGBufferD = 0;


	float4 OutGBufferE = 0;

	FMaterialPixelParameters MaterialParameters = GetMaterialPixelParameters(Interpolants, In.SvPosition);
	FPixelMaterialInputs PixelMaterialInputs;

	float  LightmapVTPageTableResult = ( float )0.0f;
#line 941 "/Engine/Private/BasePassPixelShader.usf"
	{
		CalcMaterialParameters(MaterialParameters, PixelMaterialInputs, In.SvPosition, In.bIsFrontFace);
	}
#line 955 "/Engine/Private/BasePassPixelShader.usf"
	const bool bEditorWeightedZBuffering = false;
#line 964 "/Engine/Private/BasePassPixelShader.usf"
	if (!bEditorWeightedZBuffering)
	{

		Out.Coverage = DiscardMaterialWithPixelCoverage(MaterialParameters, PixelMaterialInputs);
#line 971 "/Engine/Private/BasePassPixelShader.usf"
	}


	const float Dither = InterleavedGradientNoise(MaterialParameters.SvPosition.xy, View_StateFrameIndexMod8);



	float3  BaseColor = GetMaterialBaseColor(PixelMaterialInputs);
	float  Metallic = GetMaterialMetallic(PixelMaterialInputs);
	float  Specular = GetMaterialSpecular(PixelMaterialInputs);

	float Roughness = GetMaterialRoughness(PixelMaterialInputs);
	float Anisotropy = GetMaterialAnisotropy(PixelMaterialInputs);
	uint ShadingModel = GetMaterialShadingModel(PixelMaterialInputs);
	float  Opacity = GetMaterialOpacity(PixelMaterialInputs);
#line 997 "/Engine/Private/BasePassPixelShader.usf"
	float MaterialAO = GetMaterialAmbientOcclusion(PixelMaterialInputs);
#line 1006 "/Engine/Private/BasePassPixelShader.usf"
	float3 SubsurfaceColor = 0;

	float SubsurfaceProfile = 0;


	if (ShadingModel ==  2  || ShadingModel ==  3  || ShadingModel ==  5  || ShadingModel ==  6  || ShadingModel ==  8  || ShadingModel ==  9 )
	{
		float4 SubsurfaceData = GetMaterialSubsurfaceData(PixelMaterialInputs);

		if (false)
		{
		}
#line 1031 "/Engine/Private/BasePassPixelShader.usf"
		SubsurfaceProfile = SubsurfaceData.a;
	}
#line 1071 "/Engine/Private/BasePassPixelShader.usf"
	float DBufferOpacity = 1.0f;




	[flatten]
#line 1080 "/Engine/Private/BasePassPixelShader.usf"
		if ((GetPrimitiveData(MaterialParameters).Flags &  0x8 ) != 0 && View_ShowDecalsMask > 0)
		{
			uint ValidDBufferTargetMask = GetDBufferTargetMask(uint2(In.SvPosition.xy)) &  7 ;

			[branch]
			if (ValidDBufferTargetMask)
			{
				float2 BufferUV = SvPositionToBufferUV(In.SvPosition);
				FDBufferData DBufferData = GetDBufferData(BufferUV, ValidDBufferTargetMask);

				ApplyDBufferData(DBufferData, MaterialParameters.WorldNormal, SubsurfaceColor, Roughness, BaseColor, Metallic, Specular);
				DBufferOpacity = (DBufferData.ColorOpacity + DBufferData.NormalOpacity + DBufferData.RoughnessOpacity) * (1.0f / 3.0f);
			}
		}


	const float BaseMaterialCoverageOverWater = Opacity;
	const float WaterVisibility = 1.0 - BaseMaterialCoverageOverWater;

	float3 VolumetricLightmapBrickTextureUVs;


	VolumetricLightmapBrickTextureUVs = ComputeVolumetricLightmapBrickTextureUVs( LWCToFloat(MaterialParameters.AbsoluteWorldPosition) );


	FGBufferData GBuffer = (FGBufferData)0;

	GBuffer.GBufferAO = MaterialAO;
	GBuffer.PerObjectGBufferData = GetPrimitive_PerObjectGBufferData(MaterialParameters.PrimitiveId);
	GBuffer.Depth = MaterialParameters.ScreenPosition.w;
	GBuffer.PrecomputedShadowFactors = GetPrecomputedShadowMasks(LightmapVTPageTableResult, Interpolants, MaterialParameters, VolumetricLightmapBrickTextureUVs);



	SetGBufferForShadingModel(
		GBuffer,
		MaterialParameters,
		Opacity,
		BaseColor,
		Metallic,
		Specular,
		Roughness,
		Anisotropy,
		SubsurfaceColor,
		SubsurfaceProfile,
		Dither,
		ShadingModel
		);
#line 1195 "/Engine/Private/BasePassPixelShader.usf"
	const bool bChecker = CheckerFromPixelPos(MaterialParameters.SvPosition.xy);



	GBuffer.SpecularColor = ComputeF0(Specular, BaseColor, Metallic);
#line 1227 "/Engine/Private/BasePassPixelShader.usf"
	GBuffer.DiffuseColor = BaseColor - BaseColor * Metallic;


	{

		GBuffer.DiffuseColor = GBuffer.DiffuseColor * View_DiffuseOverrideParameter.w + View_DiffuseOverrideParameter.xyz;
		GBuffer.SpecularColor = GBuffer.SpecularColor * View_SpecularOverrideParameter.w + View_SpecularOverrideParameter.xyz;
	}



	if (View_RenderingReflectionCaptureMask)

	{
		EnvBRDFApproxFullyRough(GBuffer.DiffuseColor, GBuffer.SpecularColor);

	}

	float3 BentNormal = MaterialParameters.WorldNormal;


	[branch]  if( GBuffer.ShadingModelID ==  4  &&  0 )
	{
		const float2 oct1 = ((float2(GBuffer.CustomData.a, GBuffer.CustomData.z) * 2) - (256.0/255.0)) + UnitVectorToOctahedron(GBuffer.WorldNormal);
		BentNormal = OctahedronToUnitVector(oct1);
	}

	float DiffOcclusion = MaterialAO;
	float SpecOcclusion = MaterialAO;
	ApplyBentNormal(MaterialParameters.CameraVector, MaterialParameters.WorldNormal, MaterialParameters.TangentToWorld, GetBentNormalZero(MaterialParameters), GBuffer.Roughness, BentNormal, DiffOcclusion, SpecOcclusion);

	GBuffer.GBufferAO = AOMultiBounce( Luminance( GBuffer.SpecularColor ), SpecOcclusion ).g;

	GBuffer.DiffuseIndirectSampleOcclusion = GetDiffuseIndirectSampleOcclusion(GBuffer, MaterialParameters, In.SvPosition.xy, MaterialAO);



	float3  DiffuseColor = 0;
	float3  Color = 0;
	float IndirectIrradiance = 0;

	float3  ColorSeparateSpecular = 0;
	float3  ColorSeparateEmissive = 0;

	float3 DiffuseIndirectLighting = 0;
	float3 SubsurfaceIndirectLighting = 0;





		float3 DiffuseDir = BentNormal;
		float3 DiffuseColorForIndirect = GBuffer.DiffuseColor;
#line 1313 "/Engine/Private/BasePassPixelShader.usf"
		const bool bEvaluateBackface = GetShadingModelRequiresBackfaceLighting(GBuffer.ShadingModelID);
		GetPrecomputedIndirectLightingAndSkyLight(MaterialParameters, Interpolants, BasePassInterpolants, LightmapVTPageTableResult, bEvaluateBackface, DiffuseDir, VolumetricLightmapBrickTextureUVs, DiffuseIndirectLighting, SubsurfaceIndirectLighting, IndirectIrradiance);

		float IndirectOcclusion = 1.0f;
		float2 NearestResolvedDepthScreenUV = 0;
		float DirectionalLightShadow = 1.0f;


			float2 NDC = MaterialParameters.ScreenPosition.xy / MaterialParameters.ScreenPosition.w;
			float2 ScreenUV = NDC * ResolvedView.ScreenPositionScaleBias.xy + ResolvedView.ScreenPositionScaleBias.wz;
			NearestResolvedDepthScreenUV = CalculateNearestResolvedDepthScreenUV(ScreenUV, MaterialParameters.ScreenPosition.w);

			IndirectOcclusion = GetIndirectOcclusion(NearestResolvedDepthScreenUV, HasDynamicIndirectShadowCasterRepresentation(GBuffer));
			DiffuseIndirectLighting *= IndirectOcclusion;
			SubsurfaceIndirectLighting *= IndirectOcclusion;
			IndirectIrradiance *= IndirectOcclusion;


		DiffuseColor += (DiffuseIndirectLighting * DiffuseColorForIndirect + SubsurfaceIndirectLighting * SubsurfaceColor) * AOMultiBounce( GBuffer.BaseColor, DiffOcclusion );
#line 1346 "/Engine/Private/BasePassPixelShader.usf"
			uint GridIndex = 0;


				GridIndex = ComputeLightGridCellIndex((uint2)((MaterialParameters.SvPosition.xy - ResolvedView.ViewRectMin.xy) * View_LightProbeSizeRatioAndInvSizeRatio.zw), MaterialParameters.SvPosition.w, EyeIndex);

				float DirectionalLightCloudShadow = 1.0f;
#line 1357 "/Engine/Private/BasePassPixelShader.usf"
					FDeferredLightingSplit ForwardDirectLighting = GetForwardDirectLightingSplit(GridIndex, MaterialParameters.WorldPosition_CamRelative, MaterialParameters.CameraVector, GBuffer, NearestResolvedDepthScreenUV, MaterialParameters.PrimitiveId, EyeIndex, Dither, DirectionalLightCloudShadow, DirectionalLightShadow);





						Color += ForwardDirectLighting.DiffuseLighting.rgb;
						Color += ForwardDirectLighting.SpecularLighting.rgb;





				if (GBuffer.ShadingModelID !=  7 )
				{
					int SingleCaptureIndex = GetPrimitiveData(MaterialParameters).SingleCaptureIndex;

					float3  ReflectionColor = GetImageBasedReflectionLighting(MaterialParameters, GBuffer.Roughness, GBuffer.SpecularColor, IndirectIrradiance, GridIndex, SingleCaptureIndex, EyeIndex)
						* IndirectOcclusion
						* AOMultiBounce(GBuffer.SpecularColor, SpecOcclusion);




						Color += ReflectionColor;

				}
#line 1418 "/Engine/Private/BasePassPixelShader.usf"
		float4 HeightFogging = BasePassInterpolants.VertexFog;
#line 1425 "/Engine/Private/BasePassPixelShader.usf"
	float4 Fogging = HeightFogging;


	if ( OpaqueBasePass_Shared_Fog_ApplyVolumetricFog  > 0)
	{
		float3 VolumeUV = ComputeVolumeUV(MaterialParameters.AbsoluteWorldPosition, ResolvedView.WorldToClip);
		Fogging = CombineVolumetricFog(HeightFogging, VolumeUV, EyeIndex);
	}
#line 1470 "/Engine/Private/BasePassPixelShader.usf"
	float3  Emissive = 0;
#line 1482 "/Engine/Private/BasePassPixelShader.usf"
		float3 GBufferDiffuseColor = GBuffer.DiffuseColor;
		float3 GBufferSpecularColor = GBuffer.SpecularColor;
		EnvBRDFApproxFullyRough(GBufferDiffuseColor, GBufferSpecularColor);
		Color = lerp(Color, GBufferDiffuseColor, View_UnlitViewmodeMask);


	Emissive = GetMaterialEmissive(PixelMaterialInputs);







		[branch]
		if (View_OutOfBoundsMask > 0)
		{
			float3 ObjectBounds =
				float3(
					GetPrimitiveData(MaterialParameters).ObjectBoundsX,
					GetPrimitiveData(MaterialParameters).ObjectBoundsY,
					GetPrimitiveData(MaterialParameters).ObjectBoundsZ
				);

			if (any(abs(LWCToFloat(LWCSubtract(MaterialParameters.AbsoluteWorldPosition, GetPrimitiveData(MaterialParameters).ObjectWorldPosition))) > ObjectBounds + 1))
			{
				float Gradient = LWCFrac(LWCDivide(LWCDot(MaterialParameters.AbsoluteWorldPosition, float3(.577f, .577f, .577f)), 500.0f));
				Emissive = lerp(float3(1,1,0), float3(0,1,1), Gradient.xxx > .5f);
				Opacity = 1;
			}
		}
#line 1527 "/Engine/Private/BasePassPixelShader.usf"
	Color += DiffuseColor;



	Color += Emissive;
#line 1595 "/Engine/Private/BasePassPixelShader.usf"
	bool bStrataSubsurfaceEnable = false;
#line 1763 "/Engine/Private/BasePassPixelShader.usf"
		{
			FLightAccumulator LightAccumulator = (FLightAccumulator)0;


			Color = Color * Fogging.a + Fogging.rgb;
#line 1782 "/Engine/Private/BasePassPixelShader.usf"
			LightAccumulator_Add(LightAccumulator, Color, 0, 1.0f, false);

			Out.MRT[0] =  ( LightAccumulator_GetResult(LightAccumulator) ) ;




				Out.MRT[0].a = 0;

		}
#line 1857 "/Engine/Private/BasePassPixelShader.usf"
	if(bEditorWeightedZBuffering)
	{
		Out.MRT[0].a = 1;



			Out.MRT[0].a = GetMaterialMaskInputRaw(PixelMaterialInputs);
#line 1879 "/Engine/Private/BasePassPixelShader.usf"
			clip(Out.MRT[0].a - GetMaterialOpacityMaskClipValue());

	}






	const float ViewPreExposure = View_PreExposure;








		Out.MRT[0].rgba *= ViewPreExposure;
#line 1916 "/Engine/Private/BasePassPixelShader.usf"
}
#line 1956 "/Engine/Private/BasePassPixelShader.usf"
#line 1 "PixelShaderOutputCommon.ush"
#line 52 "/Engine/Private/PixelShaderOutputCommon.ush"

void MainPS
	(




		FVertexFactoryInterpolantsVSToPS Interpolants,



		FSharedBasePassInterpolants  BasePassInterpolants,
#line 68 "/Engine/Private/PixelShaderOutputCommon.ush"
		in   float4 SvPosition : SV_Position

		, in bool bIsFrontFace : SV_IsFrontFace


		, out float4 OutTarget0 : SV_Target0
#line 126 "/Engine/Private/PixelShaderOutputCommon.ush"

#line 132 "/Engine/Private/PixelShaderOutputCommon.ush"
		, out uint OutCoverage : SV_Coverage

	)
{
#line 142 "/Engine/Private/PixelShaderOutputCommon.ush"
	FPixelShaderIn PixelShaderIn = (FPixelShaderIn)0;
	FPixelShaderOut PixelShaderOut = (FPixelShaderOut)0;





	PixelShaderIn.Coverage = 0xF;

	PixelShaderOut.Coverage = PixelShaderIn.Coverage;


	PixelShaderIn.SvPosition = SvPosition;
	PixelShaderIn.bIsFrontFace = bIsFrontFace;


	FPixelShaderInOut_MainPS(Interpolants, BasePassInterpolants, PixelShaderIn, PixelShaderOut);
#line 168 "/Engine/Private/PixelShaderOutputCommon.ush"
	OutTarget0 = PixelShaderOut.MRT[0];
#line 226 "/Engine/Private/PixelShaderOutputCommon.ush"
	OutCoverage = PixelShaderOut.Coverage;
#line 232 "/Engine/Private/PixelShaderOutputCommon.ush"
}
#line 1957 "/Engine/Private/BasePassPixelShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
View, 301666049
Strata, 2687232
DrawRectangleParameters, 3145984
InstancedView, 291504897
MobileReflectionCapture, 2425088
InstanceVF, 104204038
MobileSceneTextures, 145295880
SceneTexturesStruct, 158928480
PrimitiveDither, 1048832
PrimitiveFade, 1048832
ReflectionCapture, -1076886783
DeferredDecal, 2097668
OpaqueBasePass, 16844668
BasePass, 136907840
Primitive, 41943296
InstanceCulling, 3146265
HairCardsVF, 60686848
HairStrandsVF, 8782094
SpeedTreeData, 39846144
Atmosphere, 11534592
TranslucentBasePass, 200347593
LightmapResourceCluster, 226692878
PrecomputedLightingBuffer, 15728896
IndirectLightingCache, 69011717
PlanarReflectionStruct, 22348032
ReflectionStruct, 6291776
FogStruct, 94898184
LumenGIVolumeStruct, 35199465
TranslucentSelfShadow, 93653256
ForwardLightData, 461903053
DeferredLightUniforms, 9437581
RaytracingLightsDataPacked, 109251083
VirtualShadowMap, 274731640
Bones, 805306624
MaterialCollection, 2097408
Material, 156568576
NULL, 0
View_MaterialTextureBilinearWrapedSampler, View, 8, 0
View_MaterialTextureBilinearClampedSampler, View, 8, 1
View_VolumetricLightmapIndirectionTexture, View, 5, 2
View_VolumetricLightmapBrickAmbientVector, View, 5, 3
View_VolumetricLightmapBrickSHCoefficients0, View, 5, 4
View_VolumetricLightmapBrickSHCoefficients1, View, 5, 5
View_VolumetricLightmapBrickSHCoefficients2, View, 5, 6
View_VolumetricLightmapBrickSHCoefficients3, View, 5, 7
View_VolumetricLightmapBrickSHCoefficients4, View, 5, 8
View_VolumetricLightmapBrickSHCoefficients5, View, 5, 9
View_SkyBentNormalBrickTexture, View, 5, 10
View_DirectionalLightShadowingBrickTexture, View, 5, 11
View_VolumetricLightmapBrickAmbientVectorSampler, View, 8, 12
View_VolumetricLightmapTextureSampler0, View, 8, 13
View_VolumetricLightmapTextureSampler1, View, 8, 14
View_VolumetricLightmapTextureSampler2, View, 8, 15
View_VolumetricLightmapTextureSampler3, View, 8, 16
View_VolumetricLightmapTextureSampler4, View, 8, 17
View_VolumetricLightmapTextureSampler5, View, 8, 18
View_SkyBentNormalTextureSampler, View, 8, 19
View_DirectionalLightShadowingTextureSampler, View, 8, 20
View_GlobalDistanceFieldPageAtlasTexture, View, 5, 21
View_GlobalDistanceFieldCoverageAtlasTexture, View, 5, 22
View_GlobalDistanceFieldPageTableTexture, View, 5, 23
View_GlobalDistanceFieldMipTexture, View, 5, 24
View_AtmosphereTransmittanceTexture, View, 5, 25
View_AtmosphereTransmittanceTextureSampler, View, 8, 26
View_AtmosphereIrradianceTexture, View, 5, 27
View_AtmosphereIrradianceTextureSampler, View, 8, 28
View_AtmosphereInscatterTexture, View, 5, 29
View_AtmosphereInscatterTextureSampler, View, 8, 30
View_PerlinNoiseGradientTexture, View, 5, 31
View_PerlinNoiseGradientTextureSampler, View, 8, 32
View_PerlinNoise3DTexture, View, 5, 33
View_PerlinNoise3DTextureSampler, View, 8, 34
View_SobolSamplingTexture, View, 5, 35
View_SharedPointWrappedSampler, View, 8, 36
View_SharedPointClampedSampler, View, 8, 37
View_SharedBilinearWrappedSampler, View, 8, 38
View_SharedBilinearClampedSampler, View, 8, 39
View_SharedBilinearAnisoClampedSampler, View, 8, 40
View_SharedTrilinearWrappedSampler, View, 8, 41
View_SharedTrilinearClampedSampler, View, 8, 42
View_PreIntegratedBRDF, View, 5, 43
View_PreIntegratedBRDFSampler, View, 8, 44
View_PrimitiveSceneData, View, 6, 45
View_InstanceSceneData, View, 6, 46
View_InstancePayloadData, View, 6, 47
View_LightmapSceneData, View, 6, 48
View_SkyIrradianceEnvironmentMap, View, 6, 49
View_TransmittanceLutTexture, View, 5, 50
View_TransmittanceLutTextureSampler, View, 8, 51
View_SkyViewLutTexture, View, 5, 52
View_SkyViewLutTextureSampler, View, 8, 53
View_DistantSkyLightLutTexture, View, 5, 54
View_DistantSkyLightLutTextureSampler, View, 8, 55
View_CameraAerialPerspectiveVolume, View, 5, 56
View_CameraAerialPerspectiveVolumeSampler, View, 8, 57
View_HairScatteringLUTTexture, View, 5, 58
View_HairScatteringLUTSampler, View, 8, 59
View_LTCMatTexture, View, 5, 60
View_LTCMatSampler, View, 8, 61
View_LTCAmpTexture, View, 5, 62
View_LTCAmpSampler, View, 8, 63
View_ShadingEnergyGGXSpecTexture, View, 5, 64
View_ShadingEnergyGGXGlassTexture, View, 5, 65
View_ShadingEnergyClothSpecTexture, View, 5, 66
View_ShadingEnergyDiffuseTexture, View, 5, 67
View_ShadingEnergySampler, View, 8, 68
View_SSProfilesTexture, View, 5, 69
View_SSProfilesSampler, View, 8, 70
View_SSProfilesTransmissionSampler, View, 8, 71
View_SSProfilesPreIntegratedTexture, View, 5, 72
View_SSProfilesPreIntegratedSampler, View, 8, 73
View_WaterIndirection, View, 6, 74
View_WaterData, View, 6, 75
View_LandscapeIndirection, View, 6, 76
View_LandscapePerComponentData, View, 6, 77
View_VTFeedbackBuffer, View, 7, 78
View_EditorVisualizeLevelInstanceIds, View, 6, 79
View_EditorSelectedHitProxyIds, View, 6, 80
View_PhysicsFieldClipmapBuffer, View, 6, 81
Strata_MaterialTextureArray, Strata, 9, 0
Strata_TopLayerTexture, Strata, 9, 1
Strata_SSSTexture, Strata, 9, 2
MobileReflectionCapture_Texture, MobileReflectionCapture, 5, 0
MobileReflectionCapture_TextureSampler, MobileReflectionCapture, 8, 1
InstanceVF_VertexFetch_InstanceOriginBuffer, InstanceVF, 6, 0
InstanceVF_VertexFetch_InstanceTransformBuffer, InstanceVF, 6, 1
InstanceVF_VertexFetch_InstanceLightmapBuffer, InstanceVF, 6, 2
InstanceVF_InstanceCustomDataBuffer, InstanceVF, 6, 3
MobileSceneTextures_SceneColorTexture, MobileSceneTextures, 9, 0
MobileSceneTextures_SceneColorTextureSampler, MobileSceneTextures, 8, 1
MobileSceneTextures_SceneDepthTexture, MobileSceneTextures, 9, 2
MobileSceneTextures_SceneDepthTextureSampler, MobileSceneTextures, 8, 3
MobileSceneTextures_CustomDepthTexture, MobileSceneTextures, 9, 4
MobileSceneTextures_CustomDepthTextureSampler, MobileSceneTextures, 8, 5
MobileSceneTextures_MobileCustomStencilTexture, MobileSceneTextures, 9, 6
MobileSceneTextures_MobileCustomStencilTextureSampler, MobileSceneTextures, 8, 7
MobileSceneTextures_SceneVelocityTexture, MobileSceneTextures, 9, 8
MobileSceneTextures_SceneVelocityTextureSampler, MobileSceneTextures, 8, 9
MobileSceneTextures_GBufferATexture, MobileSceneTextures, 9, 10
MobileSceneTextures_GBufferBTexture, MobileSceneTextures, 9, 11
MobileSceneTextures_GBufferCTexture, MobileSceneTextures, 9, 12
MobileSceneTextures_GBufferDTexture, MobileSceneTextures, 9, 13
MobileSceneTextures_SceneDepthAuxTexture, MobileSceneTextures, 9, 14
MobileSceneTextures_GBufferATextureSampler, MobileSceneTextures, 8, 15
MobileSceneTextures_GBufferBTextureSampler, MobileSceneTextures, 8, 16
MobileSceneTextures_GBufferCTextureSampler, MobileSceneTextures, 8, 17
MobileSceneTextures_GBufferDTextureSampler, MobileSceneTextures, 8, 18
MobileSceneTextures_SceneDepthAuxTextureSampler, MobileSceneTextures, 8, 19
SceneTexturesStruct_SceneColorTexture, SceneTexturesStruct, 9, 0
SceneTexturesStruct_SceneDepthTexture, SceneTexturesStruct, 9, 1
SceneTexturesStruct_GBufferATexture, SceneTexturesStruct, 9, 2
SceneTexturesStruct_GBufferBTexture, SceneTexturesStruct, 9, 3
SceneTexturesStruct_GBufferCTexture, SceneTexturesStruct, 9, 4
SceneTexturesStruct_GBufferDTexture, SceneTexturesStruct, 9, 5
SceneTexturesStruct_GBufferETexture, SceneTexturesStruct, 9, 6
SceneTexturesStruct_GBufferFTexture, SceneTexturesStruct, 9, 7
SceneTexturesStruct_GBufferVelocityTexture, SceneTexturesStruct, 9, 8
SceneTexturesStruct_ScreenSpaceAOTexture, SceneTexturesStruct, 9, 9
SceneTexturesStruct_CustomDepthTexture, SceneTexturesStruct, 9, 10
SceneTexturesStruct_CustomStencilTexture, SceneTexturesStruct, 12, 11
SceneTexturesStruct_PointClampSampler, SceneTexturesStruct, 8, 12
DeferredDecal_PreviousFrameNormal, DeferredDecal, 5, 0
OpaqueBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 0
OpaqueBasePass_Shared_Forward_ShadowmapSampler, OpaqueBasePass, 8, 1
OpaqueBasePass_Shared_Forward_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 2
OpaqueBasePass_Shared_Forward_StaticShadowmapSampler, OpaqueBasePass, 8, 3
OpaqueBasePass_Shared_Forward_ForwardLocalLightBuffer, OpaqueBasePass, 16, 4
OpaqueBasePass_Shared_Forward_NumCulledLightsGrid, OpaqueBasePass, 16, 5
OpaqueBasePass_Shared_Forward_CulledLightDataGrid, OpaqueBasePass, 16, 6
OpaqueBasePass_Shared_Forward_DummyRectLightSourceTexture, OpaqueBasePass, 5, 7
OpaqueBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, OpaqueBasePass, 9, 8
OpaqueBasePass_Shared_ForwardISR_ShadowmapSampler, OpaqueBasePass, 8, 9
OpaqueBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, OpaqueBasePass, 5, 10
OpaqueBasePass_Shared_ForwardISR_StaticShadowmapSampler, OpaqueBasePass, 8, 11
OpaqueBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, OpaqueBasePass, 16, 12
OpaqueBasePass_Shared_ForwardISR_NumCulledLightsGrid, OpaqueBasePass, 16, 13
OpaqueBasePass_Shared_ForwardISR_CulledLightDataGrid, OpaqueBasePass, 16, 14
OpaqueBasePass_Shared_ForwardISR_DummyRectLightSourceTexture, OpaqueBasePass, 5, 15
OpaqueBasePass_Shared_Reflection_SkyLightCubemap, OpaqueBasePass, 5, 16
OpaqueBasePass_Shared_Reflection_SkyLightCubemapSampler, OpaqueBasePass, 8, 17
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, OpaqueBasePass, 5, 18
OpaqueBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, OpaqueBasePass, 8, 19
OpaqueBasePass_Shared_Reflection_ReflectionCubemap, OpaqueBasePass, 5, 20
OpaqueBasePass_Shared_Reflection_ReflectionCubemapSampler, OpaqueBasePass, 8, 21
OpaqueBasePass_Shared_Reflection_PreIntegratedGF, OpaqueBasePass, 5, 22
OpaqueBasePass_Shared_Reflection_PreIntegratedGFSampler, OpaqueBasePass, 8, 23
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionTexture, OpaqueBasePass, 5, 24
OpaqueBasePass_Shared_PlanarReflection_PlanarReflectionSampler, OpaqueBasePass, 8, 25
OpaqueBasePass_Shared_Fog_FogInscatteringColorCubemap, OpaqueBasePass, 5, 26
OpaqueBasePass_Shared_Fog_FogInscatteringColorSampler, OpaqueBasePass, 8, 27
OpaqueBasePass_Shared_Fog_IntegratedLightScattering, OpaqueBasePass, 9, 28
OpaqueBasePass_Shared_Fog_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 29
OpaqueBasePass_Shared_FogISR_FogInscatteringColorCubemap, OpaqueBasePass, 5, 30
OpaqueBasePass_Shared_FogISR_FogInscatteringColorSampler, OpaqueBasePass, 8, 31
OpaqueBasePass_Shared_FogISR_IntegratedLightScattering, OpaqueBasePass, 9, 32
OpaqueBasePass_Shared_FogISR_IntegratedLightScatteringSampler, OpaqueBasePass, 8, 33
OpaqueBasePass_Strata_MaterialTextureArrayUAVWithoutRTs, OpaqueBasePass, 13, 34
OpaqueBasePass_Strata_SSSTextureUAV, OpaqueBasePass, 13, 35
OpaqueBasePass_ForwardScreenSpaceShadowMaskTexture, OpaqueBasePass, 9, 36
OpaqueBasePass_IndirectOcclusionTexture, OpaqueBasePass, 9, 37
OpaqueBasePass_ResolvedSceneDepthTexture, OpaqueBasePass, 9, 38
OpaqueBasePass_DBufferATexture, OpaqueBasePass, 9, 39
OpaqueBasePass_DBufferBTexture, OpaqueBasePass, 9, 40
OpaqueBasePass_DBufferCTexture, OpaqueBasePass, 9, 41
OpaqueBasePass_DBufferRenderMask, OpaqueBasePass, 9, 42
OpaqueBasePass_DBufferATextureSampler, OpaqueBasePass, 8, 43
OpaqueBasePass_DBufferBTextureSampler, OpaqueBasePass, 8, 44
OpaqueBasePass_DBufferCTextureSampler, OpaqueBasePass, 8, 45
OpaqueBasePass_SceneColorWithoutSingleLayerWaterTexture, OpaqueBasePass, 9, 46
OpaqueBasePass_SceneColorWithoutSingleLayerWaterSampler, OpaqueBasePass, 8, 47
OpaqueBasePass_SceneDepthWithoutSingleLayerWaterTexture, OpaqueBasePass, 9, 48
OpaqueBasePass_SceneDepthWithoutSingleLayerWaterSampler, OpaqueBasePass, 8, 49
OpaqueBasePass_PreIntegratedGFTexture, OpaqueBasePass, 5, 50
OpaqueBasePass_PreIntegratedGFSampler, OpaqueBasePass, 8, 51
OpaqueBasePass_EyeAdaptationTexture, OpaqueBasePass, 9, 52
BasePass_Forward_DirectionalLightShadowmapAtlas, BasePass, 9, 0
BasePass_Forward_ShadowmapSampler, BasePass, 8, 1
BasePass_Forward_DirectionalLightStaticShadowmap, BasePass, 5, 2
BasePass_Forward_StaticShadowmapSampler, BasePass, 8, 3
BasePass_Forward_ForwardLocalLightBuffer, BasePass, 16, 4
BasePass_Forward_NumCulledLightsGrid, BasePass, 16, 5
BasePass_Forward_CulledLightDataGrid, BasePass, 16, 6
BasePass_Forward_DummyRectLightSourceTexture, BasePass, 5, 7
BasePass_ForwardISR_DirectionalLightShadowmapAtlas, BasePass, 9, 8
BasePass_ForwardISR_ShadowmapSampler, BasePass, 8, 9
BasePass_ForwardISR_DirectionalLightStaticShadowmap, BasePass, 5, 10
BasePass_ForwardISR_StaticShadowmapSampler, BasePass, 8, 11
BasePass_ForwardISR_ForwardLocalLightBuffer, BasePass, 16, 12
BasePass_ForwardISR_NumCulledLightsGrid, BasePass, 16, 13
BasePass_ForwardISR_CulledLightDataGrid, BasePass, 16, 14
BasePass_ForwardISR_DummyRectLightSourceTexture, BasePass, 5, 15
BasePass_Reflection_SkyLightCubemap, BasePass, 5, 16
BasePass_Reflection_SkyLightCubemapSampler, BasePass, 8, 17
BasePass_Reflection_SkyLightBlendDestinationCubemap, BasePass, 5, 18
BasePass_Reflection_SkyLightBlendDestinationCubemapSampler, BasePass, 8, 19
BasePass_Reflection_ReflectionCubemap, BasePass, 5, 20
BasePass_Reflection_ReflectionCubemapSampler, BasePass, 8, 21
BasePass_Reflection_PreIntegratedGF, BasePass, 5, 22
BasePass_Reflection_PreIntegratedGFSampler, BasePass, 8, 23
BasePass_PlanarReflection_PlanarReflectionTexture, BasePass, 5, 24
BasePass_PlanarReflection_PlanarReflectionSampler, BasePass, 8, 25
BasePass_Fog_FogInscatteringColorCubemap, BasePass, 5, 26
BasePass_Fog_FogInscatteringColorSampler, BasePass, 8, 27
BasePass_Fog_IntegratedLightScattering, BasePass, 9, 28
BasePass_Fog_IntegratedLightScatteringSampler, BasePass, 8, 29
BasePass_FogISR_FogInscatteringColorCubemap, BasePass, 5, 30
BasePass_FogISR_FogInscatteringColorSampler, BasePass, 8, 31
BasePass_FogISR_IntegratedLightScattering, BasePass, 9, 32
BasePass_FogISR_IntegratedLightScatteringSampler, BasePass, 8, 33
InstanceCulling_InstanceIdsBuffer, InstanceCulling, 16, 0
InstanceCulling_PageInfoBuffer, InstanceCulling, 16, 1
HairCardsVF_PositionBuffer, HairCardsVF, 6, 0
HairCardsVF_PreviousPositionBuffer, HairCardsVF, 6, 1
HairCardsVF_NormalsBuffer, HairCardsVF, 6, 2
HairCardsVF_UVsBuffer, HairCardsVF, 6, 3
HairCardsVF_MaterialsBuffer, HairCardsVF, 6, 4
HairCardsVF_DepthTexture, HairCardsVF, 5, 5
HairCardsVF_DepthSampler, HairCardsVF, 8, 6
HairCardsVF_TangentTexture, HairCardsVF, 5, 7
HairCardsVF_TangentSampler, HairCardsVF, 8, 8
HairCardsVF_CoverageTexture, HairCardsVF, 5, 9
HairCardsVF_CoverageSampler, HairCardsVF, 8, 10
HairCardsVF_AttributeTexture, HairCardsVF, 5, 11
HairCardsVF_AttributeSampler, HairCardsVF, 8, 12
HairCardsVF_AuxilaryDataTexture, HairCardsVF, 5, 13
HairCardsVF_AuxilaryDataSampler, HairCardsVF, 8, 14
HairCardsVF_MaterialTexture, HairCardsVF, 5, 15
HairCardsVF_MaterialSampler, HairCardsVF, 8, 16
HairStrandsVF_PositionOffsetBuffer, HairStrandsVF, 6, 0
HairStrandsVF_PreviousPositionOffsetBuffer, HairStrandsVF, 6, 1
HairStrandsVF_PositionBuffer, HairStrandsVF, 6, 2
HairStrandsVF_PreviousPositionBuffer, HairStrandsVF, 6, 3
HairStrandsVF_Attribute0Buffer, HairStrandsVF, 6, 4
HairStrandsVF_Attribute1Buffer, HairStrandsVF, 6, 5
HairStrandsVF_MaterialBuffer, HairStrandsVF, 6, 6
HairStrandsVF_TangentBuffer, HairStrandsVF, 6, 7
HairStrandsVF_CulledVertexIdsBuffer, HairStrandsVF, 6, 8
HairStrandsVF_CulledVertexRadiusScaleBuffer, HairStrandsVF, 6, 9
TranslucentBasePass_Shared_Forward_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 0
TranslucentBasePass_Shared_Forward_ShadowmapSampler, TranslucentBasePass, 8, 1
TranslucentBasePass_Shared_Forward_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 2
TranslucentBasePass_Shared_Forward_StaticShadowmapSampler, TranslucentBasePass, 8, 3
TranslucentBasePass_Shared_Forward_ForwardLocalLightBuffer, TranslucentBasePass, 16, 4
TranslucentBasePass_Shared_Forward_NumCulledLightsGrid, TranslucentBasePass, 16, 5
TranslucentBasePass_Shared_Forward_CulledLightDataGrid, TranslucentBasePass, 16, 6
TranslucentBasePass_Shared_Forward_DummyRectLightSourceTexture, TranslucentBasePass, 5, 7
TranslucentBasePass_Shared_ForwardISR_DirectionalLightShadowmapAtlas, TranslucentBasePass, 9, 8
TranslucentBasePass_Shared_ForwardISR_ShadowmapSampler, TranslucentBasePass, 8, 9
TranslucentBasePass_Shared_ForwardISR_DirectionalLightStaticShadowmap, TranslucentBasePass, 5, 10
TranslucentBasePass_Shared_ForwardISR_StaticShadowmapSampler, TranslucentBasePass, 8, 11
TranslucentBasePass_Shared_ForwardISR_ForwardLocalLightBuffer, TranslucentBasePass, 16, 12
TranslucentBasePass_Shared_ForwardISR_NumCulledLightsGrid, TranslucentBasePass, 16, 13
TranslucentBasePass_Shared_ForwardISR_CulledLightDataGrid, TranslucentBasePass, 16, 14
TranslucentBasePass_Shared_ForwardISR_DummyRectLightSourceTexture, TranslucentBasePass, 5, 15
TranslucentBasePass_Shared_Reflection_SkyLightCubemap, TranslucentBasePass, 5, 16
TranslucentBasePass_Shared_Reflection_SkyLightCubemapSampler, TranslucentBasePass, 8, 17
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemap, TranslucentBasePass, 5, 18
TranslucentBasePass_Shared_Reflection_SkyLightBlendDestinationCubemapSampler, TranslucentBasePass, 8, 19
TranslucentBasePass_Shared_Reflection_ReflectionCubemap, TranslucentBasePass, 5, 20
TranslucentBasePass_Shared_Reflection_ReflectionCubemapSampler, TranslucentBasePass, 8, 21
TranslucentBasePass_Shared_Reflection_PreIntegratedGF, TranslucentBasePass, 5, 22
TranslucentBasePass_Shared_Reflection_PreIntegratedGFSampler, TranslucentBasePass, 8, 23
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionTexture, TranslucentBasePass, 5, 24
TranslucentBasePass_Shared_PlanarReflection_PlanarReflectionSampler, TranslucentBasePass, 8, 25
TranslucentBasePass_Shared_Fog_FogInscatteringColorCubemap, TranslucentBasePass, 5, 26
TranslucentBasePass_Shared_Fog_FogInscatteringColorSampler, TranslucentBasePass, 8, 27
TranslucentBasePass_Shared_Fog_IntegratedLightScattering, TranslucentBasePass, 9, 28
TranslucentBasePass_Shared_Fog_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 29
TranslucentBasePass_Shared_FogISR_FogInscatteringColorCubemap, TranslucentBasePass, 5, 30
TranslucentBasePass_Shared_FogISR_FogInscatteringColorSampler, TranslucentBasePass, 8, 31
TranslucentBasePass_Shared_FogISR_IntegratedLightScattering, TranslucentBasePass, 9, 32
TranslucentBasePass_Shared_FogISR_IntegratedLightScatteringSampler, TranslucentBasePass, 8, 33
TranslucentBasePass_SceneTextures_SceneColorTexture, TranslucentBasePass, 9, 34
TranslucentBasePass_SceneTextures_SceneDepthTexture, TranslucentBasePass, 9, 35
TranslucentBasePass_SceneTextures_GBufferATexture, TranslucentBasePass, 9, 36
TranslucentBasePass_SceneTextures_GBufferBTexture, TranslucentBasePass, 9, 37
TranslucentBasePass_SceneTextures_GBufferCTexture, TranslucentBasePass, 9, 38
TranslucentBasePass_SceneTextures_GBufferDTexture, TranslucentBasePass, 9, 39
TranslucentBasePass_SceneTextures_GBufferETexture, TranslucentBasePass, 9, 40
TranslucentBasePass_SceneTextures_GBufferFTexture, TranslucentBasePass, 9, 41
TranslucentBasePass_SceneTextures_GBufferVelocityTexture, TranslucentBasePass, 9, 42
TranslucentBasePass_SceneTextures_ScreenSpaceAOTexture, TranslucentBasePass, 9, 43
TranslucentBasePass_SceneTextures_CustomDepthTexture, TranslucentBasePass, 9, 44
TranslucentBasePass_SceneTextures_CustomStencilTexture, TranslucentBasePass, 12, 45
TranslucentBasePass_SceneTextures_PointClampSampler, TranslucentBasePass, 8, 46
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapTexture, TranslucentBasePass, 9, 47
TranslucentBasePass_ForwardDirLightCloudShadow_CloudShadowmapSampler, TranslucentBasePass, 8, 48
TranslucentBasePass_HZBTexture, TranslucentBasePass, 9, 49
TranslucentBasePass_HZBSampler, TranslucentBasePass, 8, 50
TranslucentBasePass_PrevSceneColor, TranslucentBasePass, 9, 51
TranslucentBasePass_PrevSceneColorSampler, TranslucentBasePass, 8, 52
TranslucentBasePass_VolumetricCloudColor, TranslucentBasePass, 5, 53
TranslucentBasePass_VolumetricCloudColorSampler, TranslucentBasePass, 8, 54
TranslucentBasePass_VolumetricCloudDepth, TranslucentBasePass, 5, 55
TranslucentBasePass_VolumetricCloudDepthSampler, TranslucentBasePass, 8, 56
TranslucentBasePass_TranslucencyLightingVolumeAmbientInner, TranslucentBasePass, 9, 57
TranslucentBasePass_TranslucencyLightingVolumeAmbientOuter, TranslucentBasePass, 9, 58
TranslucentBasePass_TranslucencyLightingVolumeDirectionalInner, TranslucentBasePass, 9, 59
TranslucentBasePass_TranslucencyLightingVolumeDirectionalOuter, TranslucentBasePass, 9, 60
TranslucentBasePass_RadianceProbeIndirectionTexture, TranslucentBasePass, 9, 61
TranslucentBasePass_RadianceCacheFinalRadianceAtlas, TranslucentBasePass, 9, 62
TranslucentBasePass_RadianceCacheFinalIrradianceAtlas, TranslucentBasePass, 9, 63
TranslucentBasePass_RadianceCacheProbeOcclusionAtlas, TranslucentBasePass, 9, 64
TranslucentBasePass_RadianceCacheDepthAtlas, TranslucentBasePass, 9, 65
TranslucentBasePass_ProbeWorldOffset, TranslucentBasePass, 16, 66
TranslucentBasePass_TranslucencyGIVolume0, TranslucentBasePass, 9, 67
TranslucentBasePass_TranslucencyGIVolume1, TranslucentBasePass, 9, 68
TranslucentBasePass_TranslucencyGIVolumeHistory0, TranslucentBasePass, 9, 69
TranslucentBasePass_TranslucencyGIVolumeHistory1, TranslucentBasePass, 9, 70
TranslucentBasePass_TranslucencyGIVolumeSampler, TranslucentBasePass, 8, 71
TranslucentBasePass_PreIntegratedGFTexture, TranslucentBasePass, 5, 72
TranslucentBasePass_PreIntegratedGFSampler, TranslucentBasePass, 8, 73
TranslucentBasePass_EyeAdaptationTexture, TranslucentBasePass, 9, 74
TranslucentBasePass_SceneColorCopyTexture, TranslucentBasePass, 9, 75
TranslucentBasePass_SceneColorCopySampler, TranslucentBasePass, 8, 76
LightmapResourceCluster_LightMapTexture, LightmapResourceCluster, 5, 0
LightmapResourceCluster_SkyOcclusionTexture, LightmapResourceCluster, 5, 1
LightmapResourceCluster_AOMaterialMaskTexture, LightmapResourceCluster, 5, 2
LightmapResourceCluster_StaticShadowTexture, LightmapResourceCluster, 5, 3
LightmapResourceCluster_VTLightMapTexture, LightmapResourceCluster, 6, 4
LightmapResourceCluster_VTLightMapTexture_1, LightmapResourceCluster, 6, 5
LightmapResourceCluster_VTSkyOcclusionTexture, LightmapResourceCluster, 6, 6
LightmapResourceCluster_VTAOMaterialMaskTexture, LightmapResourceCluster, 6, 7
LightmapResourceCluster_VTStaticShadowTexture, LightmapResourceCluster, 6, 8
LightmapResourceCluster_LightMapSampler, LightmapResourceCluster, 8, 9
LightmapResourceCluster_LightMapSampler_1, LightmapResourceCluster, 8, 10
LightmapResourceCluster_SkyOcclusionSampler, LightmapResourceCluster, 8, 11
LightmapResourceCluster_AOMaterialMaskSampler, LightmapResourceCluster, 8, 12
LightmapResourceCluster_StaticShadowTextureSampler, LightmapResourceCluster, 8, 13
LightmapResourceCluster_LightmapVirtualTexturePageTable0, LightmapResourceCluster, 5, 14
LightmapResourceCluster_LightmapVirtualTexturePageTable1, LightmapResourceCluster, 5, 15
IndirectLightingCache_IndirectLightingCacheTexture0, IndirectLightingCache, 5, 0
IndirectLightingCache_IndirectLightingCacheTexture1, IndirectLightingCache, 5, 1
IndirectLightingCache_IndirectLightingCacheTexture2, IndirectLightingCache, 5, 2
IndirectLightingCache_IndirectLightingCacheTextureSampler0, IndirectLightingCache, 8, 3
IndirectLightingCache_IndirectLightingCacheTextureSampler1, IndirectLightingCache, 8, 4
IndirectLightingCache_IndirectLightingCacheTextureSampler2, IndirectLightingCache, 8, 5
PlanarReflectionStruct_PlanarReflectionTexture, PlanarReflectionStruct, 5, 0
PlanarReflectionStruct_PlanarReflectionSampler, PlanarReflectionStruct, 8, 1
ReflectionStruct_SkyLightCubemap, ReflectionStruct, 5, 0
ReflectionStruct_SkyLightCubemapSampler, ReflectionStruct, 8, 1
ReflectionStruct_SkyLightBlendDestinationCubemap, ReflectionStruct, 5, 2
ReflectionStruct_SkyLightBlendDestinationCubemapSampler, ReflectionStruct, 8, 3
ReflectionStruct_ReflectionCubemap, ReflectionStruct, 5, 4
ReflectionStruct_ReflectionCubemapSampler, ReflectionStruct, 8, 5
ReflectionStruct_PreIntegratedGF, ReflectionStruct, 5, 6
ReflectionStruct_PreIntegratedGFSampler, ReflectionStruct, 8, 7
FogStruct_FogInscatteringColorCubemap, FogStruct, 5, 0
FogStruct_FogInscatteringColorSampler, FogStruct, 8, 1
FogStruct_IntegratedLightScattering, FogStruct, 9, 2
FogStruct_IntegratedLightScatteringSampler, FogStruct, 8, 3
LumenGIVolumeStruct_RadianceProbeIndirectionTexture, LumenGIVolumeStruct, 9, 0
LumenGIVolumeStruct_RadianceCacheFinalRadianceAtlas, LumenGIVolumeStruct, 9, 1
LumenGIVolumeStruct_RadianceCacheFinalIrradianceAtlas, LumenGIVolumeStruct, 9, 2
LumenGIVolumeStruct_RadianceCacheProbeOcclusionAtlas, LumenGIVolumeStruct, 9, 3
LumenGIVolumeStruct_RadianceCacheDepthAtlas, LumenGIVolumeStruct, 9, 4
LumenGIVolumeStruct_ProbeWorldOffset, LumenGIVolumeStruct, 16, 5
LumenGIVolumeStruct_TranslucencyGIVolume0, LumenGIVolumeStruct, 9, 6
LumenGIVolumeStruct_TranslucencyGIVolume1, LumenGIVolumeStruct, 9, 7
LumenGIVolumeStruct_TranslucencyGIVolumeHistory0, LumenGIVolumeStruct, 9, 8
LumenGIVolumeStruct_TranslucencyGIVolumeHistory1, LumenGIVolumeStruct, 9, 9
LumenGIVolumeStruct_TranslucencyGIVolumeSampler, LumenGIVolumeStruct, 8, 10
TranslucentSelfShadow_Transmission0, TranslucentSelfShadow, 5, 0
TranslucentSelfShadow_Transmission1, TranslucentSelfShadow, 5, 1
TranslucentSelfShadow_Transmission0Sampler, TranslucentSelfShadow, 8, 2
TranslucentSelfShadow_Transmission1Sampler, TranslucentSelfShadow, 8, 3
ForwardLightData_DirectionalLightShadowmapAtlas, ForwardLightData, 9, 0
ForwardLightData_ShadowmapSampler, ForwardLightData, 8, 1
ForwardLightData_DirectionalLightStaticShadowmap, ForwardLightData, 5, 2
ForwardLightData_StaticShadowmapSampler, ForwardLightData, 8, 3
ForwardLightData_ForwardLocalLightBuffer, ForwardLightData, 16, 4
ForwardLightData_NumCulledLightsGrid, ForwardLightData, 16, 5
ForwardLightData_CulledLightDataGrid, ForwardLightData, 16, 6
ForwardLightData_DummyRectLightSourceTexture, ForwardLightData, 5, 7
DeferredLightUniforms_SourceTexture, DeferredLightUniforms, 5, 0
RaytracingLightsDataPacked_RectLightTexture0, RaytracingLightsDataPacked, 5, 0
RaytracingLightsDataPacked_RectLightTexture1, RaytracingLightsDataPacked, 5, 1
RaytracingLightsDataPacked_RectLightTexture2, RaytracingLightsDataPacked, 5, 2
RaytracingLightsDataPacked_RectLightTexture3, RaytracingLightsDataPacked, 5, 3
RaytracingLightsDataPacked_RectLightTexture4, RaytracingLightsDataPacked, 5, 4
RaytracingLightsDataPacked_RectLightTexture5, RaytracingLightsDataPacked, 5, 5
RaytracingLightsDataPacked_RectLightTexture6, RaytracingLightsDataPacked, 5, 6
RaytracingLightsDataPacked_RectLightTexture7, RaytracingLightsDataPacked, 5, 7
RaytracingLightsDataPacked_IESLightProfileTextureSampler, RaytracingLightsDataPacked, 8, 8
RaytracingLightsDataPacked_IESLightProfileTexture, RaytracingLightsDataPacked, 5, 9
RaytracingLightsDataPacked_SSProfilesTexture, RaytracingLightsDataPacked, 6, 10
RaytracingLightsDataPacked_LightDataBuffer, RaytracingLightsDataPacked, 6, 11
RaytracingLightsDataPacked_LightIndices, RaytracingLightsDataPacked, 6, 12
RaytracingLightsDataPacked_LightCullingVolume, RaytracingLightsDataPacked, 6, 13
VirtualShadowMap_ProjectionData, VirtualShadowMap, 16, 0
VirtualShadowMap_PageTable, VirtualShadowMap, 16, 1
VirtualShadowMap_PageFlags, VirtualShadowMap, 16, 2
VirtualShadowMap_PageRectBounds, VirtualShadowMap, 16, 3
VirtualShadowMap_PhysicalPagePool, VirtualShadowMap, 9, 4
Material_Texture2D_0, Material, 5, 0
Material_Texture2D_0Sampler, Material, 8, 1
Material_Texture2D_1, Material, 5, 2
Material_Texture2D_1Sampler, Material, 8, 3
Material_Texture2D_2, Material, 5, 4
Material_Texture2D_2Sampler, Material, 8, 5
Material_Texture2D_3, Material, 5, 6
Material_Texture2D_3Sampler, Material, 8, 7
Material_Texture2D_4, Material, 5, 8
Material_Texture2D_4Sampler, Material, 8, 9
Material_Texture2D_5, Material, 5, 10
Material_Texture2D_5Sampler, Material, 8, 11
Material_Texture2D_6, Material, 5, 12
Material_Texture2D_6Sampler, Material, 8, 13
Material_Texture2D_7, Material, 5, 14
Material_Texture2D_7Sampler, Material, 8, 15
Material_Texture2D_8, Material, 5, 16
Material_Texture2D_8Sampler, Material, 8, 17
Material_Texture2D_9, Material, 5, 18
Material_Texture2D_9Sampler, Material, 8, 19
Material_Texture2D_10, Material, 5, 20
Material_Texture2D_10Sampler, Material, 8, 21
Material_Texture2D_11, Material, 5, 22
Material_Texture2D_11Sampler, Material, 8, 23
Material_Texture2D_12, Material, 5, 24
Material_Texture2D_12Sampler, Material, 8, 25
Material_Texture2D_13, Material, 5, 26
Material_Texture2D_13Sampler, Material, 8, 27
Material_Texture2D_14, Material, 5, 28
Material_Texture2D_14Sampler, Material, 8, 29
Material_Texture2D_15, Material, 5, 30
Material_Texture2D_15Sampler, Material, 8, 31
Material_Texture2D_16, Material, 5, 32
Material_Texture2D_16Sampler, Material, 8, 33
Material_Texture2D_17, Material, 5, 34
Material_Texture2D_17Sampler, Material, 8, 35
Material_Texture2D_18, Material, 5, 36
Material_Texture2D_18Sampler, Material, 8, 37
Material_Texture2D_19, Material, 5, 38
Material_Texture2D_19Sampler, Material, 8, 39
Material_Texture2D_20, Material, 5, 40
Material_Texture2D_20Sampler, Material, 8, 41
Material_Texture2D_21, Material, 5, 42
Material_Texture2D_21Sampler, Material, 8, 43
Material_Texture2D_22, Material, 5, 44
Material_Texture2D_22Sampler, Material, 8, 45
Material_Texture2D_23, Material, 5, 46
Material_Texture2D_23Sampler, Material, 8, 47
Material_Texture2D_24, Material, 5, 48
Material_Texture2D_24Sampler, Material, 8, 49
Material_Texture2D_25, Material, 5, 50
Material_Texture2D_25Sampler, Material, 8, 51
Material_Texture2D_26, Material, 5, 52
Material_Texture2D_26Sampler, Material, 8, 53
Material_Texture2D_27, Material, 5, 54
Material_Texture2D_27Sampler, Material, 8, 55
Material_Texture2D_28, Material, 5, 56
Material_Texture2D_28Sampler, Material, 8, 57
Material_Texture2D_29, Material, 5, 58
Material_Texture2D_29Sampler, Material, 8, 59
Material_Texture2D_30, Material, 5, 60
Material_Texture2D_30Sampler, Material, 8, 61
Material_Texture2D_31, Material, 5, 62
Material_Texture2D_31Sampler, Material, 8, 63
Material_Texture2D_32, Material, 5, 64
Material_Texture2D_32Sampler, Material, 8, 65
Material_Texture2D_33, Material, 5, 66
Material_Texture2D_33Sampler, Material, 8, 67
Material_Texture2D_34, Material, 5, 68
Material_Texture2D_34Sampler, Material, 8, 69
Material_Texture2D_35, Material, 5, 70
Material_Texture2D_35Sampler, Material, 8, 71
Material_Texture2D_36, Material, 5, 72
Material_Texture2D_36Sampler, Material, 8, 73
Material_Texture2D_37, Material, 5, 74
Material_Texture2D_37Sampler, Material, 8, 75
Material_Texture2D_38, Material, 5, 76
Material_Texture2D_38Sampler, Material, 8, 77
Material_Texture2D_39, Material, 5, 78
Material_Texture2D_39Sampler, Material, 8, 79
Material_Wrap_WorldGroupSettings, Material, 8, 80
Material_Clamp_WorldGroupSettings, Material, 8, 81
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
#if 0 /*DIRECT COMPILE*/
-directcompile -format=PCD3D_SM5 -entry=MainPS -ps H:/NewUnreal/TestPro_Newj/TestProj/Saved/ShaderDebugInfo/PCD3D_SM5/M_Crowd_Head_v2/TGPUSkinVertexFactoryDefault/TBasePassPSFPrecomputedVolumetricLightmapLightingPolicy/0/BasePassPixelShader.usf -cflags=4096 -nocrashreports
#endif /*DIRECT COMPILE*/
//
